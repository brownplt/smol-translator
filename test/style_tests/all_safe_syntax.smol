42
(defvar s1 "foobar")
(defvar s2 "a string with numbers (e.g., 42) and quotes (e.g., '' and \"\")")
#t
#f

(+ 3 4)
(- 3 4)
(* 3 4)
(/ 6 3)

(= 5 6)
(< 5 6)
(<= 5 6)
(> 5 6)
(>= 5 6)
(zero? 7)

; (string=? "apple" "orange")

(defvar x 123)
(deffun (f y) (+ y 1))
(set! x 456)

#()
#(#(1) #() #(2 3) #(4))

(ivec 1 2)
(mvec 1 2)

(vec-len (mvec 1 2 3))
(vec-ref (mvec 1 2 3) 2)
(vec-set! (mvec 1 2 3) 2 0)

(pair 3 4)
(mpair 3 4)

(left (pair 3 4))
(right (pair 3 4))
(set-left! (mpair 3 4) 5)
(set-right! (mpair 3 4) 5)

; (list)
; (list 1 (list) (list 2 3) 4)

; empty
; (cons 1 (cons 2 empty))
; (list 1 2)

; (empty? (list))
; (empty? (list 1 2 3))
; (first (list 1 2 3))
; (rest (list 1 2 3))

(eq? #(1 2) #(1 2))
; (equal? #(1 2) #(1 2))

; (begin
;   (begin
;     1
;     2)
;   3)


(cond
  [(eq? "apple" "orange")
   "yes"]
  [else
   "no"])
(if (eq? "apple" "orange")
    "yes"
    "no")
(and)
(and #t #f #t)
(or)
(or #t #f #t)
(not #t)

; (let ([x 2]
;       [y (+ x 1)])
;   (mvec x y))
; (let* ([x 2]
;        [y (+ x 1)])
;   (mvec x y))
; (letrec ([x (lambda () y)]
;          [y 3])
;   (mvec (x) y))

(defvar g
  (lambda ()
    3))
(defvar h
  (lambda (x y)
    (+ x y)))
(g)
(h 4 5)

(print "foobar")

(error "bad thing happens")

(print "this should not be printed")