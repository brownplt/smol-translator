// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.mjs";
import * as SExpression from "@brownplt/s-expression/src/SExpression.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Belt_HashMapString from "rescript/lib/es6/belt_HashMapString.js";
import * as Belt_HashSetString from "rescript/lib/es6/belt_HashSetString.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function mapAnn(f) {
  return function (param) {
    return {
            it: f(param.it),
            ann: param.ann
          };
  };
}

function toSourceMap(t) {
  var hMap = new Map();
  var ln = {
    contents: 0
  };
  var ch = {
    contents: 0
  };
  var f = function (param) {
    var it = param.it;
    var begin_ln = ln.contents;
    var begin_ch = ch.contents;
    var begin = {
      ln: begin_ln,
      ch: begin_ch
    };
    if (it.TAG === "Plain") {
      it._0.split("").forEach(function (c) {
            if (c !== "\n") {
              ch.contents = ch.contents + 1 | 0;
              return ;
            }
            ln.contents = ln.contents + 1 | 0;
            ch.contents = 0;
          });
    } else {
      Core__List.forEach(it._0, f);
    }
    var end_ln = ln.contents;
    var end_ch = ch.contents;
    var end = {
      ln: end_ln,
      ch: end_ch
    };
    Core__Option.forEach(param.ann, (function (ann) {
            hMap.set(ann, {
                  begin: begin,
                  end: end
                });
          }));
  };
  f(t);
  return hMap;
}

function toString(it) {
  if (it.TAG === "Plain") {
    return it._0;
  } else {
    return Core__List.toArray(Core__List.map(it._0, (function (param) {
                        return toString(param.it);
                      }))).join("");
  }
}

function map(f) {
  return function (it) {
    if (it.TAG === "Plain") {
      return {
              TAG: "Plain",
              _0: f(it._0)
            };
    } else {
      return {
              TAG: "Group",
              _0: Core__List.map(it._0, mapAnn(function (t) {
                        return map(f)(t);
                      }))
            };
    }
  };
}

function concat2(p1, s, p2) {
  return {
          TAG: "Group",
          _0: {
            hd: p1,
            tl: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: s
                },
                ann: undefined
              },
              tl: {
                hd: p2,
                tl: /* [] */0
              }
            }
          }
        };
}

function concat(s, ts) {
  var intersperse = function (x, ys) {
    if (!ys) {
      return /* [] */0;
    }
    var ys$1 = ys.tl;
    var y = ys.hd;
    if (!ys$1) {
      return {
              hd: y,
              tl: /* [] */0
            };
    }
    var loop = function (ys) {
      if (ys) {
        return {
                hd: x,
                tl: {
                  hd: ys.hd,
                  tl: loop(ys.tl)
                }
              };
      } else {
        return /* [] */0;
      }
    };
    return {
            hd: y,
            tl: loop(ys$1)
          };
  };
  return {
          TAG: "Group",
          _0: intersperse({
                it: {
                  TAG: "Plain",
                  _0: s
                },
                ann: undefined
              }, ts)
        };
}

function pad(prefix, it, suffix) {
  var prefix_it = {
    TAG: "Plain",
    _0: prefix
  };
  var prefix$1 = {
    it: prefix_it,
    ann: undefined
  };
  var suffix_it = {
    TAG: "Plain",
    _0: suffix
  };
  var suffix$1 = {
    it: suffix_it,
    ann: undefined
  };
  return {
          TAG: "Group",
          _0: {
            hd: prefix$1,
            tl: {
              hd: it,
              tl: {
                hd: suffix$1,
                tl: /* [] */0
              }
            }
          }
        };
}

function dummy(it) {
  return {
          it: it,
          ann: undefined
        };
}

function s(strings, parameters) {
  var s$1 = Core__Option.getExn(Core__Array.last(strings), undefined);
  var ih = s$1 === "" ? /* [] */0 : ({
        hd: {
          it: {
            TAG: "Plain",
            _0: s$1
          },
          ann: undefined
        },
        tl: /* [] */0
      });
  return {
          TAG: "Group",
          _0: Core__Array.reduceRightWithIndex(parameters, ih, (function (ih, parameter, i) {
                  var ih$1 = {
                    hd: parameter,
                    tl: ih
                  };
                  var s = Core__Option.getExn(strings[i], undefined);
                  if (s === "") {
                    return ih$1;
                  } else {
                    return {
                            hd: {
                              it: {
                                TAG: "Plain",
                                _0: s
                              },
                              ann: undefined
                            },
                            tl: ih$1
                          };
                  }
                }))
        };
}

function wrap(prefix, p, suffix) {
  return s([
              "",
              "",
              "",
              ""
            ], [
              {
                it: {
                  TAG: "Plain",
                  _0: prefix
                },
                ann: undefined
              },
              p,
              {
                it: {
                  TAG: "Plain",
                  _0: suffix
                },
                ann: undefined
              }
            ]);
}

function containsNL(it) {
  if (it.TAG === "Plain") {
    return it._0.includes("\n");
  } else {
    return Core__List.some(it._0, (function (param) {
                  return containsNL(param.it);
                }));
  }
}

function group2(s1, s2) {
  return {
          TAG: "Group",
          _0: {
            hd: s1,
            tl: {
              hd: s2,
              tl: /* [] */0
            }
          }
        };
}

function surround(prefix, s, suffix) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: prefix
              },
              ann: undefined
            },
            tl: {
              hd: {
                it: s,
                ann: undefined
              },
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: suffix
                  },
                  ann: undefined
                },
                tl: /* [] */0
              }
            }
          }
        };
}

function toString$1(t) {
  if (typeof t !== "object") {
    switch (t) {
      case "PairNew" :
          return "mpair";
      case "PairRefLeft" :
          return "left";
      case "PairRefRight" :
          return "right";
      case "PairSetLeft" :
          return "set-left!";
      case "PairSetRight" :
          return "set-right!";
      case "VecNew" :
          return "mvec";
      case "VecRef" :
          return "vec-ref";
      case "VecSet" :
          return "vec-set!";
      case "VecLen" :
          return "vec-len";
      case "Err" :
          return "error";
      case "Not" :
          return "not";
      case "Print" :
          return "print";
      case "Next" :
          return "next";
      case "Cons" :
          return "cons";
      
    }
  } else if (t.TAG === "Arith") {
    switch (t._0) {
      case "Add" :
          return "+";
      case "Sub" :
          return "-";
      case "Mul" :
          return "*";
      case "Div" :
          return "/";
      
    }
  } else {
    switch (t._0) {
      case "Lt" :
          return "<";
      case "Eq" :
          return "eq?";
      case "Gt" :
          return ">";
      case "Le" :
          return "<=";
      case "Ge" :
          return ">=";
      case "Ne" :
          return "!=";
      case "Equal" :
          return "equal?";
      
    }
  }
}

var Primitive = {
  toString: toString$1
};

function termsOfBlock(param) {
  var it = param.it;
  if (it.TAG === "BRet") {
    return /* [] */0;
  } else {
    return {
            hd: it._0,
            tl: termsOfBlock(it._1)
          };
  }
}

function termsOfProgram(param) {
  var it = param.it;
  if (typeof it !== "object") {
    return /* [] */0;
  } else {
    return {
            hd: it._0,
            tl: termsOfProgram(it._1)
          };
  }
}

function xsOfTerm(t) {
  var d = t.it;
  if (d.TAG === "Def") {
    var d$1 = d._0;
    var match = d$1.it;
    return {
            hd: match._0,
            tl: /* [] */0
          };
  } else {
    return /* [] */0;
  }
}

function xsOfBlock(b) {
  return Core__List.flat(Core__List.map(termsOfBlock(b), xsOfTerm));
}

function xsOfProgram(p) {
  return Core__List.flat(Core__List.map(termsOfProgram(p), xsOfTerm));
}

function toString$2(t) {
  switch (t) {
    case "Name" :
        return "name";
    case "Expression" :
        return "expression";
    case "Bind" :
        return "bind";
    case "Block" :
        return "block";
    case "Definition" :
        return "definition";
    case "Term" :
        return "term";
    case "Program" :
        return "program";
    
  }
}

var NodeKind = {
  toString: toString$2
};

function toString$3(t) {
  if (t === "Atom") {
    return "atom";
  } else {
    return "list";
  }
}

var SExprKind = {
  toString: toString$3
};

function toString$4(t) {
  switch (t) {
    case "ExactlyOne" :
        return "exactly one";
    case "ExactlyTwo" :
        return "exactly two";
    case "ExactlyThree" :
        return "exactly three";
    case "OneThenMany" :
        return "one followed by many";
    case "ManyThenOne" :
        return "many followed by one";
    case "OneThenManyThenOne" :
        return "one followed by several followed by one";
    
  }
}

var Arity = {
  toString: toString$4
};

function toString$5(t) {
  if (t === "Definition") {
    return "definition";
  } else {
    return "expression";
  }
}

var TermKind = {
  toString: toString$5
};

function toString$6(t) {
  switch (t.TAG) {
    case "SExprParseError" :
        return "expecting a (valid) s-expression, but the input is not: " + t._0;
    case "SExprKindError" :
        return "expecting a " + t._1 + ", given " + SExpression.SExpr.toString(t._2);
    case "SExprArityError" :
        return "expecting " + t._1 + ", given " + Core__List.toArray(Core__List.map(t._2, SExpression.SExpr.toString)).join(" ");
    case "LiteralSymbolError" :
        return "expecting a literal value, given a symbol " + t._0;
    case "LiteralListError" :
        return "expecting a constant or a vector, given " + SExpression.SExpr.toString(t._0);
    case "TermKindError" :
        var term = t._2;
        return "expecting " + t._1 + ", given something else at " + SExpression.SourcePoint.toString(term.ann.begin) + "-" + SExpression.SourcePoint.toString(term.ann.end);
    
  }
}

var ParseError = {
  toString: toString$6
};

var SMoLParseError = /* @__PURE__ */Caml_exceptions.create("SMoL.SMoLParseError");

function makeProgram(ts) {
  if (!ts) {
    return {
            it: "PNil",
            ann: {
              begin: {
                ln: 0,
                ch: 0
              },
              end: {
                ln: 0,
                ch: 0
              }
            }
          };
  }
  var ts$1 = ts.tl;
  var t = ts.hd;
  if (ts$1) {
    var p = makeProgram(ts$1);
    return {
            it: {
              TAG: "PCons",
              _0: t,
              _1: p
            },
            ann: {
              begin: t.ann.begin,
              end: p.ann.end
            }
          };
  }
  var rest_ann = {
    begin: t.ann.end,
    end: t.ann.end
  };
  var rest = {
    it: "PNil",
    ann: rest_ann
  };
  return {
          it: {
            TAG: "PCons",
            _0: t,
            _1: rest
          },
          ann: t.ann
        };
}

function makeBlock(ts, e) {
  if (!ts) {
    return {
            it: {
              TAG: "BRet",
              _0: e
            },
            ann: e.ann
          };
  }
  var t = ts.hd;
  var b = makeBlock(ts.tl, e);
  return {
          it: {
            TAG: "BCons",
            _0: t,
            _1: b
          },
          ann: {
            begin: t.ann.begin,
            end: b.ann.end
          }
        };
}

function constant_of_atom(atom) {
  if (atom.TAG === "Str") {
    return {
            TAG: "Str",
            _0: atom._0
          };
  }
  var x = atom._0;
  switch (x) {
    case "#f" :
        return {
                TAG: "Lgc",
                _0: false
              };
    case "#t" :
        return {
                TAG: "Lgc",
                _0: true
              };
    default:
      var tryNum = Core__Float.fromString(x);
      if (tryNum !== undefined) {
        return {
                TAG: "Num",
                _0: tryNum
              };
      }
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: {
              TAG: "LiteralSymbolError",
              _0: x
            },
            Error: new Error()
          };
  }
}

function outputletOfSExpr(e) {
  var it = e.it;
  if (it.TAG === "Atom") {
    var match = it._0;
    if (match.TAG !== "Str" && match._0 === "error") {
      return "OErr";
    }
    
  }
  var p = function (e) {
    var atom = e.it;
    if (atom.TAG === "Atom") {
      return {
              TAG: "Con",
              _0: constant_of_atom(atom._0)
            };
    } else if (atom.sequenceKind === "List") {
      return {
              TAG: "Struct",
              _0: undefined,
              _1: {
                TAG: "Lst",
                _0: Core__List.map(atom.content, p)
              }
            };
    } else {
      return {
              TAG: "Struct",
              _0: undefined,
              _1: {
                TAG: "Vec",
                _0: Core__List.map(atom.content, p)
              }
            };
    }
  };
  return {
          TAG: "OVal",
          _0: p(e)
        };
}

function parseValue(e) {
  var ann = e.ann;
  var it = e.it;
  if (it.TAG === "Atom") {
    return {
            it: {
              TAG: "Con",
              _0: constant_of_atom(it._0)
            },
            ann: ann
          };
  }
  if (it.sequenceKind === "List") {
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: "LiteralListError",
            _0: e
          },
          Error: new Error()
        };
  }
  var content = Core__List.map(it.content, parseValue);
  return {
          it: {
            TAG: "AppPrm",
            _0: "VecNew",
            _1: content
          },
          ann: ann
        };
}

function as_id(context, e) {
  var match = e.it;
  if (match.TAG === "Atom") {
    var x = match._0;
    if (x.TAG !== "Str") {
      return {
              it: x._0,
              ann: e.ann
            };
    }
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: "SExprKindError",
            _0: "Atom",
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprKindError",
          _0: "Atom",
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function as_list(context, e) {
  var it = e.it;
  if (it.TAG === "Atom") {
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: "SExprKindError",
            _0: "List",
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  if (it.sequenceKind === "List") {
    return {
            it: it.content,
            ann: e.ann
          };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprKindError",
          _0: "List",
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function as_one_then_many(context, es) {
  if (es) {
    return [
            es.hd,
            es.tl
          ];
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprArityError",
          _0: "OneThenMany",
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_many_then_one(context, es) {
  if (es) {
    var e1 = es.hd;
    var match = Core__List.reverse(es.tl);
    if (match) {
      return [
              {
                hd: e1,
                tl: Core__List.reverse(match.tl)
              },
              match.hd
            ];
    } else {
      return [
              /* [] */0,
              e1
            ];
    }
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprArityError",
          _0: "ManyThenOne",
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_one(context, es) {
  if (es) {
    if (es.tl) {
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: {
              TAG: "SExprArityError",
              _0: "ExactlyOne",
              _1: context,
              _2: es
            },
            Error: new Error()
          };
    }
    return es.hd;
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprArityError",
          _0: "ExactlyOne",
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_two(context, es) {
  if (es) {
    var match = es.tl;
    if (match && !match.tl) {
      return [
              es.hd,
              match.hd
            ];
    }
    
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprArityError",
          _0: "ExactlyTwo",
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_three(context, es) {
  if (es) {
    var match = es.tl;
    if (match) {
      var match$1 = match.tl;
      if (match$1 && !match$1.tl) {
        return [
                es.hd,
                match.hd,
                match$1.hd
              ];
      }
      
    }
    
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprArityError",
          _0: "ExactlyThree",
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_one_then_many_then_one(context, es) {
  if (es) {
    var match = es.tl;
    if (match) {
      var e2 = match.hd;
      var e1 = es.hd;
      var match$1 = Core__List.reverse(match.tl);
      if (match$1) {
        return [
                e1,
                {
                  hd: e2,
                  tl: Core__List.reverse(match$1.tl)
                },
                match$1.hd
              ];
      } else {
        return [
                e1,
                /* [] */0,
                e2
              ];
      }
    }
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: "SExprArityError",
            _0: "OneThenManyThenOne",
            _1: context,
            _2: es
          },
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "SExprArityError",
          _0: "OneThenManyThenOne",
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_expr(context, e) {
  var it = e.it;
  if (it.TAG !== "Def") {
    return it._0;
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: "TermKindError",
          _0: "Expression",
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function expr_of_atom(atom) {
  if (atom.TAG === "Str") {
    return {
            TAG: "Con",
            _0: {
              TAG: "Str",
              _0: atom._0
            }
          };
  }
  var x = atom._0;
  switch (x) {
    case "#f" :
        return {
                TAG: "Con",
                _0: {
                  TAG: "Lgc",
                  _0: false
                }
              };
    case "#t" :
        return {
                TAG: "Con",
                _0: {
                  TAG: "Lgc",
                  _0: true
                }
              };
    default:
      var tryNum = Core__Option.map(Core__Float.fromString(x), (function (n) {
              return {
                      TAG: "Con",
                      _0: {
                        TAG: "Num",
                        _0: n
                      }
                    };
            }));
      return Core__Option.getOr(tryNum, {
                  TAG: "Ref",
                  _0: x
                });
  }
}

function letstar(ann, xes, body) {
  if (xes) {
    var xes$1 = xes.tl;
    var xe = xes.hd;
    if (xes$1) {
      return ann({
                  TAG: "Let",
                  _0: {
                    hd: xe,
                    tl: /* [] */0
                  },
                  _1: makeBlock(/* [] */0, letstar((function (it) {
                              return {
                                      it: it,
                                      ann: {
                                        begin: Core__Option.getOr(Core__Option.map(Core__List.head(xes$1), (function (xe) {
                                                    return xe.ann.begin;
                                                  })), body.ann.begin),
                                        end: body.ann.end
                                      }
                                    };
                            }), xes$1, body))
                });
    } else {
      return ann({
                  TAG: "Let",
                  _0: {
                    hd: xe,
                    tl: /* [] */0
                  },
                  _1: body
                });
    }
  }
  var e = body.it;
  if (e.TAG === "BRet") {
    return e._0;
  } else {
    return ann({
                TAG: "Let",
                _0: /* [] */0,
                _1: body
              });
  }
}

function parseTerm(e) {
  var ann = function (it) {
    return {
            it: it,
            ann: e.ann
          };
  };
  var atom = e.it;
  var tmp;
  if (atom.TAG === "Atom") {
    var it = expr_of_atom(atom._0);
    tmp = {
      TAG: "Exp",
      _0: {
        it: it,
        ann: e.ann
      }
    };
  } else if (atom.sequenceKind === "List") {
    var es = atom.content;
    var exit = 0;
    if (es) {
      var match = es.hd.it;
      if (match.TAG === "Atom") {
        var match$1 = match._0;
        if (match$1.TAG === "Str") {
          exit = 1;
        } else {
          switch (match$1._0) {
            case "!=" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Ne"
                    }, es.tl);
                break;
            case "*" :
                tmp = makeAppPrm(ann, {
                      TAG: "Arith",
                      _0: "Mul"
                    }, es.tl);
                break;
            case "+" :
                tmp = makeAppPrm(ann, {
                      TAG: "Arith",
                      _0: "Add"
                    }, es.tl);
                break;
            case "-" :
                tmp = makeAppPrm(ann, {
                      TAG: "Arith",
                      _0: "Sub"
                    }, es.tl);
                break;
            case "/" :
                tmp = makeAppPrm(ann, {
                      TAG: "Arith",
                      _0: "Div"
                    }, es.tl);
                break;
            case "<" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Lt"
                    }, es.tl);
                break;
            case "<=" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Le"
                    }, es.tl);
                break;
            case ">" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Gt"
                    }, es.tl);
                break;
            case ">=" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Ge"
                    }, es.tl);
                break;
            case "begin" :
                var match$2 = as_many_then_one("one or more expressions", es.tl);
                var terms = Core__List.map(Core__List.map(match$2[0], parseTerm), (function (t) {
                        return as_expr("an expression", t);
                      }));
                var result = as_expr("an expression", parseTerm(match$2[1]));
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: {
                      TAG: "Bgn",
                      _0: terms,
                      _1: result
                    },
                    ann: e.ann
                  }
                };
                break;
            case "cond" :
                var branches = Core__List.map(Core__List.map(es.tl, (function (branch) {
                            return as_list("a `cond` branch", branch).it;
                          })), (function (branch) {
                        return as_one_then_many_then_one("the condition followed by the branch", branch);
                      }));
                var loop = function (_parsed, _branches) {
                  while(true) {
                    var branches = _branches;
                    var parsed = _parsed;
                    if (branches) {
                      var match = branches.hd;
                      var $$case = match[0];
                      var match$1 = $$case.it;
                      if (match$1.TAG === "Atom") {
                        var match$2 = match$1._0;
                        if (match$2.TAG !== "Str" && match$2._0 === "else" && !branches.tl) {
                          var terms = Core__List.map(match[1], parseTerm);
                          var result = as_expr("an expression", parseTerm(match[2]));
                          var it_0 = Core__List.reverse(parsed);
                          var it_1 = makeBlock(terms, result);
                          var it = {
                            TAG: "Cnd",
                            _0: it_0,
                            _1: it_1
                          };
                          return {
                                  TAG: "Exp",
                                  _0: {
                                    it: it,
                                    ann: e.ann
                                  }
                                };
                        }
                        
                      }
                      var $$case$1 = as_expr("a (conditional) expression", parseTerm($$case));
                      var terms$1 = Core__List.map(match[1], parseTerm);
                      var result$1 = as_expr("an expression", parseTerm(match[2]));
                      _branches = branches.tl;
                      _parsed = {
                        hd: [
                          $$case$1,
                          makeBlock(terms$1, result$1)
                        ],
                        tl: parsed
                      };
                      continue ;
                    }
                    var it_0$1 = Core__List.reverse(parsed);
                    var it$1 = {
                      TAG: "Cnd",
                      _0: it_0$1,
                      _1: undefined
                    };
                    return {
                            TAG: "Exp",
                            _0: {
                              it: it$1,
                              ann: e.ann
                            }
                          };
                  };
                };
                tmp = loop(/* [] */0, branches);
                break;
            case "deffun" :
                var match$3 = as_one_then_many_then_one("a function header and a body", es.tl);
                var match$4 = as_one_then_many("function name followed by parameters", as_list("function name and parameters", match$3[0]).it);
                var fun = as_id("a function name", match$4[0]);
                var args = Core__List.map(match$4[1], (function (arg) {
                        return as_id("a parameter", arg);
                      }));
                var terms$1 = Belt_List.map(match$3[1], parseTerm);
                var result$1 = as_expr("an expression to be returned", parseTerm(match$3[2]));
                var it_2 = makeBlock(terms$1, result$1);
                var it$1 = {
                  TAG: "Fun",
                  _0: fun,
                  _1: args,
                  _2: it_2
                };
                tmp = {
                  TAG: "Def",
                  _0: {
                    it: it$1,
                    ann: e.ann
                  }
                };
                break;
            case "defgen" :
                var match$5 = as_one_then_many_then_one("a generator header and a body", es.tl);
                var match$6 = as_one_then_many("generator name followed by parameters", as_list("generator name and parameters", match$5[0]).it);
                var fun$1 = as_id("a generator name", match$6[0]);
                var args$1 = Core__List.map(match$6[1], (function (arg) {
                        return as_id("a parameter", arg);
                      }));
                var terms$2 = Belt_List.map(match$5[1], parseTerm);
                var result$2 = as_expr("an expression to be returned", parseTerm(match$5[2]));
                var it_2$1 = makeBlock(terms$2, result$2);
                var it$2 = {
                  TAG: "GFun",
                  _0: fun$1,
                  _1: args$1,
                  _2: it_2$1
                };
                tmp = {
                  TAG: "Def",
                  _0: {
                    it: it$2,
                    ann: e.ann
                  }
                };
                break;
            case "defvar" :
                var match$7 = as_two("a variable and an expression", es.tl);
                var x = as_id("a variable name", match$7[0]);
                var e$1 = as_expr("an expression", parseTerm(match$7[1]));
                tmp = {
                  TAG: "Def",
                  _0: {
                    it: {
                      TAG: "Var",
                      _0: x,
                      _1: e$1
                    },
                    ann: e.ann
                  }
                };
                break;
            case "=" :
            case "eq?" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Eq"
                    }, es.tl);
                break;
            case "equal?" :
                tmp = makeAppPrm(ann, {
                      TAG: "Cmp",
                      _0: "Equal"
                    }, es.tl);
                break;
            case "error" :
                tmp = makeAppPrm(ann, "Err", es.tl);
                break;
            case "generator" :
                var match$8 = as_one_then_many_then_one("the generator signature followed by the function body", es.tl);
                var args$2 = Core__List.map(as_list("generator parameters", match$8[0]).it, (function (arg) {
                        return as_id("a parameter", arg);
                      }));
                var terms$3 = Core__List.map(match$8[1], parseTerm);
                var result$3 = as_expr("an expression to be returned", parseTerm(match$8[2]));
                var it_1 = makeBlock(terms$3, result$3);
                var it$3 = {
                  TAG: "GLam",
                  _0: args$2,
                  _1: it_1
                };
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: it$3,
                    ann: e.ann
                  }
                };
                break;
            case "if" :
                var match$9 = as_three("three expressions (i.e., a condition, the \"then\" branch, and the \"else\" branch)", es.tl);
                var e_cnd = as_expr("a (conditional) expression", parseTerm(match$9[0]));
                var e_thn = as_expr("an expression", parseTerm(match$9[1]));
                var e_els = as_expr("an expression", parseTerm(match$9[2]));
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: {
                      TAG: "If",
                      _0: e_cnd,
                      _1: e_thn,
                      _2: e_els
                    },
                    ann: e.ann
                  }
                };
                break;
            case "lambda" :
                var match$10 = as_one_then_many_then_one("the function signature followed by the function body", es.tl);
                var args$3 = Core__List.map(as_list("function parameters", match$10[0]).it, (function (arg) {
                        return as_id("a parameter", arg);
                      }));
                var terms$4 = Core__List.map(match$10[1], parseTerm);
                var result$4 = as_expr("an expression to be returned", parseTerm(match$10[2]));
                var it_1$1 = makeBlock(terms$4, result$4);
                var it$4 = {
                  TAG: "Lam",
                  _0: args$3,
                  _1: it_1$1
                };
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: it$4,
                    ann: e.ann
                  }
                };
                break;
            case "left" :
                tmp = makeAppPrm(ann, "PairRefLeft", es.tl);
                break;
            case "let" :
                var match$11 = as_one_then_many_then_one("the bindings followed by the body", es.tl);
                var xes = Core__List.map(Core__List.map(as_list("variable-expression pairs", match$11[0]).it, (function (xe) {
                            return as_list("a variable and an expression", xe);
                          })), mapAnn(function (xe) {
                          return as_two("a variable and an expression", xe);
                        }));
                var xes$1 = Core__List.map(xes, mapAnn(function (param) {
                          var x = as_id("a variable to be bound", param[0]);
                          var e = as_expr("an expression", parseTerm(param[1]));
                          return [
                                  x,
                                  e
                                ];
                        }));
                var ts = Core__List.map(match$11[1], parseTerm);
                var result$5 = as_expr("an expression to be return", parseTerm(match$11[2]));
                var it_1$2 = makeBlock(ts, result$5);
                var it$5 = {
                  TAG: "Let",
                  _0: xes$1,
                  _1: it_1$2
                };
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: it$5,
                    ann: e.ann
                  }
                };
                break;
            case "let*" :
                var match$12 = as_one_then_many_then_one("the bindings followed by the body", es.tl);
                var xes$2 = Core__List.map(Core__List.map(as_list("variable-expression pairs", match$12[0]).it, (function (xe) {
                            return as_list("a variable and an expression", xe);
                          })), mapAnn(function (xe) {
                          return as_two("a variable and an expression", xe);
                        }));
                var xes$3 = Core__List.map(xes$2, mapAnn(function (param) {
                          var x = as_id("a variable to be bound", param[0]);
                          var e = as_expr("an expression", parseTerm(param[1]));
                          return [
                                  x,
                                  e
                                ];
                        }));
                var ts$1 = Core__List.map(match$12[1], parseTerm);
                var result$6 = as_expr("an expression to be return", parseTerm(match$12[2]));
                tmp = {
                  TAG: "Exp",
                  _0: letstar(ann, xes$3, makeBlock(ts$1, result$6))
                };
                break;
            case "letrec" :
                var match$13 = as_one_then_many_then_one("the bindings followed by the body", es.tl);
                var xes$4 = Core__List.map(Core__List.map(as_list("variable-expression pairs", match$13[0]).it, (function (xe) {
                            return as_list("a variable and an expression", xe);
                          })), mapAnn(function (xe) {
                          return as_two("a variable and an expression", xe);
                        }));
                var xes$5 = Core__List.map(xes$4, mapAnn(function (param) {
                          var x = as_id("a variable to be bound", param[0]);
                          var e = as_expr("an expression", parseTerm(param[1]));
                          return [
                                  x,
                                  e
                                ];
                        }));
                var ts$2 = Core__List.map(match$13[1], parseTerm);
                var result$7 = as_expr("an expression to be return", parseTerm(match$13[2]));
                var it_1$3 = makeBlock(ts$2, result$7);
                var it$6 = {
                  TAG: "Letrec",
                  _0: xes$5,
                  _1: it_1$3
                };
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: it$6,
                    ann: e.ann
                  }
                };
                break;
            case "next" :
                tmp = makeAppPrm(ann, "Next", es.tl);
                break;
            case "not" :
                tmp = makeAppPrm(ann, "Not", es.tl);
                break;
            case "mpair" :
            case "pair" :
                tmp = makeAppPrm(ann, "PairNew", es.tl);
                break;
            case "print" :
                tmp = makeAppPrm(ann, "Print", es.tl);
                break;
            case "quote" :
                var e$2 = as_one("a quoted value", es.tl);
                tmp = {
                  TAG: "Exp",
                  _0: parseValue(e$2)
                };
                break;
            case "right" :
                tmp = makeAppPrm(ann, "PairRefRight", es.tl);
                break;
            case "set!" :
                var match$14 = as_two("a variable and an expression", es.tl);
                var x$1 = as_id("a variable to be set", match$14[0]);
                var e$3 = as_expr("an expression", parseTerm(match$14[1]));
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: {
                      TAG: "Set",
                      _0: x$1,
                      _1: e$3
                    },
                    ann: e.ann
                  }
                };
                break;
            case "set-left!" :
                tmp = makeAppPrm(ann, "PairSetLeft", es.tl);
                break;
            case "set-right!" :
                tmp = makeAppPrm(ann, "PairSetRight", es.tl);
                break;
            case "mvec" :
            case "vec" :
                tmp = makeAppPrm(ann, "VecNew", es.tl);
                break;
            case "vec-len" :
            case "vlen" :
                tmp = makeAppPrm(ann, "VecLen", es.tl);
                break;
            case "vec-ref" :
            case "vref" :
                tmp = makeAppPrm(ann, "VecRef", es.tl);
                break;
            case "vec-set!" :
            case "vset!" :
                tmp = makeAppPrm(ann, "VecSet", es.tl);
                break;
            case "yield" :
                var e$4 = as_one("an expression", es.tl);
                var e$5 = as_expr("an expression", parseTerm(e$4));
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: {
                      TAG: "Yield",
                      _0: e$5
                    },
                    ann: e.ann
                  }
                };
                break;
            case "λ" :
                var match$15 = as_one_then_many_then_one("the function signature followed by the function body", es.tl);
                var args$4 = Core__List.map(as_list("function parameters", match$15[0]).it, (function (arg) {
                        return as_id("a parameter", arg);
                      }));
                var terms$5 = Core__List.map(match$15[1], parseTerm);
                var result$8 = as_expr("an expression to be returned", parseTerm(match$15[2]));
                var it_1$4 = makeBlock(terms$5, result$8);
                var it$7 = {
                  TAG: "Lam",
                  _0: args$4,
                  _1: it_1$4
                };
                tmp = {
                  TAG: "Exp",
                  _0: {
                    it: it$7,
                    ann: e.ann
                  }
                };
                break;
            default:
              exit = 1;
          }
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var match$16 = as_one_then_many("a function call/application, which includes a function and then zero or more arguments", es);
      var e$6 = as_expr("a function", parseTerm(match$16[0]));
      var es$1 = Core__List.map(Core__List.map(match$16[1], parseTerm), (function (e) {
              return as_expr("an argument", e);
            }));
      tmp = {
        TAG: "Exp",
        _0: {
          it: {
            TAG: "App",
            _0: e$6,
            _1: es$1
          },
          ann: e.ann
        }
      };
    }
    
  } else {
    var content = Core__List.map(atom.content, parseValue);
    tmp = {
      TAG: "Exp",
      _0: {
        it: {
          TAG: "AppPrm",
          _0: "VecNew",
          _1: content
        },
        ann: e.ann
      }
    };
  }
  return ann(tmp);
}

function makeAppPrm(ann, p, es) {
  var es$1 = Core__List.map(Core__List.map(es, parseTerm), (function (e) {
          return as_expr("an argument", e);
        }));
  return {
          TAG: "Exp",
          _0: ann({
                TAG: "AppPrm",
                _0: p,
                _1: es$1
              })
        };
}

function parseTerms(src) {
  try {
    return Core__List.map(SExpression.SExpr.fromString(src), parseTerm);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SExpression.SExpressionError) {
      var err$1 = {
        TAG: "SExprParseError",
        _0: SExpression.$$Error.toString(err._1)
      };
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: err$1,
            Error: new Error()
          };
    }
    throw err;
  }
}

function parseProgram(src) {
  var ts = parseTerms(src);
  return makeProgram(ts);
}

function parseOutput(src) {
  try {
    return Core__List.map(SExpression.SExpr.fromString(src), outputletOfSExpr);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SExpression.SExpressionError) {
      var err$1 = {
        TAG: "SExprParseError",
        _0: SExpression.$$Error.toString(err._1)
      };
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: err$1,
            Error: new Error()
          };
    }
    throw err;
  }
}

var SMoLPrintError = /* @__PURE__ */Caml_exceptions.create("SMoL.SMoLPrintError");

function getPrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Expression",
            sourceLocation: match.sourceLocation
          }
        };
}

function getNamePrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Name",
            sourceLocation: match.sourceLocation
          }
        };
}

function getBindPrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Bind",
            sourceLocation: match.sourceLocation
          }
        };
}

function getBlockPrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Block",
            sourceLocation: match.sourceLocation
          }
        };
}

function getDefinitionPrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Definition",
            sourceLocation: match.sourceLocation
          }
        };
}

function getTermPrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Term",
            sourceLocation: match.sourceLocation
          }
        };
}

function getProgramPrint(param) {
  var match = param.ann;
  return {
          it: match.print,
          ann: {
            nodeKind: "Program",
            sourceLocation: match.sourceLocation
          }
        };
}

function indent(t, i) {
  var pad = Js_string.repeat(i, " ");
  return mapAnn(map(function (s) {
                    return Js_string.replaceByRe(/\n/g, "\n" + pad, s);
                  }))(t);
}

function indentBlock(s, i) {
  return indent({
              it: {
                TAG: "Group",
                _0: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: "\n"
                    },
                    ann: undefined
                  },
                  tl: {
                    hd: s,
                    tl: /* [] */0
                  }
                }
              },
              ann: undefined
            }, i);
}

function hcat(s1, s2) {
  return {
          TAG: "Group",
          _0: {
            hd: s1,
            tl: {
              hd: indent(s2, toString(s1.it).length),
              tl: /* [] */0
            }
          }
        };
}

function printName(x) {
  return x;
}

function constantToString(c) {
  if (typeof c !== "object") {
    if (c === "Uni") {
      return "#<void>";
    } else {
      return "#<empty>";
    }
  }
  switch (c.TAG) {
    case "Num" :
        return c._0.toString();
    case "Lgc" :
        if (c._0) {
          return "#t";
        } else {
          return "#f";
        }
    case "Str" :
        return JSON.stringify(c._0);
    case "Sym" :
        return c._0;
    
  }
}

function listToString(ss) {
  return pad("(", {
              it: concat(" ", ss),
              ann: undefined
            }, ")");
}

function defvarLike(op, x, e) {
  if (containsNL(e.it) || op === "deffun" || op === "defgen") {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: op
                  },
                  ann: undefined
                },
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: " "
                    },
                    ann: undefined
                  },
                  tl: {
                    hd: x,
                    tl: {
                      hd: indentBlock(e, 2),
                      tl: {
                        hd: {
                          it: {
                            TAG: "Plain",
                            _0: ")"
                          },
                          ann: undefined
                        },
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          };
  } else {
    return listToString({
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: op
                  },
                  ann: undefined
                },
                tl: {
                  hd: x,
                  tl: {
                    hd: e,
                    tl: /* [] */0
                  }
                }
              });
  }
}

function defvarToString(x, e) {
  return defvarLike("defvar", x, e);
}

function deffunToString(f, xs, b) {
  return defvarLike("deffun", {
              it: listToString({
                    hd: f,
                    tl: xs
                  }),
              ann: undefined
            }, b);
}

function defgenToString(f, xs, b) {
  return defvarLike("defgen", {
              it: listToString({
                    hd: f,
                    tl: xs
                  }),
              ann: undefined
            }, b);
}

function exprSetToString(x, e) {
  return defvarLike("set!", x, e);
}

function exprLamToString(xs, b) {
  return defvarLike("lambda", {
              it: listToString(xs),
              ann: undefined
            }, b);
}

function exprGenToString(xs, b) {
  return defvarLike("generator", {
              it: listToString(xs),
              ann: undefined
            }, b);
}

function exprYieldToString(e) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: "(yield "
              },
              ann: undefined
            },
            tl: {
              hd: e,
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: ")"
                  },
                  ann: undefined
                },
                tl: /* [] */0
              }
            }
          }
        };
}

function exprAppToString(e, es) {
  return listToString({
              hd: e,
              tl: es
            });
}

function beginLike(op, ts) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: "("
              },
              ann: undefined
            },
            tl: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: op
                },
                ann: undefined
              },
              tl: {
                hd: indentBlock({
                      it: concat("\n", ts),
                      ann: undefined
                    }, 2),
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        };
}

function exprBgnToString(es, e) {
  return beginLike("begin", Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ]));
}

function exprCndToString(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              {
                it: {
                  TAG: "Plain",
                  _0: "else"
                },
                ann: undefined
              },
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Core__List.map(ebs$1, (function (param) {
          var ss_0 = {
            it: {
              TAG: "Plain",
              _0: "["
            },
            ann: undefined
          };
          var ss_1 = {
            hd: param[0],
            tl: {
              hd: indentBlock(param[1], 1),
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: "]"
                  },
                  ann: undefined
                },
                tl: /* [] */0
              }
            }
          };
          var ss = {
            hd: ss_0,
            tl: ss_1
          };
          return {
                  it: {
                    TAG: "Group",
                    _0: ss
                  },
                  ann: undefined
                };
        }));
  return beginLike("cond", ebs$2);
}

function exprIfToString(e_cnd, e_thn, e_els) {
  return hcat({
              it: {
                TAG: "Plain",
                _0: "(if "
              },
              ann: undefined
            }, {
              it: group2({
                    it: concat("\n", {
                          hd: e_cnd,
                          tl: {
                            hd: e_thn,
                            tl: {
                              hd: e_els,
                              tl: /* [] */0
                            }
                          }
                        }),
                    ann: undefined
                  }, {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  }),
              ann: undefined
            });
}

function letLike(op, xes, b) {
  var xes_it = concat("\n", xes);
  var xes$1 = {
    it: xes_it,
    ann: undefined
  };
  var ss_0 = {
    it: {
      TAG: "Plain",
      _0: "("
    },
    ann: undefined
  };
  var ss_1 = {
    hd: indent(xes$1, 1),
    tl: {
      hd: {
        it: {
          TAG: "Plain",
          _0: ")"
        },
        ann: undefined
      },
      tl: /* [] */0
    }
  };
  var ss = {
    hd: ss_0,
    tl: ss_1
  };
  var xes_it$1 = {
    TAG: "Group",
    _0: ss
  };
  var xes$2 = {
    it: xes_it$1,
    ann: undefined
  };
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: hcat({
                    it: {
                      TAG: "Group",
                      _0: {
                        hd: {
                          it: {
                            TAG: "Plain",
                            _0: "("
                          },
                          ann: undefined
                        },
                        tl: {
                          hd: {
                            it: {
                              TAG: "Plain",
                              _0: op
                            },
                            ann: undefined
                          },
                          tl: {
                            hd: {
                              it: {
                                TAG: "Plain",
                                _0: " "
                              },
                              ann: undefined
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    ann: undefined
                  }, xes$2),
              ann: undefined
            },
            tl: {
              hd: indentBlock(b, 2),
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: ")"
                  },
                  ann: undefined
                },
                tl: /* [] */0
              }
            }
          }
        };
}

function exprLetToString(xes, b) {
  return letLike("let", xes, b);
}

function exprLetrecToString(xes, b) {
  return letLike("letrec", xes, b);
}

function symbolToString(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            sourceLocation: param.ann,
            print: {
              TAG: "Plain",
              _0: it
            }
          }
        };
}

function printExp(param) {
  var it = param.it;
  var e;
  switch (it.TAG) {
    case "Con" :
        var c = it._0;
        e = {
          it: {
            TAG: "Con",
            _0: c
          },
          ann: {
            TAG: "Plain",
            _0: constantToString(c)
          }
        };
        break;
    case "Ref" :
        var x = it._0;
        e = {
          it: {
            TAG: "Ref",
            _0: x
          },
          ann: {
            TAG: "Plain",
            _0: x
          }
        };
        break;
    case "Set" :
        var x$1 = symbolToString(it._0);
        var e$1 = printExp(it._1);
        e = {
          it: {
            TAG: "Set",
            _0: x$1,
            _1: e$1
          },
          ann: exprSetToString(getNamePrint(x$1), getPrint(e$1))
        };
        break;
    case "Lam" :
        var xs = Core__List.map(it._0, symbolToString);
        var b = printBlock(it._1);
        e = {
          it: {
            TAG: "Lam",
            _0: xs,
            _1: b
          },
          ann: exprLamToString(Core__List.map(xs, (function (x) {
                      return getNamePrint(x);
                    })), getBlockPrint(b))
        };
        break;
    case "Let" :
        var xes = Core__List.map(it._0, xeToString);
        var b$1 = printBlock(it._1);
        e = {
          it: {
            TAG: "Let",
            _0: xes,
            _1: b$1
          },
          ann: exprLetToString(Core__List.map(xes, (function (xe) {
                      return getBindPrint(xe);
                    })), getBlockPrint(b$1))
        };
        break;
    case "Letrec" :
        var xes$1 = Core__List.map(it._0, xeToString);
        var b$2 = printBlock(it._1);
        e = {
          it: {
            TAG: "Letrec",
            _0: xes$1,
            _1: b$2
          },
          ann: exprLetrecToString(Core__List.map(xes$1, (function (xe) {
                      return getBindPrint(xe);
                    })), getBlockPrint(b$2))
        };
        break;
    case "AppPrm" :
        var p = it._0;
        var es = Core__List.map(it._1, printExp);
        var it$1 = toString$1(p);
        e = {
          it: {
            TAG: "AppPrm",
            _0: p,
            _1: es
          },
          ann: exprAppToString({
                it: {
                  TAG: "Plain",
                  _0: it$1
                },
                ann: undefined
              }, Core__List.map(es, (function (e) {
                      return getPrint(e);
                    })))
        };
        break;
    case "App" :
        var e$2 = printExp(it._0);
        var es$1 = Core__List.map(it._1, printExp);
        e = {
          it: {
            TAG: "App",
            _0: e$2,
            _1: es$1
          },
          ann: exprAppToString(getPrint(e$2), Core__List.map(es$1, (function (e) {
                      return getPrint(e);
                    })))
        };
        break;
    case "Bgn" :
        var es$2 = Core__List.map(it._0, printExp);
        var e$3 = printExp(it._1);
        e = {
          it: {
            TAG: "Bgn",
            _0: es$2,
            _1: e$3
          },
          ann: exprBgnToString(Core__List.map(es$2, (function (e) {
                      return getPrint(e);
                    })), getPrint(e$3))
        };
        break;
    case "If" :
        var e_cnd = printExp(it._0);
        var e_thn = printExp(it._1);
        var e_els = printExp(it._2);
        e = {
          it: {
            TAG: "If",
            _0: e_cnd,
            _1: e_thn,
            _2: e_els
          },
          ann: exprIfToString(getPrint(e_cnd), getPrint(e_thn), getPrint(e_els))
        };
        break;
    case "Cnd" :
        var ebs = Core__List.map(it._0, ebToString);
        var ob = Core__Option.map(it._1, printBlock);
        e = {
          it: {
            TAG: "Cnd",
            _0: ebs,
            _1: ob
          },
          ann: exprCndToString(Core__List.map(ebs, (function (param) {
                      return [
                              getPrint(param[0]),
                              getBlockPrint(param[1])
                            ];
                    })), Core__Option.map(ob, (function (b) {
                      return getBlockPrint(b);
                    })))
        };
        break;
    case "GLam" :
        var xs$1 = Core__List.map(it._0, symbolToString);
        var b$3 = printBlock(it._1);
        e = {
          it: {
            TAG: "Lam",
            _0: xs$1,
            _1: b$3
          },
          ann: exprGenToString(Core__List.map(xs$1, (function (x) {
                      return getNamePrint(x);
                    })), getBlockPrint(b$3))
        };
        break;
    case "Yield" :
        var e$4 = printExp(it._0);
        e = {
          it: {
            TAG: "Yield",
            _0: e$4
          },
          ann: exprYieldToString(getPrint(e$4))
        };
        break;
    
  }
  return {
          it: e.it,
          ann: {
            sourceLocation: param.ann,
            print: e.ann
          }
        };
}

function printDef(param) {
  var d = param.it;
  var d$1;
  switch (d.TAG) {
    case "Var" :
        var x = symbolToString(d._0);
        var e = printExp(d._1);
        d$1 = {
          it: {
            TAG: "Var",
            _0: x,
            _1: e
          },
          ann: defvarToString(getNamePrint(x), getPrint(e))
        };
        break;
    case "Fun" :
        var f = symbolToString(d._0);
        var xs = Core__List.map(d._1, symbolToString);
        var b = printBlock(d._2);
        d$1 = {
          it: {
            TAG: "Fun",
            _0: f,
            _1: xs,
            _2: b
          },
          ann: deffunToString(getNamePrint(f), Core__List.map(xs, (function (x) {
                      return getNamePrint(x);
                    })), getBlockPrint(b))
        };
        break;
    case "GFun" :
        var f$1 = symbolToString(d._0);
        var xs$1 = Core__List.map(d._1, symbolToString);
        var b$1 = printBlock(d._2);
        d$1 = {
          it: {
            TAG: "GFun",
            _0: f$1,
            _1: xs$1,
            _2: b$1
          },
          ann: defgenToString(getNamePrint(f$1), Core__List.map(xs$1, (function (x) {
                      return getNamePrint(x);
                    })), getBlockPrint(b$1))
        };
        break;
    
  }
  return {
          it: d$1.it,
          ann: {
            sourceLocation: param.ann,
            print: d$1.ann
          }
        };
}

function xeToString(param) {
  var xe = param.it;
  var x = symbolToString(xe[0]);
  var e = printExp(xe[1]);
  var print = hcat({
        it: group2({
              it: {
                TAG: "Plain",
                _0: "["
              },
              ann: undefined
            }, getNamePrint(x)),
        ann: undefined
      }, {
        it: group2(getPrint(e), {
              it: {
                TAG: "Plain",
                _0: "]"
              },
              ann: undefined
            }),
        ann: undefined
      });
  return {
          it: [
            x,
            e
          ],
          ann: {
            sourceLocation: param.ann,
            print: print
          }
        };
}

function ebToString(eb) {
  return [
          printExp(eb[0]),
          printBlock(eb[1])
        ];
}

function printBlock(param) {
  var b = param.it;
  if (b.TAG === "BRet") {
    var e = printExp(b._0);
    return {
            it: {
              TAG: "BRet",
              _0: e
            },
            ann: e.ann
          };
  }
  var t = printTerm(b._0);
  var b$1 = printBlock(b._1);
  var print = {
    TAG: "Group",
    _0: {
      hd: getTermPrint(t),
      tl: {
        hd: {
          it: {
            TAG: "Plain",
            _0: "\n"
          },
          ann: undefined
        },
        tl: {
          hd: getBlockPrint(b$1),
          tl: /* [] */0
        }
      }
    }
  };
  return {
          it: {
            TAG: "BCons",
            _0: t,
            _1: b$1
          },
          ann: {
            sourceLocation: param.ann,
            print: print
          }
        };
}

function printTerm(param) {
  var sourceLocation = param.ann;
  var t = param.it;
  if (t.TAG === "Def") {
    var it = printDef(t._0);
    return {
            it: {
              TAG: "Def",
              _0: it
            },
            ann: {
              sourceLocation: sourceLocation,
              print: {
                TAG: "Group",
                _0: {
                  hd: getDefinitionPrint(it),
                  tl: /* [] */0
                }
              }
            }
          };
  }
  var it$1 = printExp(t._0);
  return {
          it: {
            TAG: "Exp",
            _0: it$1
          },
          ann: {
            sourceLocation: sourceLocation,
            print: {
              TAG: "Group",
              _0: {
                hd: getPrint(it$1),
                tl: /* [] */0
              }
            }
          }
        };
}

function printOutputlet(o) {
  var p = function (v) {
    switch (v.TAG) {
      case "Ref" :
          return "#" + v._0.toString() + "#";
      case "Con" :
          return constantToString(v._0);
      case "Struct" :
          var content = v._1;
          var i = v._0;
          var i$1 = i !== undefined ? "#" + i.toString() + "=" : "";
          var content$1;
          content$1 = content.TAG === "Lst" ? "(" + Core__List.toArray(Core__List.map(content._0, p)).join(" ") + ")" : "#(" + Core__List.toArray(Core__List.map(content._0, p)).join(" ") + ")";
          return i$1 + content$1;
      
    }
  };
  if (typeof o !== "object") {
    return "error";
  } else {
    return p(o._0);
  }
}

function printOutput(sepOpt, os) {
  var sep = sepOpt !== undefined ? sepOpt : " ";
  return Core__List.toArray(Core__List.map(os, printOutputlet)).join(sep);
}

function printProgramFull(_insertPrintTopLevel, p) {
  var print = function (param) {
    var sourceLocation = param.ann;
    var it = param.it;
    if (typeof it !== "object") {
      return {
              it: "PNil",
              ann: {
                sourceLocation: sourceLocation,
                print: {
                  TAG: "Group",
                  _0: /* [] */0
                }
              }
            };
    }
    var p = it._1;
    var t = printTerm(it._0);
    var tmp = p.it;
    if (typeof tmp !== "object") {
      return {
              it: {
                TAG: "PCons",
                _0: t,
                _1: {
                  it: "PNil",
                  ann: {
                    sourceLocation: {
                      begin: sourceLocation.end,
                      end: sourceLocation.end
                    },
                    print: {
                      TAG: "Plain",
                      _0: ""
                    }
                  }
                }
              },
              ann: {
                sourceLocation: sourceLocation,
                print: getTermPrint(t).it
              }
            };
    }
    var p$1 = print(p);
    return {
            it: {
              TAG: "PCons",
              _0: t,
              _1: p$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: concat2(getTermPrint(t), "\n", getProgramPrint(p$1))
            }
          };
  };
  return print(p);
}

function printProgram(insertPrintTopLevel, p) {
  return toString(printProgramFull(insertPrintTopLevel, p).ann.print);
}

function printStandAloneTerm(t) {
  return toString(printTerm(t).ann.print);
}

function moveBeginChByOne(sourceLocation) {
  var init = sourceLocation.begin;
  return {
          begin: {
            ln: init.ln,
            ch: sourceLocation.begin.ch + 1 | 0
          },
          end: sourceLocation.end
        };
}

function insertTopLevelPrint(p) {
  var match = p.it;
  var tmp;
  if (typeof match !== "object") {
    tmp = "PNil";
  } else {
    var t = match._0;
    var e = t.it;
    var tmp$1;
    if (e.TAG === "Def") {
      tmp$1 = e;
    } else {
      var ie = function (e) {
        var ib = function (b) {
          var e = b.it;
          var tmp;
          tmp = e.TAG === "BRet" ? ({
                TAG: "BRet",
                _0: ie(e._0)
              }) : ({
                TAG: "BCons",
                _0: e._0,
                _1: ib(e._1)
              });
          return {
                  it: tmp,
                  ann: b.ann
                };
        };
        var ieb = function (param) {
          return [
                  param[0],
                  ib(param[1])
                ];
        };
        var e$1 = e.it;
        var tmp;
        var exit = 0;
        switch (e$1.TAG) {
          case "Set" :
              tmp = {
                TAG: "Set",
                _0: e$1._0,
                _1: e$1._1
              };
              break;
          case "Let" :
          case "Letrec" :
              exit = 1;
              break;
          case "AppPrm" :
              var tmp$1 = e$1._0;
              if (typeof tmp$1 !== "object") {
                switch (tmp$1) {
                  case "PairSetLeft" :
                      tmp = {
                        TAG: "AppPrm",
                        _0: "PairSetLeft",
                        _1: e$1._1
                      };
                      break;
                  case "PairSetRight" :
                      tmp = {
                        TAG: "AppPrm",
                        _0: "PairSetRight",
                        _1: e$1._1
                      };
                      break;
                  case "VecSet" :
                      tmp = {
                        TAG: "AppPrm",
                        _0: "VecSet",
                        _1: e$1._1
                      };
                      break;
                  case "Err" :
                      tmp = {
                        TAG: "AppPrm",
                        _0: "Err",
                        _1: e$1._1
                      };
                      break;
                  case "Print" :
                      tmp = {
                        TAG: "AppPrm",
                        _0: "Print",
                        _1: e$1._1
                      };
                      break;
                  default:
                    exit = 2;
                }
              } else {
                exit = 2;
              }
              break;
          case "Bgn" :
              tmp = {
                TAG: "Bgn",
                _0: e$1._0,
                _1: ie(e$1._1)
              };
              break;
          case "If" :
              tmp = {
                TAG: "If",
                _0: e$1._0,
                _1: ie(e$1._1),
                _2: ie(e$1._2)
              };
              break;
          case "Cnd" :
              tmp = {
                TAG: "Cnd",
                _0: Core__List.map(e$1._0, ieb),
                _1: Core__Option.map(e$1._1, ib)
              };
              break;
          case "Yield" :
              tmp = {
                TAG: "Yield",
                _0: e$1._0
              };
              break;
          default:
            exit = 2;
        }
        switch (exit) {
          case 1 :
              tmp = {
                TAG: "Let",
                _0: e$1._0,
                _1: ib(e$1._1)
              };
              break;
          case 2 :
              tmp = {
                TAG: "AppPrm",
                _0: "Print",
                _1: {
                  hd: {
                    it: e$1,
                    ann: moveBeginChByOne(t.ann)
                  },
                  tl: /* [] */0
                }
              };
              break;
          
        }
        return {
                it: tmp,
                ann: e.ann
              };
      };
      tmp$1 = {
        TAG: "Exp",
        _0: ie(e._0)
      };
    }
    var t_ann = t.ann;
    var t$1 = {
      it: tmp$1,
      ann: t_ann
    };
    tmp = {
      TAG: "PCons",
      _0: t$1,
      _1: insertTopLevelPrint(match._1)
    };
  }
  return {
          it: tmp,
          ann: p.ann
        };
}

function printName$1(x) {
  var re = /-./g;
  var matchFn = function (matchPart, _offset, _wholeString) {
    return matchPart.substring(1).toUpperCase();
  };
  var x$1 = x.replace(re, matchFn);
  if (x$1 === "var") {
    return "$var";
  } else {
    return x$1;
  }
}

function constantToString$1(c) {
  if (typeof c !== "object") {
    if (c === "Uni") {
      return "null";
    }
    throw {
          RE_EXN_ID: SMoLPrintError,
          _1: "Lists are not supported in JavaScript.",
          Error: new Error()
        };
  } else {
    switch (c.TAG) {
      case "Num" :
          return c._0.toString();
      case "Lgc" :
          if (c._0) {
            return "true";
          } else {
            return "false";
          }
      case "Str" :
          return JSON.stringify(c._0);
      case "Sym" :
          return c._0;
      
    }
  }
}

function listToString$1(es) {
  if (Core__List.some(es, (function (e) {
            return containsNL(e.it);
          }))) {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: indentBlock({
                      it: concat(",\n", es),
                      ann: undefined
                    }, 2),
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  } else {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: {
                  it: concat(", ", es),
                  ann: undefined
                },
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  }
}

function defvarLike$1(op, x, e) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: op
              },
              ann: undefined
            },
            tl: {
              hd: x,
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: " = "
                  },
                  ann: undefined
                },
                tl: {
                  hd: indent(e, 2),
                  tl: /* [] */0
                }
              }
            }
          }
        };
}

function exprAppToString$1(e, es) {
  return group2(e, {
              it: listToString$1(es),
              ann: undefined
            });
}

function consumeContext(e) {
  return {
          expr: (function (param) {
              return surround("", e, "");
            }),
          stat: (function (ctx) {
              if (ctx === "Step") {
                return [
                        "",
                        e,
                        ";"
                      ];
              } else {
                return [
                        "return ",
                        e,
                        ";"
                      ];
              }
            })
        };
}

function consumeContextWrap(e) {
  return {
          expr: (function (ctx) {
              if (ctx) {
                return surround("(", e, ")");
              } else {
                return consumeContext(e).expr(ctx);
              }
            }),
          stat: consumeContext(e).stat
        };
}

function consumeContextVoid(e) {
  return {
          expr: consumeContext(e).expr,
          stat: (function (ctx) {
              if (ctx === "Step") {
                return consumeContext(e).stat(ctx);
              } else {
                return [
                        "",
                        e,
                        ";\nreturn;"
                      ];
              }
            })
        };
}

function consumeContextStat(e) {
  return {
          expr: (function (param) {
              var err = toString(e) + " can't be used as a expression in JavaScript";
              throw {
                    RE_EXN_ID: SMoLPrintError,
                    _1: err,
                    Error: new Error()
                  };
            }),
          stat: consumeContextVoid(e).stat
        };
}

function exprAppPrmToString(p, es) {
  if (typeof p !== "object") {
    switch (p) {
      case "PairNew" :
          if (es) {
            var match = es.tl;
            if (match && !match.tl) {
              var e1 = es.hd(false);
              var e2 = match.hd(false);
              return {
                      it: [
                        "PairNew",
                        {
                          hd: e1,
                          tl: {
                            hd: e2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext(s([
                                "[ ",
                                ", ",
                                " ]"
                              ], [
                                getPrint(e1),
                                getPrint(e2)
                              ]))
                    };
            }
            
          }
          break;
      case "PairRefLeft" :
          if (es && !es.tl) {
            var e1$1 = es.hd(true);
            return {
                    it: [
                      "PairRefLeft",
                      {
                        hd: e1$1,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext(s([
                              "",
                              "[0]"
                            ], [getPrint(e1$1)]))
                  };
          }
          break;
      case "PairRefRight" :
          if (es && !es.tl) {
            var e1$2 = es.hd(true);
            return {
                    it: [
                      "PairRefRight",
                      {
                        hd: e1$2,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext(s([
                              "",
                              "[1]"
                            ], [getPrint(e1$2)]))
                  };
          }
          break;
      case "PairSetLeft" :
          if (es) {
            var match$1 = es.tl;
            if (match$1 && !match$1.tl) {
              var e1$3 = es.hd(false);
              var e2$1 = match$1.hd(false);
              return {
                      it: [
                        "PairSetLeft",
                        {
                          hd: e1$3,
                          tl: {
                            hd: e2$1,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat(s([
                                "",
                                "[0] = ",
                                ""
                              ], [
                                getPrint(e1$3),
                                getPrint(e2$1)
                              ]))
                    };
            }
            
          }
          break;
      case "PairSetRight" :
          if (es) {
            var match$2 = es.tl;
            if (match$2 && !match$2.tl) {
              var e1$4 = es.hd(false);
              var e2$2 = match$2.hd(false);
              return {
                      it: [
                        "PairSetRight",
                        {
                          hd: e1$4,
                          tl: {
                            hd: e2$2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat(s([
                                "",
                                "[1] = ",
                                ""
                              ], [
                                getPrint(e1$4),
                                getPrint(e2$2)
                              ]))
                    };
            }
            
          }
          break;
      case "VecNew" :
          var es$1 = Core__List.map(es, (function (e) {
                  return e(false);
                }));
          return {
                  it: [
                    "VecNew",
                    es$1
                  ],
                  ann: consumeContext(s([
                            "[ ",
                            " ]"
                          ], [{
                              it: concat(", ", Core__List.map(es$1, (function (e) {
                                          return getPrint(e);
                                        }))),
                              ann: undefined
                            }]))
                };
      case "VecRef" :
          if (es) {
            var match$3 = es.tl;
            if (match$3 && !match$3.tl) {
              var e1$5 = es.hd(true);
              var e2$3 = match$3.hd(false);
              return {
                      it: [
                        "VecRef",
                        {
                          hd: e1$5,
                          tl: {
                            hd: e2$3,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext(s([
                                "",
                                "[",
                                "]"
                              ], [
                                getPrint(e1$5),
                                getPrint(e2$3)
                              ]))
                    };
            }
            
          }
          break;
      case "VecSet" :
          if (es) {
            var match$4 = es.tl;
            if (match$4) {
              var match$5 = match$4.tl;
              if (match$5 && !match$5.tl) {
                var e1$6 = es.hd(true);
                var e2$4 = match$4.hd(false);
                var e3 = match$5.hd(false);
                return {
                        it: [
                          "VecSet",
                          {
                            hd: e1$6,
                            tl: {
                              hd: e2$4,
                              tl: {
                                hd: e3,
                                tl: /* [] */0
                              }
                            }
                          }
                        ],
                        ann: consumeContextStat(s([
                                  "",
                                  "[",
                                  "] = ",
                                  ""
                                ], [
                                  getPrint(e1$6),
                                  getPrint(e2$4),
                                  getPrint(e3)
                                ]))
                      };
              }
              
            }
            
          }
          break;
      case "VecLen" :
          if (es && !es.tl) {
            var e1$7 = es.hd(false);
            return {
                    it: [
                      "VecLen",
                      {
                        hd: e1$7,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext(s([
                              "",
                              ".length"
                            ], [getPrint(e1$7)]))
                  };
          }
          break;
      case "Err" :
          if (es && !es.tl) {
            var e1$8 = es.hd(true);
            return {
                    it: [
                      "Err",
                      {
                        hd: e1$8,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap(s([
                              "throw ",
                              ""
                            ], [getPrint(e1$8)]))
                  };
          }
          break;
      case "Not" :
          if (es && !es.tl) {
            var e1$9 = es.hd(true);
            return {
                    it: [
                      "Not",
                      {
                        hd: e1$9,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap(s([
                              "! ",
                              ""
                            ], [getPrint(e1$9)]))
                  };
          }
          break;
      case "Print" :
          if (es && !es.tl) {
            var e1$10 = es.hd(false);
            return {
                    it: [
                      "Print",
                      {
                        hd: e1$10,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid(s([
                              "console.log(",
                              ")"
                            ], [getPrint(e1$10)]))
                  };
          }
          break;
      case "Next" :
          if (es && !es.tl) {
            var e1$11 = es.hd(false);
            return {
                    it: [
                      "Next",
                      {
                        hd: e1$11,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid(s([
                              "",
                              ".next()"
                            ], [getPrint(e1$11)]))
                  };
          }
          break;
      case "Cons" :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "List is not supported by JavaScript",
                Error: new Error()
              };
      
    }
  } else {
    if (p.TAG === "Arith") {
      var o = p._0;
      var os;
      switch (o) {
        case "Add" :
            os = "+";
            break;
        case "Sub" :
            os = "-";
            break;
        case "Mul" :
            os = "*";
            break;
        case "Div" :
            os = "/";
            break;
        
      }
      var es$2 = Core__List.map(es, (function (e) {
              return e(true);
            }));
      return {
              it: [
                {
                  TAG: "Arith",
                  _0: o
                },
                es$2
              ],
              ann: consumeContextWrap(concat(" " + os + " ", Core__List.map(es$2, (function (e) {
                              return getPrint(e);
                            }))))
            };
    }
    if (es) {
      var match$6 = es.tl;
      if (match$6 && !match$6.tl) {
        var o$1 = p._0;
        var os$1;
        switch (o$1) {
          case "Lt" :
              os$1 = "<";
              break;
          case "Eq" :
              os$1 = "==";
              break;
          case "Gt" :
              os$1 = ">";
              break;
          case "Le" :
              os$1 = "<=";
              break;
          case "Ge" :
              os$1 = ">=";
              break;
          case "Ne" :
              os$1 = "!=";
              break;
          case "Equal" :
              throw {
                    RE_EXN_ID: SMoLPrintError,
                    _1: "JavaScript has limited support for equality",
                    Error: new Error()
                  };
          
        }
        var e1$12 = es.hd(true);
        var e2$5 = match$6.hd(true);
        return {
                it: [
                  {
                    TAG: "Cmp",
                    _0: o$1
                  },
                  {
                    hd: e1$12,
                    tl: {
                      hd: e2$5,
                      tl: /* [] */0
                    }
                  }
                ],
                ann: consumeContext(s([
                          "",
                          " ",
                          " ",
                          ""
                        ], [
                          getPrint(e1$12),
                          {
                            it: {
                              TAG: "Plain",
                              _0: os$1
                            },
                            ann: undefined
                          },
                          getPrint(e2$5)
                        ]))
              };
      }
      
    }
    
  }
  var err = "JavaScript doesn't let you use " + toString$1(p) + " on " + Core__List.length(es).toString() + " parameter(s).";
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: err,
        Error: new Error()
      };
}

function funLike(op, x, xs, e) {
  return s([
              "",
              " ",
              " {",
              "\n}"
            ], [
              {
                it: {
                  TAG: "Plain",
                  _0: op
                },
                ann: undefined
              },
              {
                it: exprAppToString$1(x, xs),
                ann: undefined
              },
              indentBlock(e, 2)
            ]);
}

function defvarToString$1(x, e) {
  return defvarLike$1("let ", x, e);
}

function deffunToString$1(f, xs, b) {
  return funLike("function", f, xs, b);
}

function defgenToString$1(f, xs, b) {
  return funLike("function*", f, xs, b);
}

function exprSetToString$1(x, e) {
  return defvarLike$1("", x, e);
}

function exprLamToString$1(xs, b) {
  return funLike("function", {
              it: {
                TAG: "Plain",
                _0: ""
              },
              ann: undefined
            }, xs, b);
}

function exprGenToString$1(xs, b) {
  return funLike("function*", {
              it: {
                TAG: "Plain",
                _0: ""
              },
              ann: undefined
            }, xs, b);
}

function exprYieldToString$1(e) {
  return s([
              "yield ",
              ""
            ], [e]);
}

function exprBgnToString$1(es, e) {
  return listToString$1(Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ]));
}

function ifStat(cnd, thn, els) {
  return s([
              "if (",
              ") {",
              "\n}",
              ""
            ], [
              cnd,
              indentBlock(thn, 2),
              {
                it: els !== undefined ? s([
                        " else {",
                        "\n}"
                      ], [indentBlock(els, 2)]) : s([""], []),
                ann: undefined
              }
            ]);
}

function exprCndToString$1(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              {
                it: {
                  TAG: "Plain",
                  _0: ""
                },
                ann: undefined
              },
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Core__List.map(ebs$1, (function (param) {
          return {
                  it: s([
                        "if (",
                        ") {",
                        "\n}"
                      ], [
                        param[0],
                        indentBlock(param[1], 2)
                      ]),
                  ann: undefined
                };
        }));
  return concat(" else ", ebs$2);
}

function exprIfToString$1(e_cnd, e_thn, e_els) {
  return s([
              "",
              " ? ",
              " : ",
              ""
            ], [
              e_cnd,
              e_thn,
              e_els
            ]);
}

function symbolToString$1(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            sourceLocation: param.ann,
            print: {
              TAG: "Plain",
              _0: printName$1(it)
            }
          }
        };
}

function printExp$1(param) {
  var it = param.it;
  var lift = function (param) {
    var print = param.ann;
    var it = param.it;
    return function (sourceLocation) {
      return {
              expr: (function (ctx) {
                  return {
                          it: it,
                          ann: {
                            sourceLocation: sourceLocation,
                            print: print.expr(ctx)
                          }
                        };
                }),
              stat: (function (ctx) {
                  var match = print.stat(ctx);
                  return [
                          match[0],
                          {
                            it: it,
                            ann: {
                              sourceLocation: sourceLocation,
                              print: match[1]
                            }
                          },
                          match[2]
                        ];
                })
            };
    };
  };
  var e;
  switch (it.TAG) {
    case "Con" :
        var c = it._0;
        e = lift({
              it: {
                TAG: "Con",
                _0: c
              },
              ann: consumeContext({
                    TAG: "Plain",
                    _0: constantToString$1(c)
                  })
            });
        break;
    case "Ref" :
        var x = it._0;
        e = lift({
              it: {
                TAG: "Ref",
                _0: x
              },
              ann: consumeContext({
                    TAG: "Plain",
                    _0: printName$1(x)
                  })
            });
        break;
    case "Set" :
        var x$1 = symbolToString$1(it._0);
        var e$1 = printExp$1(it._1);
        var e$2 = e$1.expr(false);
        e = lift({
              it: {
                TAG: "Set",
                _0: x$1,
                _1: e$2
              },
              ann: consumeContextStat(exprSetToString$1(getNamePrint(x$1), getPrint(e$2)))
            });
        break;
    case "Lam" :
        var xs = Core__List.map(it._0, symbolToString$1);
        var b = printBlock$1(it._1, "Return");
        e = lift({
              it: {
                TAG: "Lam",
                _0: xs,
                _1: b
              },
              ann: consumeContextWrap(exprLamToString$1(Core__List.map(xs, (function (x) {
                              return getNamePrint(x);
                            })), getBlockPrint(b)))
            });
        break;
    case "Let" :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "let-expressions are not supported by JavaScript",
              Error: new Error()
            };
    case "Letrec" :
        var b$1 = it._1;
        var xes = it._0;
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        throw {
                              RE_EXN_ID: SMoLPrintError,
                              _1: "letrec-expressions are not supported by JavaScript",
                              Error: new Error()
                            };
                      }),
                    stat: (function (ctx) {
                        var xes$1 = Core__List.map(xes, xeToString$1);
                        var b$2 = printBlock$1(b$1, ctx);
                        var match = indentBlock({
                              it: concat("\n", Belt_List.concatMany([
                                        Core__List.map(xes$1, (function (xe) {
                                                return getBindPrint(xe);
                                              })),
                                        {
                                          hd: getBlockPrint(b$2),
                                          tl: /* [] */0
                                        }
                                      ])),
                              ann: undefined
                            }, 2);
                        return [
                                "{\n",
                                {
                                  it: {
                                    TAG: "Letrec",
                                    _0: xes$1,
                                    _1: b$2
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: match.it
                                  }
                                },
                                "\n}"
                              ];
                      })
                  };
          });
        break;
    case "AppPrm" :
        var es = Core__List.map(it._1, (function (e) {
                return function (b) {
                  var e$1 = printExp$1(e);
                  return e$1.expr(b);
                };
              }));
        var match = exprAppPrmToString(it._0, es);
        var match$1 = match.it;
        e = lift({
              it: {
                TAG: "AppPrm",
                _0: match$1[0],
                _1: match$1[1]
              },
              ann: match.ann
            });
        break;
    case "App" :
        var e$3 = printExp$1(it._0);
        var e$4 = e$3.expr(true);
        var es$1 = Core__List.map(it._1, (function (e) {
                var e$1 = printExp$1(e);
                return e$1.expr(false);
              }));
        e = lift({
              it: {
                TAG: "App",
                _0: e$4,
                _1: es$1
              },
              ann: consumeContext(exprAppToString$1(getPrint(e$4), Core__List.map(es$1, (function (e) {
                              return getPrint(e);
                            }))))
            });
        break;
    case "Bgn" :
        var es$2 = Core__List.map(it._0, (function (e) {
                var e$1 = printExp$1(e);
                return e$1.expr(false);
              }));
        var e$5 = printExp$1(it._1);
        var e$6 = e$5.expr(false);
        e = lift({
              it: {
                TAG: "Bgn",
                _0: es$2,
                _1: e$6
              },
              ann: consumeContext(exprBgnToString$1(Core__List.map(es$2, (function (e) {
                              return getPrint(e);
                            })), getPrint(e$6)))
            });
        break;
    case "If" :
        var e_cnd = printExp$1(it._0);
        var e_thn = printExp$1(it._1);
        var e_els = printExp$1(it._2);
        e = (function (sourceLocation) {
            return {
                    expr: (function (ctx) {
                        var e_cnd$1 = e_cnd.expr(true);
                        var e_thn$1 = e_thn.expr(true);
                        var e_els$1 = e_els.expr(true);
                        var e = consumeContextWrap(exprIfToString$1(getPrint(e_cnd$1), getPrint(e_thn$1), getPrint(e_els$1)));
                        return {
                                it: {
                                  TAG: "If",
                                  _0: e_cnd$1,
                                  _1: e_thn$1,
                                  _2: e_els$1
                                },
                                ann: {
                                  sourceLocation: sourceLocation,
                                  print: e.expr(ctx)
                                }
                              };
                      }),
                    stat: (function (ctx) {
                        var e_cnd$1 = e_cnd.expr(false);
                        var match = e_thn.stat(ctx);
                        var e_thn$1 = match[1];
                        var e_thn_print_it = wrap(match[0], getPrint(e_thn$1), match[2]);
                        var e_thn_print = {
                          it: e_thn_print_it,
                          ann: undefined
                        };
                        var match$1 = e_els.stat(ctx);
                        var e_els$1 = match$1[1];
                        var e_els_print_it = wrap(match$1[0], getPrint(e_els$1), match$1[2]);
                        var e_els_print = {
                          it: e_els_print_it,
                          ann: undefined
                        };
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "If",
                                    _0: e_cnd$1,
                                    _1: e_thn$1,
                                    _2: e_els$1
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: ifStat(getPrint(e_cnd$1), e_thn_print, e_els_print)
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "Cnd" :
        var ob = it._1;
        var ebs = it._0;
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        throw {
                              RE_EXN_ID: SMoLPrintError,
                              _1: "Multi-armed conditionals in JavaScript is not supported by the translator yet.",
                              Error: new Error()
                            };
                      }),
                    stat: (function (ctx) {
                        var ebs$1 = Core__List.map(ebs, (function (eb) {
                                var e = printExp$1(eb[0]);
                                return [
                                        e.expr(false),
                                        printBlock$1(eb[1], ctx)
                                      ];
                              }));
                        var ob$1 = obToString(ob, ctx);
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "Cnd",
                                    _0: ebs$1,
                                    _1: ob$1
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: exprCndToString$1(Core__List.map(ebs$1, (function (param) {
                                                return [
                                                        getPrint(param[0]),
                                                        getBlockPrint(param[1])
                                                      ];
                                              })), Core__Option.map(ob$1, (function (b) {
                                                return getBlockPrint(b);
                                              })))
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "GLam" :
        var xs$1 = Core__List.map(it._0, symbolToString$1);
        var b$2 = printBlock$1(it._1, "Return");
        e = lift({
              it: {
                TAG: "GLam",
                _0: xs$1,
                _1: b$2
              },
              ann: consumeContextWrap(exprGenToString$1(Core__List.map(xs$1, (function (x) {
                              return getNamePrint(x);
                            })), getBlockPrint(b$2)))
            });
        break;
    case "Yield" :
        var e$7 = printExp$1(it._0);
        var e$8 = e$7.expr(false);
        e = lift({
              it: {
                TAG: "Yield",
                _0: e$8
              },
              ann: consumeContextWrap(exprYieldToString$1(getPrint(e$8)))
            });
        break;
    
  }
  return e(param.ann);
}

function printDef$1(param) {
  var d = param.it;
  var match;
  switch (d.TAG) {
    case "Var" :
        var x = symbolToString$1(d._0);
        var e = printExp$1(d._1);
        var e$1 = e.expr(false);
        match = [
          "",
          {
            it: {
              TAG: "Var",
              _0: x,
              _1: e$1
            },
            ann: defvarToString$1(getNamePrint(x), getPrint(e$1))
          },
          ";"
        ];
        break;
    case "Fun" :
        var f = symbolToString$1(d._0);
        var xs = Core__List.map(d._1, symbolToString$1);
        var b = printBlock$1(d._2, "Return");
        match = [
          "",
          {
            it: {
              TAG: "Fun",
              _0: f,
              _1: xs,
              _2: b
            },
            ann: deffunToString$1(getNamePrint(f), Core__List.map(xs, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b))
          },
          ""
        ];
        break;
    case "GFun" :
        var f$1 = symbolToString$1(d._0);
        var xs$1 = Core__List.map(d._1, symbolToString$1);
        var b$1 = printBlock$1(d._2, "Return");
        match = [
          "",
          {
            it: {
              TAG: "GFun",
              _0: f$1,
              _1: xs$1,
              _2: b$1
            },
            ann: defgenToString$1(getNamePrint(f$1), Core__List.map(xs$1, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b$1))
          },
          ""
        ];
        break;
    
  }
  var d$1 = match[1];
  return [
          match[0],
          {
            it: d$1.it,
            ann: {
              sourceLocation: param.ann,
              print: d$1.ann
            }
          },
          match[2]
        ];
}

function xeToString$1(param) {
  var xe = param.it;
  var x = symbolToString$1(xe[0]);
  var e = printExp$1(xe[1]);
  var e$1 = e.expr(false);
  var print = defvarToString$1(getNamePrint(x), getPrint(e$1));
  return {
          it: [
            x,
            e$1
          ],
          ann: {
            sourceLocation: param.ann,
            print: print
          }
        };
}

function obToString(ob, ctx) {
  return Core__Option.map(ob, (function (b) {
                return printBlock$1(b, ctx);
              }));
}

function printBlock$1(param, context) {
  var ann = param.ann;
  var b = param.it;
  if (b.TAG === "BRet") {
    var e = printExp$1(b._0);
    var match = e.stat(context);
    var e$1 = match[1];
    var print = {
      TAG: "Group",
      _0: {
        hd: {
          it: {
            TAG: "Plain",
            _0: match[0]
          },
          ann: undefined
        },
        tl: {
          hd: getPrint(e$1),
          tl: {
            hd: {
              it: {
                TAG: "Plain",
                _0: match[2]
              },
              ann: undefined
            },
            tl: /* [] */0
          }
        }
      }
    };
    return {
            it: {
              TAG: "BRet",
              _0: e$1
            },
            ann: {
              sourceLocation: ann,
              print: print
            }
          };
  }
  var t = printTerm$1(b._0, "Step");
  var b$1 = printBlock$1(b._1, context);
  var print$1 = {
    TAG: "Group",
    _0: {
      hd: getTermPrint(t),
      tl: {
        hd: {
          it: {
            TAG: "Plain",
            _0: "\n"
          },
          ann: undefined
        },
        tl: {
          hd: getBlockPrint(b$1),
          tl: /* [] */0
        }
      }
    }
  };
  return {
          it: {
            TAG: "BCons",
            _0: t,
            _1: b$1
          },
          ann: {
            sourceLocation: ann,
            print: print$1
          }
        };
}

function printTerm$1(param, ctx) {
  var sourceLocation = param.ann;
  var it = param.it;
  if (it.TAG === "Def") {
    var match = printDef$1(it._0);
    var it$1 = match[1];
    return {
            it: {
              TAG: "Def",
              _0: it$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: wrap(match[0], getDefinitionPrint(it$1), match[2])
            }
          };
  }
  var e = printExp$1(it._0);
  var match$1 = e.stat(ctx);
  var it$2 = match$1[1];
  return {
          it: {
            TAG: "Exp",
            _0: it$2
          },
          ann: {
            sourceLocation: sourceLocation,
            print: wrap(match$1[0], getPrint(it$2), match$1[2])
          }
        };
}

function printOutputlet$1(o) {
  var p = function (v) {
    switch (v.TAG) {
      case "Ref" :
          return "[Circular *" + v._0.toString() + "]";
      case "Con" :
          return constantToString$1(v._0);
      case "Struct" :
          var content = v._1;
          var i = v._0;
          var i$1 = i !== undefined ? "<ref *" + i.toString() + "> " : "";
          var content$1;
          if (content.TAG === "Lst") {
            throw {
                  RE_EXN_ID: SMoLPrintError,
                  _1: "Lists are not supported in JavaScript.",
                  Error: new Error()
                };
          }
          content$1 = "[ " + Core__List.toArray(Core__List.map(content._0, p)).join(", ") + " ]";
          return i$1 + content$1;
      
    }
  };
  if (typeof o !== "object") {
    return "error";
  } else {
    return p(o._0);
  }
}

function printOutput$1(sepOpt, os) {
  var sep = sepOpt !== undefined ? sepOpt : " ";
  return Core__List.toArray(Core__List.map(os, printOutputlet$1)).join(sep);
}

function printProgramFull$1(insertPrintTopLevel, p) {
  var p$1 = insertPrintTopLevel ? insertTopLevelPrint(p) : p;
  var print = function (param) {
    var sourceLocation = param.ann;
    var it = param.it;
    if (typeof it !== "object") {
      return {
              it: "PNil",
              ann: {
                sourceLocation: sourceLocation,
                print: {
                  TAG: "Group",
                  _0: /* [] */0
                }
              }
            };
    }
    var p = it._1;
    var t = printTerm$1(it._0, "Step");
    var tmp = p.it;
    if (typeof tmp !== "object") {
      return {
              it: {
                TAG: "PCons",
                _0: t,
                _1: {
                  it: "PNil",
                  ann: {
                    sourceLocation: {
                      begin: sourceLocation.end,
                      end: sourceLocation.end
                    },
                    print: {
                      TAG: "Plain",
                      _0: ""
                    }
                  }
                }
              },
              ann: {
                sourceLocation: sourceLocation,
                print: wrap("", getTermPrint(t), "")
              }
            };
    }
    var p$1 = print(p);
    return {
            it: {
              TAG: "PCons",
              _0: t,
              _1: p$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: concat2(getTermPrint(t), "\n", getProgramPrint(p$1))
            }
          };
  };
  return print(p$1);
}

function printProgram$1(insertPrintTopLevel, p) {
  return toString(printProgramFull$1(insertPrintTopLevel, p).ann.print);
}

function printStandAloneTerm$1(param) {
  var it = param.it;
  var tmp;
  if (it.TAG === "Def") {
    var match = printDef$1(it._0);
    tmp = match[1].ann.print;
  } else {
    var e = printExp$1(it._0);
    var match$1 = e.stat("Step");
    tmp = match$1[1].ann.print;
  }
  return toString(tmp);
}

var JSPrinter = {
  printName: printName$1,
  printOutputlet: printOutputlet$1,
  printOutput: printOutput$1,
  printStandAloneTerm: printStandAloneTerm$1,
  printProgram: printProgram$1,
  printProgramFull: printProgramFull$1
};

function toString$7(x) {
  if (x === "Nonlocal") {
    return "nonlocal";
  } else {
    return "global";
  }
}

function refMut(env, x) {
  if (env.TAG === "G") {
    return ;
  }
  var decl = env._2;
  if (!Belt_HashSetString.has(env._0, x)) {
    var _env = env._1;
    while(true) {
      var env$1 = _env;
      if (env$1.TAG === "G") {
        if (Belt_HashSetString.has(env$1._0, x)) {
          return Belt_HashMapString.set(decl, x, "Global");
        } else {
          return ;
        }
      }
      if (Belt_HashSetString.has(env$1._0, x)) {
        return Belt_HashMapString.set(decl, x, "Nonlocal");
      }
      _env = env$1._1;
      continue ;
    };
  }
  
}

function extend(ss, env) {
  var refs = Belt_HashMapString.make(0);
  return [
          refs,
          {
            TAG: "E",
            _0: Belt_HashSetString.fromArray(Belt_List.toArray(ss)),
            _1: env,
            _2: refs
          }
        ];
}

function printName$2(x) {
  var re = /-/g;
  var matchFn = function (_matchPart, _offset, _wholeString) {
    return "_";
  };
  return x.replace(re, matchFn);
}

function constantToString$2(c) {
  if (typeof c !== "object") {
    if (c === "Uni") {
      return "None";
    }
    throw {
          RE_EXN_ID: SMoLPrintError,
          _1: "Lists are not supported in Python.",
          Error: new Error()
        };
  } else {
    switch (c.TAG) {
      case "Num" :
          return String(c._0);
      case "Lgc" :
          if (c._0) {
            return "True";
          } else {
            return "False";
          }
      case "Str" :
          return JSON.stringify(c._0);
      case "Sym" :
          return c._0;
      
    }
  }
}

function listToString$2(es) {
  if (Belt_List.some(es, (function (e) {
            return containsNL(e.it);
          }))) {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: indentBlock({
                      it: concat(",\n", es),
                      ann: undefined
                    }, 4),
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  } else {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: {
                  it: concat(", ", es),
                  ann: undefined
                },
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  }
}

function defvarLike$2(op, x, e) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: op
              },
              ann: undefined
            },
            tl: {
              hd: x,
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: " = "
                  },
                  ann: undefined
                },
                tl: {
                  hd: indent(e, 2),
                  tl: /* [] */0
                }
              }
            }
          }
        };
}

function exprAppToString$2(e, es) {
  return group2(e, {
              it: listToString$2(es),
              ann: undefined
            });
}

function consumeContext$1(e) {
  return {
          expr: (function (param) {
              return surround("", e, "");
            }),
          stat: (function (ctx) {
              if (ctx === "Step") {
                return [
                        "",
                        e,
                        ""
                      ];
              } else {
                return [
                        "return ",
                        e,
                        ""
                      ];
              }
            })
        };
}

function consumeContextWrap$1(e) {
  return {
          expr: (function (ctx) {
              if (ctx) {
                return surround("(", e, ")");
              } else {
                return consumeContext$1(e).expr(ctx);
              }
            }),
          stat: consumeContext$1(e).stat
        };
}

function consumeContextVoid$1(e) {
  return {
          expr: consumeContext$1(e).expr,
          stat: (function (ctx) {
              if (ctx === "Step") {
                return consumeContext$1(e).stat(ctx);
              } else {
                return [
                        "",
                        e,
                        "\nreturn"
                      ];
              }
            })
        };
}

function consumeContextStat$1(e) {
  return {
          expr: (function (param) {
              var err = toString(e) + " can't be used as a expression in Python";
              throw {
                    RE_EXN_ID: SMoLPrintError,
                    _1: err,
                    Error: new Error()
                  };
            }),
          stat: consumeContextVoid$1(e).stat
        };
}

function exprAppPrmToString$1(p, es) {
  if (typeof p !== "object") {
    switch (p) {
      case "PairNew" :
          if (es) {
            var match = es.tl;
            if (match && !match.tl) {
              var e1 = es.hd(false);
              var e2 = match.hd(false);
              return {
                      it: [
                        "PairNew",
                        {
                          hd: e1,
                          tl: {
                            hd: e2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$1(s([
                                "[ ",
                                ", ",
                                " ]"
                              ], [
                                getPrint(e1),
                                getPrint(e2)
                              ]))
                    };
            }
            
          }
          break;
      case "PairRefLeft" :
          if (es && !es.tl) {
            var e1$1 = es.hd(true);
            return {
                    it: [
                      "PairRefLeft",
                      {
                        hd: e1$1,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$1(s([
                              "",
                              "[0]"
                            ], [getPrint(e1$1)]))
                  };
          }
          break;
      case "PairRefRight" :
          if (es && !es.tl) {
            var e1$2 = es.hd(true);
            return {
                    it: [
                      "PairRefRight",
                      {
                        hd: e1$2,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$1(s([
                              "",
                              "[1]"
                            ], [getPrint(e1$2)]))
                  };
          }
          break;
      case "PairSetLeft" :
          if (es) {
            var match$1 = es.tl;
            if (match$1 && !match$1.tl) {
              var e1$3 = es.hd(false);
              var e2$1 = match$1.hd(false);
              return {
                      it: [
                        "PairSetLeft",
                        {
                          hd: e1$3,
                          tl: {
                            hd: e2$1,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat$1(s([
                                "",
                                "[0] = ",
                                ""
                              ], [
                                getPrint(e1$3),
                                getPrint(e2$1)
                              ]))
                    };
            }
            
          }
          break;
      case "PairSetRight" :
          if (es) {
            var match$2 = es.tl;
            if (match$2 && !match$2.tl) {
              var e1$4 = es.hd(false);
              var e2$2 = match$2.hd(false);
              return {
                      it: [
                        "PairSetRight",
                        {
                          hd: e1$4,
                          tl: {
                            hd: e2$2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat$1(s([
                                "",
                                "[1] = ",
                                ""
                              ], [
                                getPrint(e1$4),
                                getPrint(e2$2)
                              ]))
                    };
            }
            
          }
          break;
      case "VecNew" :
          var es$1 = Belt_List.map(es, (function (e) {
                  return e(false);
                }));
          return {
                  it: [
                    "VecNew",
                    es$1
                  ],
                  ann: consumeContext$1(s([
                            "[ ",
                            " ]"
                          ], [{
                              it: concat(", ", Belt_List.map(es$1, (function (e) {
                                          return getPrint(e);
                                        }))),
                              ann: undefined
                            }]))
                };
      case "VecRef" :
          if (es) {
            var match$3 = es.tl;
            if (match$3 && !match$3.tl) {
              var e1$5 = es.hd(true);
              var e2$3 = match$3.hd(false);
              return {
                      it: [
                        "VecRef",
                        {
                          hd: e1$5,
                          tl: {
                            hd: e2$3,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$1(s([
                                "",
                                "[",
                                "]"
                              ], [
                                getPrint(e1$5),
                                getPrint(e2$3)
                              ]))
                    };
            }
            
          }
          break;
      case "VecSet" :
          if (es) {
            var match$4 = es.tl;
            if (match$4) {
              var match$5 = match$4.tl;
              if (match$5 && !match$5.tl) {
                var e1$6 = es.hd(true);
                var e2$4 = match$4.hd(false);
                var e3 = match$5.hd(false);
                return {
                        it: [
                          "VecSet",
                          {
                            hd: e1$6,
                            tl: {
                              hd: e2$4,
                              tl: {
                                hd: e3,
                                tl: /* [] */0
                              }
                            }
                          }
                        ],
                        ann: consumeContextStat$1(s([
                                  "",
                                  "[",
                                  "] = ",
                                  ""
                                ], [
                                  getPrint(e1$6),
                                  getPrint(e2$4),
                                  getPrint(e3)
                                ]))
                      };
              }
              
            }
            
          }
          break;
      case "VecLen" :
          if (es && !es.tl) {
            var e1$7 = es.hd(false);
            return {
                    it: [
                      "VecLen",
                      {
                        hd: e1$7,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$1(s([
                              "len(",
                              ")"
                            ], [getPrint(e1$7)]))
                  };
          }
          break;
      case "Err" :
          if (es && !es.tl) {
            var e1$8 = es.hd(true);
            return {
                    it: [
                      "Err",
                      {
                        hd: e1$8,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$1(s([
                              "raise ",
                              ""
                            ], [getPrint(e1$8)]))
                  };
          }
          break;
      case "Not" :
          if (es && !es.tl) {
            var e1$9 = es.hd(true);
            return {
                    it: [
                      "Not",
                      {
                        hd: e1$9,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$1(s([
                              "not ",
                              ""
                            ], [getPrint(e1$9)]))
                  };
          }
          break;
      case "Print" :
          if (es && !es.tl) {
            var e1$10 = es.hd(false);
            return {
                    it: [
                      "Print",
                      {
                        hd: e1$10,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$1(s([
                              "print(",
                              ")"
                            ], [getPrint(e1$10)]))
                  };
          }
          break;
      case "Next" :
          if (es && !es.tl) {
            var e1$11 = es.hd(false);
            return {
                    it: [
                      "Next",
                      {
                        hd: e1$11,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$1(s([
                              "next(",
                              ")"
                            ], [getPrint(e1$11)]))
                  };
          }
          break;
      case "Cons" :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "List is not supported by Python",
                Error: new Error()
              };
      
    }
  } else {
    if (p.TAG === "Arith") {
      var o = p._0;
      var os;
      switch (o) {
        case "Add" :
            os = "+";
            break;
        case "Sub" :
            os = "-";
            break;
        case "Mul" :
            os = "*";
            break;
        case "Div" :
            os = "/";
            break;
        
      }
      var es$2 = Belt_List.map(es, (function (e) {
              return e(true);
            }));
      return {
              it: [
                {
                  TAG: "Arith",
                  _0: o
                },
                es$2
              ],
              ann: consumeContextWrap$1(concat(" " + os + " ", Belt_List.map(es$2, (function (e) {
                              return getPrint(e);
                            }))))
            };
    }
    if (es) {
      var match$6 = es.tl;
      if (match$6 && !match$6.tl) {
        var o$1 = p._0;
        var os$1;
        switch (o$1) {
          case "Lt" :
              os$1 = "<";
              break;
          case "Eq" :
              os$1 = "is";
              break;
          case "Gt" :
              os$1 = ">";
              break;
          case "Le" :
              os$1 = "<=";
              break;
          case "Ge" :
              os$1 = ">=";
              break;
          case "Ne" :
              os$1 = "!=";
              break;
          case "Equal" :
              os$1 = "==";
              break;
          
        }
        var e1$12 = es.hd(true);
        var e2$5 = match$6.hd(true);
        return {
                it: [
                  {
                    TAG: "Cmp",
                    _0: o$1
                  },
                  {
                    hd: e1$12,
                    tl: {
                      hd: e2$5,
                      tl: /* [] */0
                    }
                  }
                ],
                ann: consumeContext$1(s([
                          "",
                          " ",
                          " ",
                          ""
                        ], [
                          getPrint(e1$12),
                          {
                            it: {
                              TAG: "Plain",
                              _0: os$1
                            },
                            ann: undefined
                          },
                          getPrint(e2$5)
                        ]))
              };
      }
      
    }
    
  }
  var err = "Python doesn't let you use " + toString$1(p) + " on " + String(Belt_List.length(es)) + " parameter(s).";
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: err,
        Error: new Error()
      };
}

function funLike$1(op, x, xs, e) {
  return s([
              "",
              " ",
              ":",
              ""
            ], [
              {
                it: {
                  TAG: "Plain",
                  _0: op
                },
                ann: undefined
              },
              {
                it: exprAppToString$2(x, xs),
                ann: undefined
              },
              indentBlock(e, 4)
            ]);
}

function defvarToString$2(x, e) {
  return defvarLike$2("", x, e);
}

function deffunToString$2(f, xs, b) {
  return funLike$1("def", f, xs, b);
}

function defgenToString$2(f, xs, b) {
  return funLike$1("def", f, xs, b);
}

function exprSetToString$2(x, e) {
  return defvarLike$2("", x, e);
}

function exprLamToString$2(xs, b) {
  return s([
              "lambda ",
              ": ",
              ""
            ], [
              xs,
              b
            ]);
}

function exprYieldToString$2(e) {
  return s([
              "yield ",
              ""
            ], [e]);
}

function exprCndToString$2(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              {
                it: {
                  TAG: "Plain",
                  _0: "se:"
                },
                ann: undefined
              },
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Belt_List.map(ebs$1, (function (param) {
          return {
                  it: s([
                        "if ",
                        ":",
                        "\n"
                      ], [
                        param[0],
                        indentBlock(param[1], 4)
                      ]),
                  ann: undefined
                };
        }));
  return concat(" el", ebs$2);
}

function exprIfToString$2(e_cnd, e_thn, e_els) {
  return s([
              "",
              " if ",
              " else ",
              ""
            ], [
              e_thn,
              e_cnd,
              e_els
            ]);
}

function symbolToString$2(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            sourceLocation: param.ann,
            print: {
              TAG: "Plain",
              _0: printName$2(it)
            }
          }
        };
}

function printExp$2(param, env) {
  var it = param.it;
  var lift = function (param) {
    var print = param.ann;
    var it = param.it;
    return function (sourceLocation) {
      return {
              expr: (function (ctx) {
                  return {
                          it: it,
                          ann: {
                            sourceLocation: sourceLocation,
                            print: print.expr(ctx)
                          }
                        };
                }),
              stat: (function (ctx) {
                  var match = print.stat(ctx);
                  return [
                          match[0],
                          {
                            it: it,
                            ann: {
                              sourceLocation: sourceLocation,
                              print: match[1]
                            }
                          },
                          match[2]
                        ];
                })
            };
    };
  };
  var e;
  switch (it.TAG) {
    case "Con" :
        var c = it._0;
        e = lift({
              it: {
                TAG: "Con",
                _0: c
              },
              ann: consumeContext$1({
                    TAG: "Plain",
                    _0: constantToString$2(c)
                  })
            });
        break;
    case "Ref" :
        var x = it._0;
        e = lift({
              it: {
                TAG: "Ref",
                _0: x
              },
              ann: consumeContext$1({
                    TAG: "Plain",
                    _0: printName$2(x)
                  })
            });
        break;
    case "Set" :
        var x$1 = it._0;
        refMut(env, x$1.it);
        var x$2 = symbolToString$2(x$1);
        var e$1 = printExp$2(it._1, env);
        var e$2 = e$1.expr(false);
        e = lift({
              it: {
                TAG: "Set",
                _0: x$2,
                _1: e$2
              },
              ann: consumeContextStat$1(exprSetToString$2(getNamePrint(x$2), getPrint(e$2)))
            });
        break;
    case "Lam" :
        var xs = Belt_List.map(it._0, symbolToString$2);
        var b = printLamBody(it._1, xs, env);
        e = lift({
              it: {
                TAG: "Lam",
                _0: xs,
                _1: b
              },
              ann: consumeContextWrap$1(exprLamToString$2({
                        it: concat(",", Belt_List.map(xs, getNamePrint)),
                        ann: undefined
                      }, getBlockPrint(b)))
            });
        break;
    case "Let" :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "let-expressions are not supported by Python",
              Error: new Error()
            };
    case "Letrec" :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "letrec-expressions are not supported by Python",
              Error: new Error()
            };
    case "AppPrm" :
        var es = Belt_List.map(it._1, (function (e, b) {
                var e$1 = printExp$2(e, env);
                return e$1.expr(b);
              }));
        var match = exprAppPrmToString$1(it._0, es);
        var match$1 = match.it;
        e = lift({
              it: {
                TAG: "AppPrm",
                _0: match$1[0],
                _1: match$1[1]
              },
              ann: match.ann
            });
        break;
    case "App" :
        var e$3 = printExp$2(it._0, env);
        var e$4 = e$3.expr(true);
        var es$1 = Belt_List.map(it._1, (function (e) {
                var e$1 = printExp$2(e, env);
                return e$1.expr(false);
              }));
        e = lift({
              it: {
                TAG: "App",
                _0: e$4,
                _1: es$1
              },
              ann: consumeContext$1(exprAppToString$2(getPrint(e$4), Belt_List.map(es$1, (function (e) {
                              return getPrint(e);
                            }))))
            });
        break;
    case "Bgn" :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "`begin` expressions are not supported by Python",
              Error: new Error()
            };
    case "If" :
        var e$5 = printExp$2(it._0, env);
        var e_cnd = e$5.expr(true);
        var e$6 = printExp$2(it._1, env);
        var e_thn = e$6.expr(true);
        var e$7 = printExp$2(it._2, env);
        var e_els = e$7.expr(true);
        e = lift({
              it: {
                TAG: "If",
                _0: e_cnd,
                _1: e_thn,
                _2: e_els
              },
              ann: consumeContextWrap$1(exprIfToString$2(getPrint(e_cnd), getPrint(e_thn), getPrint(e_els)))
            });
        break;
    case "Cnd" :
        var ob = it._1;
        var ebs = it._0;
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        throw {
                              RE_EXN_ID: SMoLPrintError,
                              _1: "Multi-armed conditionals in Python is not supported by the translator yet.",
                              Error: new Error()
                            };
                      }),
                    stat: (function (ctx) {
                        var ebs$1 = Belt_List.map(ebs, (function (eb) {
                                var e = printExp$2(eb[0], env);
                                var e$1 = printBlock$2(eb[1], env);
                                return [
                                        e.expr(false),
                                        e$1.stat(ctx)
                                      ];
                              }));
                        var ob$1 = obToString$1(ob, ctx, env);
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "Cnd",
                                    _0: ebs$1,
                                    _1: ob$1
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: exprCndToString$2(Belt_List.map(ebs$1, (function (param) {
                                                return [
                                                        getPrint(param[0]),
                                                        getBlockPrint(param[1])
                                                      ];
                                              })), Belt_Option.map(ob$1, (function (b) {
                                                return getBlockPrint(b);
                                              })))
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "GLam" :
        var xs$1 = Belt_List.map(it._0, symbolToString$2);
        var b$1 = printLamBody(it._1, xs$1, env);
        e = lift({
              it: {
                TAG: "GLam",
                _0: xs$1,
                _1: b$1
              },
              ann: consumeContextWrap$1(exprLamToString$2({
                        it: concat(",", Belt_List.map(xs$1, getNamePrint)),
                        ann: undefined
                      }, getBlockPrint(b$1)))
            });
        break;
    case "Yield" :
        var e$8 = printExp$2(it._0, env);
        var e$9 = e$8.expr(false);
        e = lift({
              it: {
                TAG: "Yield",
                _0: e$9
              },
              ann: consumeContextWrap$1(exprYieldToString$2(getPrint(e$9)))
            });
        break;
    
  }
  return e(param.ann);
}

function printDef$2(param, env) {
  var d = param.it;
  var match;
  switch (d.TAG) {
    case "Var" :
        var x = symbolToString$2(d._0);
        var e = printExp$2(d._1, env);
        var e$1 = e.expr(false);
        match = [
          "",
          {
            it: {
              TAG: "Var",
              _0: x,
              _1: e$1
            },
            ann: defvarToString$2(getNamePrint(x), getPrint(e$1))
          },
          ""
        ];
        break;
    case "Fun" :
        var f = symbolToString$2(d._0);
        var xs = Belt_List.map(d._1, symbolToString$2);
        var b = printDefBody(d._2, xs, env);
        match = [
          "",
          {
            it: {
              TAG: "Fun",
              _0: f,
              _1: xs,
              _2: b
            },
            ann: deffunToString$2(getNamePrint(f), Belt_List.map(xs, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b))
          },
          ""
        ];
        break;
    case "GFun" :
        var f$1 = symbolToString$2(d._0);
        var xs$1 = Belt_List.map(d._1, symbolToString$2);
        var b$1 = printDefBody(d._2, xs$1, env);
        match = [
          "",
          {
            it: {
              TAG: "GFun",
              _0: f$1,
              _1: xs$1,
              _2: b$1
            },
            ann: defgenToString$2(getNamePrint(f$1), Belt_List.map(xs$1, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b$1))
          },
          ""
        ];
        break;
    
  }
  var d$1 = match[1];
  return [
          match[0],
          {
            it: d$1.it,
            ann: {
              sourceLocation: param.ann,
              print: d$1.ann
            }
          },
          match[2]
        ];
}

function obToString$1(ob, ctx, env) {
  return Belt_Option.map(ob, (function (b) {
                var e = printBlock$2(b, env);
                return e.stat(ctx);
              }));
}

function printBlockHelper(param, env, context) {
  var ann = param.ann;
  var b = param.it;
  if (b.TAG === "BRet") {
    var e = printExp$2(b._0, env);
    var match = e.stat(context);
    var e$1 = match[1];
    var print = {
      TAG: "Group",
      _0: {
        hd: {
          it: {
            TAG: "Plain",
            _0: match[0]
          },
          ann: undefined
        },
        tl: {
          hd: getPrint(e$1),
          tl: {
            hd: {
              it: {
                TAG: "Plain",
                _0: match[2]
              },
              ann: undefined
            },
            tl: /* [] */0
          }
        }
      }
    };
    return {
            it: {
              TAG: "BRet",
              _0: e$1
            },
            ann: {
              sourceLocation: ann,
              print: print
            }
          };
  }
  var t = printTerm$2(b._0, env, "Step");
  var b$1 = printBlockHelper(b._1, env, context);
  var print$1 = {
    TAG: "Group",
    _0: {
      hd: getTermPrint(t),
      tl: {
        hd: {
          it: {
            TAG: "Plain",
            _0: "\n"
          },
          ann: undefined
        },
        tl: {
          hd: getBlockPrint(b$1),
          tl: /* [] */0
        }
      }
    }
  };
  return {
          it: {
            TAG: "BCons",
            _0: t,
            _1: b$1
          },
          ann: {
            sourceLocation: ann,
            print: print$1
          }
        };
}

function printBlock$2(b, env) {
  return {
          expr: (function (ctx) {
              var e = b.it;
              if (e.TAG === "BRet") {
                var e$1 = printExp$2(e._0, env);
                var match = e$1.expr(ctx);
                var ann = match.ann;
                return {
                        it: {
                          TAG: "BRet",
                          _0: {
                            it: match.it,
                            ann: ann
                          }
                        },
                        ann: ann
                      };
              }
              throw {
                    RE_EXN_ID: SMoLPrintError,
                    _1: "Python blocks can't be used as expressions in general",
                    Error: new Error()
                  };
            }),
          stat: (function (ctx) {
              var xs = xsOfBlock(b);
              if (xs !== /* [] */0) {
                throw {
                      RE_EXN_ID: SMoLPrintError,
                      _1: "Python blocks can't declare local variables",
                      Error: new Error()
                    };
              }
              return printBlockHelper(b, env, ctx);
            })
        };
}

function printLamBody(b, args, env) {
  var e = b.it;
  if (e.TAG === "BRet") {
    var args$1 = Belt_List.map(args, (function (x) {
            return x.it;
          }));
    var match = extend(args$1, env);
    var e$1 = printExp$2(e._0, match[1]);
    var match$1 = e$1.expr(false);
    var ann = match$1.ann;
    return {
            it: {
              TAG: "BRet",
              _0: {
                it: match$1.it,
                ann: ann
              }
            },
            ann: ann
          };
  }
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: "In Python, a lambda body must contain exactly one expression",
        Error: new Error()
      };
}

function printDefBody(b, args, env) {
  var locs = Belt_List.map(xsOfBlock(b), (function (x) {
          return x.it;
        }));
  var args$1 = Belt_List.map(args, (function (x) {
          return x.it;
        }));
  var match = extend(Belt_List.concat(locs, args$1), env);
  var b$1 = printBlockHelper(b, match[1], "Return");
  var print = concat("\n", Belt_List.concatMany([
            Belt_List.fromArray(Belt_HashMapString.toArray(match[0]).map(function (param) {
                      var it = toString$7(param[1]) + " " + param[0];
                      return {
                              it: {
                                TAG: "Plain",
                                _0: it
                              },
                              ann: undefined
                            };
                    })),
            {
              hd: getBlockPrint(b$1),
              tl: /* [] */0
            }
          ]));
  return {
          it: b$1.it,
          ann: {
            sourceLocation: b$1.ann.sourceLocation,
            print: print
          }
        };
}

function printTerm$2(param, env, ctx) {
  var sourceLocation = param.ann;
  var it = param.it;
  if (it.TAG === "Def") {
    var match = printDef$2(it._0, env);
    var it$1 = match[1];
    return {
            it: {
              TAG: "Def",
              _0: it$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: wrap(match[0], getDefinitionPrint(it$1), match[2])
            }
          };
  }
  var e = printExp$2(it._0, env);
  var match$1 = e.stat(ctx);
  var it$2 = match$1[1];
  return {
          it: {
            TAG: "Exp",
            _0: it$2
          },
          ann: {
            sourceLocation: sourceLocation,
            print: wrap(match$1[0], getPrint(it$2), match$1[2])
          }
        };
}

function printOutputlet$2(o) {
  var p = function (v) {
    switch (v.TAG) {
      case "Ref" :
          return "[...]";
      case "Con" :
          return constantToString$2(v._0);
      case "Struct" :
          var content = v._1;
          var i = "";
          var content$1;
          if (content.TAG === "Lst") {
            throw {
                  RE_EXN_ID: SMoLPrintError,
                  _1: "Lists are not supported in Python.",
                  Error: new Error()
                };
          }
          content$1 = "[" + Belt_List.toArray(Belt_List.map(content._0, p)).join(", ") + "]";
          return i + content$1;
      
    }
  };
  if (typeof o !== "object") {
    return "error";
  } else {
    return p(o._0);
  }
}

function printOutput$2(sepOpt, os) {
  var sep = sepOpt !== undefined ? sepOpt : " ";
  return Belt_List.toArray(Belt_List.map(os, printOutputlet$2)).join(sep);
}

function printProgramFull$2(insertPrintTopLevel, p) {
  var p$1 = insertPrintTopLevel ? insertTopLevelPrint(p) : p;
  var xs = xsOfProgram(p$1);
  var env = {
    TAG: "G",
    _0: Belt_HashSetString.fromArray(Belt_List.toArray(Belt_List.map(xs, (function (x) {
                    return x.it;
                  }))))
  };
  var print = function (param) {
    var sourceLocation = param.ann;
    var it = param.it;
    if (typeof it !== "object") {
      return {
              it: "PNil",
              ann: {
                sourceLocation: sourceLocation,
                print: {
                  TAG: "Group",
                  _0: /* [] */0
                }
              }
            };
    }
    var p = it._1;
    var t = printTerm$2(it._0, env, "Step");
    var tmp = p.it;
    if (typeof tmp !== "object") {
      return {
              it: {
                TAG: "PCons",
                _0: t,
                _1: {
                  it: "PNil",
                  ann: {
                    sourceLocation: {
                      begin: sourceLocation.end,
                      end: sourceLocation.end
                    },
                    print: {
                      TAG: "Plain",
                      _0: ""
                    }
                  }
                }
              },
              ann: {
                sourceLocation: sourceLocation,
                print: s([
                      "",
                      ""
                    ], [getTermPrint(t)])
              }
            };
    }
    var p$1 = print(p);
    return {
            it: {
              TAG: "PCons",
              _0: t,
              _1: p$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: concat2(getTermPrint(t), "\n", getProgramPrint(p$1))
            }
          };
  };
  return print(p$1);
}

function printProgram$2(insertPrintTopLevel, p) {
  return toString(printProgramFull$2(insertPrintTopLevel, p).ann.print);
}

function printStandAloneTerm$2(param) {
  var it = param.it;
  var globalEnv = {
    TAG: "G",
    _0: Belt_HashSetString.fromArray([])
  };
  var tmp;
  if (it.TAG === "Def") {
    var match = printDef$2(it._0, globalEnv);
    tmp = match[1].ann.print;
  } else {
    var e = printExp$2(it._0, globalEnv);
    var match$1 = e.stat("Step");
    tmp = match$1[1].ann.print;
  }
  return toString(tmp);
}

var PYPrinter = {
  printName: printName$2,
  printOutputlet: printOutputlet$2,
  printOutput: printOutput$2,
  printStandAloneTerm: printStandAloneTerm$2,
  printProgram: printProgram$2,
  printProgramFull: printProgramFull$2
};

function printName$3(x) {
  return x;
}

function constantToString$3(c) {
  if (typeof c !== "object") {
    if (c === "Uni") {
      return "Unit";
    } else {
      return "Nil";
    }
  }
  switch (c.TAG) {
    case "Num" :
        return c._0.toString();
    case "Lgc" :
        if (c._0) {
          return "True";
        } else {
          return "False";
        }
    case "Str" :
        return JSON.stringify(c._0);
    case "Sym" :
        return c._0;
    
  }
}

function listToString$3(es) {
  if (Core__List.some(es, (function (e) {
            return containsNL(e.it);
          }))) {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: indentBlock({
                      it: concat(",\n", es),
                      ann: undefined
                    }, 2),
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  } else {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: {
                  it: concat(", ", es),
                  ann: undefined
                },
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  }
}

function defvarLike$3(op, x, e) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: op
              },
              ann: undefined
            },
            tl: {
              hd: x,
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: " = "
                  },
                  ann: undefined
                },
                tl: {
                  hd: indent(e, 2),
                  tl: /* [] */0
                }
              }
            }
          }
        };
}

function exprAppToString$3(e, es) {
  return group2(e, {
              it: listToString$3(es),
              ann: undefined
            });
}

function consumeContext$2(e) {
  return {
          expr: (function (param) {
              return surround("", e, "");
            }),
          stat: (function (ctx) {
              if (ctx === "Step") {
                return [
                        "",
                        e,
                        ""
                      ];
              } else {
                return [
                        "return ",
                        e,
                        ""
                      ];
              }
            })
        };
}

function consumeContextWrap$2(e) {
  return {
          expr: (function (ctx) {
              if (ctx) {
                return surround("(", e, ")");
              } else {
                return consumeContext$2(e).expr(ctx);
              }
            }),
          stat: consumeContext$2(e).stat
        };
}

function consumeContextVoid$2(e) {
  return {
          expr: consumeContext$2(e).expr,
          stat: (function (ctx) {
              if (ctx === "Step") {
                return consumeContext$2(e).stat(ctx);
              } else {
                return [
                        "",
                        e,
                        "\nreturn"
                      ];
              }
            })
        };
}

function consumeContextWrapVoid(e) {
  return {
          expr: consumeContextWrap$2(e).expr,
          stat: (function (ctx) {
              if (ctx === "Step") {
                return consumeContext$2(e).stat(ctx);
              } else {
                return [
                        "",
                        e,
                        "\nreturn"
                      ];
              }
            })
        };
}

function exprAppPrmToString$2(p, es) {
  if (typeof p !== "object") {
    switch (p) {
      case "PairNew" :
          if (es) {
            var match = es.tl;
            if (match && !match.tl) {
              var e1 = es.hd(false);
              var e2 = match.hd(false);
              return {
                      it: [
                        "PairNew",
                        {
                          hd: e1,
                          tl: {
                            hd: e2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$2(s([
                                "vec[",
                                ", ",
                                "]"
                              ], [
                                getPrint(e1),
                                getPrint(e2)
                              ]))
                    };
            }
            
          }
          break;
      case "PairRefLeft" :
          if (es && !es.tl) {
            var e1$1 = es.hd(true);
            return {
                    it: [
                      "PairRefLeft",
                      {
                        hd: e1$1,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$2(s([
                              "",
                              "[0]"
                            ], [getPrint(e1$1)]))
                  };
          }
          break;
      case "PairRefRight" :
          if (es && !es.tl) {
            var e1$2 = es.hd(true);
            return {
                    it: [
                      "PairRefRight",
                      {
                        hd: e1$2,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$2(s([
                              "",
                              "[1]"
                            ], [getPrint(e1$2)]))
                  };
          }
          break;
      case "PairSetLeft" :
          if (es) {
            var match$1 = es.tl;
            if (match$1 && !match$1.tl) {
              var e1$3 = es.hd(false);
              var e2$1 = match$1.hd(false);
              return {
                      it: [
                        "PairSetLeft",
                        {
                          hd: e1$3,
                          tl: {
                            hd: e2$1,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextWrapVoid(s([
                                "",
                                "[0] = ",
                                ""
                              ], [
                                getPrint(e1$3),
                                getPrint(e2$1)
                              ]))
                    };
            }
            
          }
          break;
      case "PairSetRight" :
          if (es) {
            var match$2 = es.tl;
            if (match$2 && !match$2.tl) {
              var e1$4 = es.hd(false);
              var e2$2 = match$2.hd(false);
              return {
                      it: [
                        "PairSetRight",
                        {
                          hd: e1$4,
                          tl: {
                            hd: e2$2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextWrapVoid(s([
                                "",
                                "[1] = ",
                                ""
                              ], [
                                getPrint(e1$4),
                                getPrint(e2$2)
                              ]))
                    };
            }
            
          }
          break;
      case "VecNew" :
          var es$1 = Core__List.map(es, (function (e) {
                  return e(false);
                }));
          return {
                  it: [
                    "VecNew",
                    es$1
                  ],
                  ann: consumeContext$2(s([
                            "vec[",
                            "]"
                          ], [{
                              it: concat(", ", Core__List.map(es$1, (function (e) {
                                          return getPrint(e);
                                        }))),
                              ann: undefined
                            }]))
                };
      case "VecRef" :
          if (es) {
            var match$3 = es.tl;
            if (match$3 && !match$3.tl) {
              var e1$5 = es.hd(true);
              var e2$3 = match$3.hd(false);
              return {
                      it: [
                        "VecRef",
                        {
                          hd: e1$5,
                          tl: {
                            hd: e2$3,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$2(s([
                                "",
                                "[",
                                "]"
                              ], [
                                getPrint(e1$5),
                                getPrint(e2$3)
                              ]))
                    };
            }
            
          }
          break;
      case "VecSet" :
          if (es) {
            var match$4 = es.tl;
            if (match$4) {
              var match$5 = match$4.tl;
              if (match$5 && !match$5.tl) {
                var e1$6 = es.hd(true);
                var e2$4 = match$4.hd(false);
                var e3 = match$5.hd(false);
                return {
                        it: [
                          "VecSet",
                          {
                            hd: e1$6,
                            tl: {
                              hd: e2$4,
                              tl: {
                                hd: e3,
                                tl: /* [] */0
                              }
                            }
                          }
                        ],
                        ann: consumeContextWrapVoid(s([
                                  "",
                                  "[",
                                  "] = ",
                                  ""
                                ], [
                                  getPrint(e1$6),
                                  getPrint(e2$4),
                                  getPrint(e3)
                                ]))
                      };
              }
              
            }
            
          }
          break;
      case "VecLen" :
          if (es && !es.tl) {
            var e1$7 = es.hd(false);
            return {
                    it: [
                      "VecLen",
                      {
                        hd: e1$7,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$2(s([
                              "length(",
                              ")"
                            ], [getPrint(e1$7)]))
                  };
          }
          break;
      case "Err" :
          if (es && !es.tl) {
            var e1$8 = es.hd(true);
            return {
                    it: [
                      "Err",
                      {
                        hd: e1$8,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$2(s([
                              "raise ",
                              ""
                            ], [getPrint(e1$8)]))
                  };
          }
          break;
      case "Not" :
          if (es && !es.tl) {
            var e1$9 = es.hd(true);
            return {
                    it: [
                      "Not",
                      {
                        hd: e1$9,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$2(s([
                              "! ",
                              ""
                            ], [getPrint(e1$9)]))
                  };
          }
          break;
      case "Print" :
          if (es && !es.tl) {
            var e1$10 = es.hd(false);
            return {
                    it: [
                      "Print",
                      {
                        hd: e1$10,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$2(s([
                              "print(",
                              ")"
                            ], [getPrint(e1$10)]))
                  };
          }
          break;
      case "Next" :
          if (es && !es.tl) {
            var e1$11 = es.hd(false);
            return {
                    it: [
                      "Next",
                      {
                        hd: e1$11,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$2(s([
                              "next(",
                              ")"
                            ], [getPrint(e1$11)]))
                  };
          }
          break;
      case "Cons" :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "List is not supported by Pseudo",
                Error: new Error()
              };
      
    }
  } else {
    if (p.TAG === "Arith") {
      var o = p._0;
      var os;
      switch (o) {
        case "Add" :
            os = "+";
            break;
        case "Sub" :
            os = "-";
            break;
        case "Mul" :
            os = "*";
            break;
        case "Div" :
            os = "/";
            break;
        
      }
      var es$2 = Core__List.map(es, (function (e) {
              return e(true);
            }));
      return {
              it: [
                {
                  TAG: "Arith",
                  _0: o
                },
                es$2
              ],
              ann: consumeContextWrap$2(concat(" " + os + " ", Core__List.map(es$2, (function (e) {
                              return getPrint(e);
                            }))))
            };
    }
    if (es) {
      var match$6 = es.tl;
      if (match$6 && !match$6.tl) {
        var o$1 = p._0;
        var os$1;
        switch (o$1) {
          case "Lt" :
              os$1 = "<";
              break;
          case "Eq" :
              os$1 = "===";
              break;
          case "Gt" :
              os$1 = ">";
              break;
          case "Le" :
              os$1 = "<=";
              break;
          case "Ge" :
              os$1 = ">=";
              break;
          case "Ne" :
              os$1 = "!=";
              break;
          case "Equal" :
              os$1 = "==";
              break;
          
        }
        var e1$12 = es.hd(true);
        var e2$5 = match$6.hd(true);
        return {
                it: [
                  {
                    TAG: "Cmp",
                    _0: o$1
                  },
                  {
                    hd: e1$12,
                    tl: {
                      hd: e2$5,
                      tl: /* [] */0
                    }
                  }
                ],
                ann: consumeContext$2(s([
                          "",
                          " ",
                          " ",
                          ""
                        ], [
                          getPrint(e1$12),
                          {
                            it: {
                              TAG: "Plain",
                              _0: os$1
                            },
                            ann: undefined
                          },
                          getPrint(e2$5)
                        ]))
              };
      }
      
    }
    
  }
  var err = "Pseudo doesn't let you use " + toString$1(p) + " on " + Core__List.length(es).toString() + " parameter(s).";
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: err,
        Error: new Error()
      };
}

function funLike$2(op, x, xs, e) {
  return s([
              "",
              " ",
              ":",
              "\nend"
            ], [
              {
                it: {
                  TAG: "Plain",
                  _0: op
                },
                ann: undefined
              },
              {
                it: exprAppToString$3(x, xs),
                ann: undefined
              },
              indentBlock(e, 2)
            ]);
}

function defvarToString$3(x, e) {
  return defvarLike$3("let ", x, e);
}

function deffunToString$3(f, xs, b) {
  return funLike$2("fun", f, xs, b);
}

function defgenToString$3(f, xs, b) {
  return funLike$2("gen fun", f, xs, b);
}

function exprSetToString$3(x, e) {
  return defvarLike$3("", x, e);
}

function exprLamToString$3(xs, b) {
  return funLike$2("lam", {
              it: {
                TAG: "Plain",
                _0: ""
              },
              ann: undefined
            }, xs, b);
}

function exprGenToString$2(xs, b) {
  return funLike$2("gen lam", {
              it: {
                TAG: "Plain",
                _0: ""
              },
              ann: undefined
            }, xs, b);
}

function exprYieldToString$3(e) {
  return s([
              "yield ",
              ""
            ], [e]);
}

function exprBgnToString$2(es, e) {
  return listToString$3(Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ]));
}

function exprCndToString$3(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              {
                it: {
                  TAG: "Plain",
                  _0: "e:"
                },
                ann: undefined
              },
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Core__List.map(ebs$1, (function (param) {
          return {
                  it: s([
                        "if ",
                        ":",
                        "\n"
                      ], [
                        param[0],
                        indentBlock(param[1], 2)
                      ]),
                  ann: undefined
                };
        }));
  return s([
              "",
              "end"
            ], [{
                it: concat(" els", ebs$2),
                ann: undefined
              }]);
}

function exprIfToString$3(e_cnd, e_thn, e_els) {
  return s([
              "if ",
              " then ",
              " else ",
              ""
            ], [
              e_cnd,
              e_thn,
              e_els
            ]);
}

function letLike$1(op, xes, b) {
  var xes_it = concat("\n", xes);
  var xes$1 = {
    it: xes_it,
    ann: undefined
  };
  var ss_0 = {
    it: {
      TAG: "Plain",
      _0: "("
    },
    ann: undefined
  };
  var ss_1 = {
    hd: indent(xes$1, 1),
    tl: {
      hd: {
        it: {
          TAG: "Plain",
          _0: ")"
        },
        ann: undefined
      },
      tl: /* [] */0
    }
  };
  var ss = {
    hd: ss_0,
    tl: ss_1
  };
  var xes_it$1 = {
    TAG: "Group",
    _0: ss
  };
  var xes$2 = {
    it: xes_it$1,
    ann: undefined
  };
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: hcat({
                    it: {
                      TAG: "Group",
                      _0: {
                        hd: {
                          it: {
                            TAG: "Plain",
                            _0: "("
                          },
                          ann: undefined
                        },
                        tl: {
                          hd: {
                            it: {
                              TAG: "Plain",
                              _0: op
                            },
                            ann: undefined
                          },
                          tl: {
                            hd: {
                              it: {
                                TAG: "Plain",
                                _0: " "
                              },
                              ann: undefined
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    ann: undefined
                  }, xes$2),
              ann: undefined
            },
            tl: {
              hd: indentBlock(b, 2),
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: ")"
                  },
                  ann: undefined
                },
                tl: /* [] */0
              }
            }
          }
        };
}

function exprLetToString$1(xes, b) {
  return letLike$1("let", xes, b);
}

function exprLetrecToString$1(xes, b) {
  return letLike$1("letrec", xes, b);
}

function symbolToString$3(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            sourceLocation: param.ann,
            print: {
              TAG: "Plain",
              _0: it
            }
          }
        };
}

function printExp$3(param) {
  var it = param.it;
  var lift = function (param) {
    var print = param.ann;
    var it = param.it;
    return function (sourceLocation) {
      return {
              expr: (function (ctx) {
                  return {
                          it: it,
                          ann: {
                            sourceLocation: sourceLocation,
                            print: print.expr(ctx)
                          }
                        };
                }),
              stat: (function (ctx) {
                  var match = print.stat(ctx);
                  return [
                          match[0],
                          {
                            it: it,
                            ann: {
                              sourceLocation: sourceLocation,
                              print: match[1]
                            }
                          },
                          match[2]
                        ];
                })
            };
    };
  };
  var e;
  switch (it.TAG) {
    case "Con" :
        var c = it._0;
        e = lift({
              it: {
                TAG: "Con",
                _0: c
              },
              ann: consumeContext$2({
                    TAG: "Plain",
                    _0: constantToString$3(c)
                  })
            });
        break;
    case "Ref" :
        var x = it._0;
        e = lift({
              it: {
                TAG: "Ref",
                _0: x
              },
              ann: consumeContext$2({
                    TAG: "Plain",
                    _0: x
                  })
            });
        break;
    case "Set" :
        var x$1 = symbolToString$3(it._0);
        var e$1 = printExp$3(it._1);
        var e$2 = e$1.expr(false);
        e = lift({
              it: {
                TAG: "Set",
                _0: x$1,
                _1: e$2
              },
              ann: consumeContextWrapVoid(exprSetToString$3(getNamePrint(x$1), getPrint(e$2)))
            });
        break;
    case "Lam" :
        var xs = Core__List.map(it._0, symbolToString$3);
        var b = printBlock$3(it._1, "Return");
        e = lift({
              it: {
                TAG: "Lam",
                _0: xs,
                _1: b
              },
              ann: consumeContextWrap$2(exprLamToString$3(Core__List.map(xs, (function (x) {
                              return getNamePrint(x);
                            })), getBlockPrint(b)))
            });
        break;
    case "Let" :
        var b$1 = it._1;
        var xes = Core__List.map(it._0, xeToString$2);
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        var b$2 = printBlock$3(b$1, "Step");
                        return {
                                it: {
                                  TAG: "Let",
                                  _0: xes,
                                  _1: b$2
                                },
                                ann: {
                                  sourceLocation: sourceLocation,
                                  print: exprLetToString$1(Core__List.map(xes, (function (xe) {
                                              return getBindPrint(xe);
                                            })), getBlockPrint(b$2))
                                }
                              };
                      }),
                    stat: (function (ctx) {
                        var b$2 = printBlock$3(b$1, ctx);
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "Let",
                                    _0: xes,
                                    _1: b$2
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: exprLetToString$1(Core__List.map(xes, (function (xe) {
                                                return getBindPrint(xe);
                                              })), getBlockPrint(b$2))
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "Letrec" :
        var b$2 = it._1;
        var xes$1 = Core__List.map(it._0, xeToString$2);
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        var b$3 = printBlock$3(b$2, "Step");
                        return {
                                it: {
                                  TAG: "Letrec",
                                  _0: xes$1,
                                  _1: b$3
                                },
                                ann: {
                                  sourceLocation: sourceLocation,
                                  print: exprLetrecToString$1(Core__List.map(xes$1, (function (xe) {
                                              return getBindPrint(xe);
                                            })), getBlockPrint(b$3))
                                }
                              };
                      }),
                    stat: (function (ctx) {
                        var b$3 = printBlock$3(b$2, ctx);
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "Letrec",
                                    _0: xes$1,
                                    _1: b$3
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: exprLetrecToString$1(Core__List.map(xes$1, (function (xe) {
                                                return getBindPrint(xe);
                                              })), getBlockPrint(b$3))
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "AppPrm" :
        var es = Core__List.map(it._1, (function (e) {
                return function (b) {
                  var e$1 = printExp$3(e);
                  return e$1.expr(b);
                };
              }));
        var match = exprAppPrmToString$2(it._0, es);
        var match$1 = match.it;
        e = lift({
              it: {
                TAG: "AppPrm",
                _0: match$1[0],
                _1: match$1[1]
              },
              ann: match.ann
            });
        break;
    case "App" :
        var e$3 = printExp$3(it._0);
        var e$4 = e$3.expr(true);
        var es$1 = Core__List.map(it._1, (function (e) {
                var e$1 = printExp$3(e);
                return e$1.expr(false);
              }));
        e = lift({
              it: {
                TAG: "App",
                _0: e$4,
                _1: es$1
              },
              ann: consumeContext$2(exprAppToString$3(getPrint(e$4), Core__List.map(es$1, (function (e) {
                              return getPrint(e);
                            }))))
            });
        break;
    case "Bgn" :
        var es$2 = Core__List.map(it._0, (function (e) {
                var e$1 = printExp$3(e);
                return e$1.expr(false);
              }));
        var e$5 = printExp$3(it._1);
        var e$6 = e$5.expr(false);
        e = lift({
              it: {
                TAG: "Bgn",
                _0: es$2,
                _1: e$6
              },
              ann: consumeContext$2(exprBgnToString$2(Core__List.map(es$2, (function (e) {
                              return getPrint(e);
                            })), getPrint(e$6)))
            });
        break;
    case "If" :
        var e$7 = printExp$3(it._0);
        var e_cnd = e$7.expr(true);
        var e$8 = printExp$3(it._1);
        var e_thn = e$8.expr(true);
        var e$9 = printExp$3(it._2);
        var e_els = e$9.expr(true);
        e = lift({
              it: {
                TAG: "If",
                _0: e_cnd,
                _1: e_thn,
                _2: e_els
              },
              ann: consumeContextWrap$2(exprIfToString$3(getPrint(e_cnd), getPrint(e_thn), getPrint(e_els)))
            });
        break;
    case "Cnd" :
        var ob = it._1;
        var ebs = it._0;
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        throw {
                              RE_EXN_ID: SMoLPrintError,
                              _1: "Multi-armed conditionals in JavaScript is not supported by the translator yet.",
                              Error: new Error()
                            };
                      }),
                    stat: (function (ctx) {
                        var ebs$1 = Core__List.map(ebs, (function (eb) {
                                var e = printExp$3(eb[0]);
                                return [
                                        e.expr(false),
                                        printBlock$3(eb[1], ctx)
                                      ];
                              }));
                        var ob$1 = obToString$2(ob, ctx);
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "Cnd",
                                    _0: ebs$1,
                                    _1: ob$1
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: exprCndToString$3(Core__List.map(ebs$1, (function (param) {
                                                return [
                                                        getPrint(param[0]),
                                                        getBlockPrint(param[1])
                                                      ];
                                              })), Core__Option.map(ob$1, (function (b) {
                                                return getBlockPrint(b);
                                              })))
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "GLam" :
        var xs$1 = Core__List.map(it._0, symbolToString$3);
        var b$3 = printBlock$3(it._1, "Return");
        e = lift({
              it: {
                TAG: "GLam",
                _0: xs$1,
                _1: b$3
              },
              ann: consumeContextWrap$2(exprGenToString$2(Core__List.map(xs$1, (function (x) {
                              return getNamePrint(x);
                            })), getBlockPrint(b$3)))
            });
        break;
    case "Yield" :
        var e$10 = printExp$3(it._0);
        var e$11 = e$10.expr(false);
        e = lift({
              it: {
                TAG: "Yield",
                _0: e$11
              },
              ann: consumeContextWrap$2(exprYieldToString$3(getPrint(e$11)))
            });
        break;
    
  }
  return e(param.ann);
}

function printDef$3(param) {
  var d = param.it;
  var match;
  switch (d.TAG) {
    case "Var" :
        var x = symbolToString$3(d._0);
        var e = printExp$3(d._1);
        var e$1 = e.expr(false);
        match = [
          "",
          {
            it: {
              TAG: "Var",
              _0: x,
              _1: e$1
            },
            ann: defvarToString$3(getNamePrint(x), getPrint(e$1))
          },
          ""
        ];
        break;
    case "Fun" :
        var f = symbolToString$3(d._0);
        var xs = Core__List.map(d._1, symbolToString$3);
        var b = printBlock$3(d._2, "Return");
        match = [
          "",
          {
            it: {
              TAG: "Fun",
              _0: f,
              _1: xs,
              _2: b
            },
            ann: deffunToString$3(getNamePrint(f), Core__List.map(xs, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b))
          },
          ""
        ];
        break;
    case "GFun" :
        var f$1 = symbolToString$3(d._0);
        var xs$1 = Core__List.map(d._1, symbolToString$3);
        var b$1 = printBlock$3(d._2, "Return");
        match = [
          "",
          {
            it: {
              TAG: "GFun",
              _0: f$1,
              _1: xs$1,
              _2: b$1
            },
            ann: defgenToString$3(getNamePrint(f$1), Core__List.map(xs$1, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b$1))
          },
          ""
        ];
        break;
    
  }
  var d$1 = match[1];
  return [
          match[0],
          {
            it: d$1.it,
            ann: {
              sourceLocation: param.ann,
              print: d$1.ann
            }
          },
          match[2]
        ];
}

function xeToString$2(param) {
  var xe = param.it;
  var x = symbolToString$3(xe[0]);
  var e = printExp$3(xe[1]);
  var e$1 = e.expr(false);
  var print = defvarToString$3(getNamePrint(x), getPrint(e$1));
  return {
          it: [
            x,
            e$1
          ],
          ann: {
            sourceLocation: param.ann,
            print: print
          }
        };
}

function obToString$2(ob, ctx) {
  return Core__Option.map(ob, (function (b) {
                return printBlock$3(b, ctx);
              }));
}

function printBlock$3(param, context) {
  var ann = param.ann;
  var b = param.it;
  if (b.TAG === "BRet") {
    var e = printExp$3(b._0);
    var match = e.stat(context);
    var e$1 = match[1];
    var print = {
      TAG: "Group",
      _0: {
        hd: {
          it: {
            TAG: "Plain",
            _0: match[0]
          },
          ann: undefined
        },
        tl: {
          hd: getPrint(e$1),
          tl: {
            hd: {
              it: {
                TAG: "Plain",
                _0: match[2]
              },
              ann: undefined
            },
            tl: /* [] */0
          }
        }
      }
    };
    return {
            it: {
              TAG: "BRet",
              _0: e$1
            },
            ann: {
              sourceLocation: ann,
              print: print
            }
          };
  }
  var t = printTerm$3(b._0, "Step");
  var b$1 = printBlock$3(b._1, context);
  var print$1 = {
    TAG: "Group",
    _0: {
      hd: getTermPrint(t),
      tl: {
        hd: {
          it: {
            TAG: "Plain",
            _0: "\n"
          },
          ann: undefined
        },
        tl: {
          hd: getBlockPrint(b$1),
          tl: /* [] */0
        }
      }
    }
  };
  return {
          it: {
            TAG: "BCons",
            _0: t,
            _1: b$1
          },
          ann: {
            sourceLocation: ann,
            print: print$1
          }
        };
}

function printTerm$3(param, ctx) {
  var sourceLocation = param.ann;
  var it = param.it;
  if (it.TAG === "Def") {
    var match = printDef$3(it._0);
    var it$1 = match[1];
    return {
            it: {
              TAG: "Def",
              _0: it$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: wrap(match[0], getDefinitionPrint(it$1), match[2])
            }
          };
  }
  var e = printExp$3(it._0);
  var match$1 = e.stat(ctx);
  var it$2 = match$1[1];
  return {
          it: {
            TAG: "Exp",
            _0: it$2
          },
          ann: {
            sourceLocation: sourceLocation,
            print: wrap(match$1[0], getPrint(it$2), match$1[2])
          }
        };
}

function printOutputlet$3(o) {
  var p = function (v) {
    switch (v.TAG) {
      case "Ref" :
          return "#" + v._0.toString() + "#";
      case "Con" :
          return constantToString$3(v._0);
      case "Struct" :
          var content = v._1;
          var i = v._0;
          var i$1 = i !== undefined ? "#" + i.toString() + "#=" : "";
          var content$1;
          if (content.TAG === "Lst") {
            throw {
                  RE_EXN_ID: SMoLPrintError,
                  _1: "Lists are not supported in Pseudo.",
                  Error: new Error()
                };
          }
          content$1 = "vec[" + Core__List.toArray(Core__List.map(content._0, p)).join(", ") + "]";
          return i$1 + content$1;
      
    }
  };
  if (typeof o !== "object") {
    return "error";
  } else {
    return p(o._0);
  }
}

function printOutput$3(sepOpt, os) {
  var sep = sepOpt !== undefined ? sepOpt : " ";
  return Core__List.toArray(Core__List.map(os, printOutputlet$3)).join(sep);
}

function printProgramFull$3(insertPrintTopLevel, p) {
  var p$1 = insertPrintTopLevel ? insertTopLevelPrint(p) : p;
  var print = function (param) {
    var sourceLocation = param.ann;
    var it = param.it;
    if (typeof it !== "object") {
      return {
              it: "PNil",
              ann: {
                sourceLocation: sourceLocation,
                print: {
                  TAG: "Group",
                  _0: /* [] */0
                }
              }
            };
    }
    var p = it._1;
    var t = printTerm$3(it._0, "Step");
    var prefix = "";
    var suffix = "";
    var tmp = p.it;
    if (typeof tmp !== "object") {
      return {
              it: {
                TAG: "PCons",
                _0: t,
                _1: {
                  it: "PNil",
                  ann: {
                    sourceLocation: {
                      begin: sourceLocation.end,
                      end: sourceLocation.end
                    },
                    print: {
                      TAG: "Plain",
                      _0: ""
                    }
                  }
                }
              },
              ann: {
                sourceLocation: sourceLocation,
                print: wrap(prefix, getTermPrint(t), suffix)
              }
            };
    }
    var p$1 = print(p);
    return {
            it: {
              TAG: "PCons",
              _0: t,
              _1: p$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: concat2({
                    it: wrap(prefix, getTermPrint(t), suffix),
                    ann: undefined
                  }, "\n", getProgramPrint(p$1))
            }
          };
  };
  return print(p$1);
}

function printProgram$3(insertPrintTopLevel, p) {
  return toString(printProgramFull$3(insertPrintTopLevel, p).ann.print);
}

function printStandAloneTerm$3(param) {
  var it = param.it;
  var tmp;
  if (it.TAG === "Def") {
    var match = printDef$3(it._0);
    tmp = match[1].ann.print;
  } else {
    var e = printExp$3(it._0);
    var match$1 = e.stat("Step");
    tmp = match$1[1].ann.print;
  }
  return toString(tmp);
}

var PCPrinter = {
  printName: printName$3,
  printOutputlet: printOutputlet$3,
  printOutput: printOutput$3,
  printStandAloneTerm: printStandAloneTerm$3,
  printProgram: printProgram$3,
  printProgramFull: printProgramFull$3
};

function printName$4(x) {
  var re = /-./g;
  var matchFn = function (matchPart, _offset, _wholeString) {
    return matchPart.substring(1).toUpperCase();
  };
  var x$1 = x.replace(re, matchFn);
  if (x$1 === "var") {
    return "$var";
  } else {
    return x$1;
  }
}

function constantToString$4(c) {
  if (typeof c !== "object") {
    if (c === "Uni") {
      return "null";
    }
    throw {
          RE_EXN_ID: SMoLPrintError,
          _1: "Lists are not supported in Scala.",
          Error: new Error()
        };
  } else {
    switch (c.TAG) {
      case "Num" :
          return c._0.toString();
      case "Lgc" :
          if (c._0) {
            return "true";
          } else {
            return "false";
          }
      case "Str" :
          return JSON.stringify(c._0);
      case "Sym" :
          return c._0;
      
    }
  }
}

function listToString$4(es) {
  if (Core__List.some(es, (function (e) {
            return containsNL(e.it);
          }))) {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: indentBlock({
                      it: concat(",\n", es),
                      ann: undefined
                    }, 2),
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  } else {
    return {
            TAG: "Group",
            _0: {
              hd: {
                it: {
                  TAG: "Plain",
                  _0: "("
                },
                ann: undefined
              },
              tl: {
                hd: {
                  it: concat(", ", es),
                  ann: undefined
                },
                tl: {
                  hd: {
                    it: {
                      TAG: "Plain",
                      _0: ")"
                    },
                    ann: undefined
                  },
                  tl: /* [] */0
                }
              }
            }
          };
  }
}

function defvarLike$4(op, x, e) {
  return {
          TAG: "Group",
          _0: {
            hd: {
              it: {
                TAG: "Plain",
                _0: op
              },
              ann: undefined
            },
            tl: {
              hd: x,
              tl: {
                hd: {
                  it: {
                    TAG: "Plain",
                    _0: " = "
                  },
                  ann: undefined
                },
                tl: {
                  hd: indent(e, 2),
                  tl: /* [] */0
                }
              }
            }
          }
        };
}

function exprAppToString$4(e, es) {
  return group2(e, es === /* [] */0 ? ({
                  it: {
                    TAG: "Plain",
                    _0: ""
                  },
                  ann: undefined
                }) : ({
                  it: listToString$4(es),
                  ann: undefined
                }));
}

var containsVarMutation = {
  contents: false
};

var containsVecMutation = {
  contents: false
};

function consumeContext$3(e) {
  return {
          expr: (function (param) {
              return surround("", e, "");
            }),
          stat: (function (ctx) {
              return [
                      "",
                      e,
                      ""
                    ];
            })
        };
}

function consumeContextWrap$3(e) {
  return {
          expr: (function (ctx) {
              if (ctx) {
                return surround("(", e, ")");
              } else {
                return consumeContext$3(e).expr(ctx);
              }
            }),
          stat: consumeContext$3(e).stat
        };
}

function consumeContextVoid$3(e) {
  return {
          expr: consumeContext$3(e).expr,
          stat: (function (ctx) {
              if (ctx === "Step") {
                return consumeContext$3(e).stat(ctx);
              } else {
                return [
                        "",
                        e,
                        ""
                      ];
              }
            })
        };
}

function exprAppPrmToString$3(p, es) {
  if (typeof p !== "object") {
    switch (p) {
      case "PairNew" :
          if (es) {
            var match = es.tl;
            if (match && !match.tl) {
              var e1 = es.hd(false);
              var e2 = match.hd(false);
              var vecKeyword = containsVecMutation.contents || containsVarMutation.contents ? "Buffer" : "";
              return {
                      it: [
                        "PairNew",
                        {
                          hd: e1,
                          tl: {
                            hd: e2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$3(s([
                                "",
                                "(",
                                ", ",
                                ")"
                              ], [
                                {
                                  it: {
                                    TAG: "Plain",
                                    _0: vecKeyword
                                  },
                                  ann: undefined
                                },
                                getPrint(e1),
                                getPrint(e2)
                              ]))
                    };
            }
            
          }
          break;
      case "PairRefLeft" :
          if (es && !es.tl) {
            var e1$1 = es.hd(true);
            return {
                    it: [
                      "PairRefLeft",
                      {
                        hd: e1$1,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$3(s([
                              "",
                              "(0)"
                            ], [getPrint(e1$1)]))
                  };
          }
          break;
      case "PairRefRight" :
          if (es && !es.tl) {
            var e1$2 = es.hd(true);
            return {
                    it: [
                      "PairRefRight",
                      {
                        hd: e1$2,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$3(s([
                              "",
                              "(1)"
                            ], [getPrint(e1$2)]))
                  };
          }
          break;
      case "PairSetLeft" :
          if (es) {
            var match$1 = es.tl;
            if (match$1 && !match$1.tl) {
              var e1$3 = es.hd(false);
              var e2$1 = match$1.hd(false);
              return {
                      it: [
                        "PairSetLeft",
                        {
                          hd: e1$3,
                          tl: {
                            hd: e2$1,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextVoid$3(s([
                                "",
                                "(0) = ",
                                ""
                              ], [
                                getPrint(e1$3),
                                getPrint(e2$1)
                              ]))
                    };
            }
            
          }
          break;
      case "PairSetRight" :
          if (es) {
            var match$2 = es.tl;
            if (match$2 && !match$2.tl) {
              var e1$4 = es.hd(false);
              var e2$2 = match$2.hd(false);
              return {
                      it: [
                        "PairSetRight",
                        {
                          hd: e1$4,
                          tl: {
                            hd: e2$2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextVoid$3(s([
                                "",
                                "(1) = ",
                                ""
                              ], [
                                getPrint(e1$4),
                                getPrint(e2$2)
                              ]))
                    };
            }
            
          }
          break;
      case "VecNew" :
          var es$1 = Core__List.map(es, (function (e) {
                  return e(false);
                }));
          var vecKeyword$1 = containsVecMutation.contents || containsVarMutation.contents ? "Buffer" : "";
          return {
                  it: [
                    "VecNew",
                    es$1
                  ],
                  ann: consumeContext$3(s([
                            "",
                            "(",
                            ")"
                          ], [
                            {
                              it: {
                                TAG: "Plain",
                                _0: vecKeyword$1
                              },
                              ann: undefined
                            },
                            {
                              it: concat(", ", Core__List.map(es$1, (function (e) {
                                          return getPrint(e);
                                        }))),
                              ann: undefined
                            }
                          ]))
                };
      case "VecRef" :
          if (es) {
            var match$3 = es.tl;
            if (match$3 && !match$3.tl) {
              var e1$5 = es.hd(true);
              var e2$3 = match$3.hd(false);
              return {
                      it: [
                        "VecRef",
                        {
                          hd: e1$5,
                          tl: {
                            hd: e2$3,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$3(s([
                                "",
                                "(",
                                ")"
                              ], [
                                getPrint(e1$5),
                                getPrint(e2$3)
                              ]))
                    };
            }
            
          }
          break;
      case "VecSet" :
          if (es) {
            var match$4 = es.tl;
            if (match$4) {
              var match$5 = match$4.tl;
              if (match$5 && !match$5.tl) {
                var e1$6 = es.hd(true);
                var e2$4 = match$4.hd(false);
                var e3 = match$5.hd(false);
                return {
                        it: [
                          "VecSet",
                          {
                            hd: e1$6,
                            tl: {
                              hd: e2$4,
                              tl: {
                                hd: e3,
                                tl: /* [] */0
                              }
                            }
                          }
                        ],
                        ann: consumeContextVoid$3(s([
                                  "",
                                  "(",
                                  ") = ",
                                  ""
                                ], [
                                  getPrint(e1$6),
                                  getPrint(e2$4),
                                  getPrint(e3)
                                ]))
                      };
              }
              
            }
            
          }
          break;
      case "VecLen" :
          if (es && !es.tl) {
            var e1$7 = es.hd(false);
            return {
                    it: [
                      "VecLen",
                      {
                        hd: e1$7,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$3(s([
                              "",
                              ".length"
                            ], [getPrint(e1$7)]))
                  };
          }
          break;
      case "Err" :
          if (es && !es.tl) {
            var e1$8 = es.hd(true);
            return {
                    it: [
                      "Err",
                      {
                        hd: e1$8,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$3(s([
                              "throw ",
                              ""
                            ], [getPrint(e1$8)]))
                  };
          }
          break;
      case "Not" :
          if (es && !es.tl) {
            var e1$9 = es.hd(true);
            return {
                    it: [
                      "Not",
                      {
                        hd: e1$9,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$3(s([
                              "! ",
                              ""
                            ], [getPrint(e1$9)]))
                  };
          }
          break;
      case "Print" :
          if (es && !es.tl) {
            var e1$10 = es.hd(false);
            return {
                    it: [
                      "Print",
                      {
                        hd: e1$10,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$3(s([
                              "println(",
                              ")"
                            ], [getPrint(e1$10)]))
                  };
          }
          break;
      case "Next" :
          if (es && !es.tl) {
            var e1$11 = es.hd(false);
            return {
                    it: [
                      "Next",
                      {
                        hd: e1$11,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$3(s([
                              "next(",
                              ")"
                            ], [getPrint(e1$11)]))
                  };
          }
          break;
      case "Cons" :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "List is not supported by Scala",
                Error: new Error()
              };
      
    }
  } else {
    if (p.TAG === "Arith") {
      var o = p._0;
      var os;
      switch (o) {
        case "Add" :
            os = "+";
            break;
        case "Sub" :
            os = "-";
            break;
        case "Mul" :
            os = "*";
            break;
        case "Div" :
            os = "/";
            break;
        
      }
      var es$2 = Core__List.map(es, (function (e) {
              return e(true);
            }));
      return {
              it: [
                {
                  TAG: "Arith",
                  _0: o
                },
                es$2
              ],
              ann: consumeContextWrap$3(concat(" " + os + " ", Core__List.map(es$2, (function (e) {
                              return getPrint(e);
                            }))))
            };
    }
    if (es) {
      var match$6 = es.tl;
      if (match$6 && !match$6.tl) {
        var o$1 = p._0;
        var os$1;
        switch (o$1) {
          case "Lt" :
              os$1 = "<";
              break;
          case "Eq" :
              os$1 = "eq";
              break;
          case "Gt" :
              os$1 = ">";
              break;
          case "Le" :
              os$1 = "<=";
              break;
          case "Ge" :
              os$1 = ">=";
              break;
          case "Ne" :
              os$1 = "!=";
              break;
          case "Equal" :
              os$1 = "==";
              break;
          
        }
        var e1$12 = es.hd(true);
        var e2$5 = match$6.hd(true);
        return {
                it: [
                  {
                    TAG: "Cmp",
                    _0: o$1
                  },
                  {
                    hd: e1$12,
                    tl: {
                      hd: e2$5,
                      tl: /* [] */0
                    }
                  }
                ],
                ann: consumeContext$3(s([
                          "",
                          " ",
                          " ",
                          ""
                        ], [
                          getPrint(e1$12),
                          {
                            it: {
                              TAG: "Plain",
                              _0: os$1
                            },
                            ann: undefined
                          },
                          getPrint(e2$5)
                        ]))
              };
      }
      
    }
    
  }
  var err = "Scala doesn't let you use " + toString$1(p) + " on " + Core__List.length(es).toString() + " parameter(s).";
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: err,
        Error: new Error()
      };
}

function funLike$3(op, x, xs, e) {
  return s([
              "",
              " ",
              " =",
              ""
            ], [
              {
                it: {
                  TAG: "Plain",
                  _0: op
                },
                ann: undefined
              },
              {
                it: exprAppToString$4(x, Core__List.map(xs, (function (x) {
                            return {
                                    it: s([
                                          "",
                                          " : Int"
                                        ], [x]),
                                    ann: undefined
                                  };
                          }))),
                ann: undefined
              },
              indentBlock(e, 2)
            ]);
}

function defvarToString$4(x, e) {
  var keyword = containsVarMutation.contents ? "var" : "val";
  return defvarLike$4(keyword + " ", x, e);
}

function deffunToString$4(f, xs, b) {
  return funLike$3("def", f, xs, b);
}

function defgenToString$4(f, xs, b) {
  return funLike$3("gen def", f, xs, b);
}

function exprSetToString$4(x, e) {
  return defvarLike$4("", x, e);
}

function exprLamToString$4(xs, b) {
  var xs_it = concat(", ", Core__List.map(xs, (function (x) {
              return {
                      it: group2(x, {
                            it: {
                              TAG: "Plain",
                              _0: " : Int"
                            },
                            ann: undefined
                          }),
                      ann: undefined
                    };
            })));
  var xs$1 = {
    it: xs_it,
    ann: undefined
  };
  return s([
              "(",
              ") =>",
              ""
            ], [
              xs$1,
              indentBlock(b, 2)
            ]);
}

function exprYieldToString$4(e) {
  return s([
              "yield ",
              ""
            ], [e]);
}

function exprBgnToString$3(es, e) {
  return listToString$4(Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ]));
}

function exprCndToString$4(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              {
                it: {
                  TAG: "Plain",
                  _0: ""
                },
                ann: undefined
              },
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Core__List.map(ebs$1, (function (param) {
          return {
                  it: s([
                        "if ",
                        ":",
                        "\nend"
                      ], [
                        param[0],
                        indentBlock(param[1], 2)
                      ]),
                  ann: undefined
                };
        }));
  return concat(" else ", ebs$2);
}

function exprIfToString$4(e_cnd, e_thn, e_els) {
  return s([
              "",
              " ? ",
              " : ",
              ""
            ], [
              e_cnd,
              e_thn,
              e_els
            ]);
}

function symbolToString$4(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            sourceLocation: param.ann,
            print: {
              TAG: "Plain",
              _0: printName$4(it)
            }
          }
        };
}

function printExp$4(param) {
  var it = param.it;
  var lift = function (param) {
    var print = param.ann;
    var it = param.it;
    return function (sourceLocation) {
      return {
              expr: (function (ctx) {
                  return {
                          it: it,
                          ann: {
                            sourceLocation: sourceLocation,
                            print: print.expr(ctx)
                          }
                        };
                }),
              stat: (function (ctx) {
                  var match = print.stat(ctx);
                  return [
                          match[0],
                          {
                            it: it,
                            ann: {
                              sourceLocation: sourceLocation,
                              print: match[1]
                            }
                          },
                          match[2]
                        ];
                })
            };
    };
  };
  var e;
  switch (it.TAG) {
    case "Con" :
        var c = it._0;
        e = lift({
              it: {
                TAG: "Con",
                _0: c
              },
              ann: consumeContext$3({
                    TAG: "Plain",
                    _0: constantToString$4(c)
                  })
            });
        break;
    case "Ref" :
        var x = it._0;
        e = lift({
              it: {
                TAG: "Ref",
                _0: x
              },
              ann: consumeContext$3({
                    TAG: "Plain",
                    _0: printName$4(x)
                  })
            });
        break;
    case "Set" :
        var x$1 = symbolToString$4(it._0);
        var e$1 = printExp$4(it._1);
        var e$2 = e$1.expr(false);
        e = lift({
              it: {
                TAG: "Set",
                _0: x$1,
                _1: e$2
              },
              ann: consumeContextVoid$3(exprSetToString$4(getNamePrint(x$1), getPrint(e$2)))
            });
        break;
    case "Lam" :
        var xs = Core__List.map(it._0, symbolToString$4);
        var b = printBlock$4(it._1, "Return");
        e = lift({
              it: {
                TAG: "Lam",
                _0: xs,
                _1: b
              },
              ann: consumeContextWrap$3(exprLamToString$4(Core__List.map(xs, (function (x) {
                              return getNamePrint(x);
                            })), getBlockPrint(b)))
            });
        break;
    case "Let" :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "let-expressions are not supported by Scala",
              Error: new Error()
            };
    case "Letrec" :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "letrec-expressions are not supported by Scala",
              Error: new Error()
            };
    case "AppPrm" :
        var es = Core__List.map(it._1, (function (e) {
                return function (b) {
                  var e$1 = printExp$4(e);
                  return e$1.expr(b);
                };
              }));
        var match = exprAppPrmToString$3(it._0, es);
        var match$1 = match.it;
        e = lift({
              it: {
                TAG: "AppPrm",
                _0: match$1[0],
                _1: match$1[1]
              },
              ann: match.ann
            });
        break;
    case "App" :
        var e$3 = printExp$4(it._0);
        var e$4 = e$3.expr(true);
        var es$1 = Core__List.map(it._1, (function (e) {
                var e$1 = printExp$4(e);
                return e$1.expr(false);
              }));
        e = lift({
              it: {
                TAG: "App",
                _0: e$4,
                _1: es$1
              },
              ann: consumeContext$3(exprAppToString$4(getPrint(e$4), Core__List.map(es$1, (function (e) {
                              return getPrint(e);
                            }))))
            });
        break;
    case "Bgn" :
        var es$2 = Core__List.map(it._0, (function (e) {
                var e$1 = printExp$4(e);
                return e$1.expr(false);
              }));
        var e$5 = printExp$4(it._1);
        var e$6 = e$5.expr(false);
        e = lift({
              it: {
                TAG: "Bgn",
                _0: es$2,
                _1: e$6
              },
              ann: consumeContext$3(exprBgnToString$3(Core__List.map(es$2, (function (e) {
                              return getPrint(e);
                            })), getPrint(e$6)))
            });
        break;
    case "If" :
        var e$7 = printExp$4(it._0);
        var e_cnd = e$7.expr(true);
        var e$8 = printExp$4(it._1);
        var e_thn = e$8.expr(true);
        var e$9 = printExp$4(it._2);
        var e_els = e$9.expr(true);
        e = lift({
              it: {
                TAG: "If",
                _0: e_cnd,
                _1: e_thn,
                _2: e_els
              },
              ann: consumeContextWrap$3(exprIfToString$4(getPrint(e_cnd), getPrint(e_thn), getPrint(e_els)))
            });
        break;
    case "Cnd" :
        var ob = it._1;
        var ebs = it._0;
        e = (function (sourceLocation) {
            return {
                    expr: (function (param) {
                        throw {
                              RE_EXN_ID: SMoLPrintError,
                              _1: "Multi-armed conditionals in Scala is not supported by the translator yet.",
                              Error: new Error()
                            };
                      }),
                    stat: (function (ctx) {
                        var ebs$1 = Core__List.map(ebs, (function (eb) {
                                var e = printExp$4(eb[0]);
                                return [
                                        e.expr(false),
                                        printBlock$4(eb[1], ctx)
                                      ];
                              }));
                        var ob$1 = obToString$3(ob, ctx);
                        return [
                                "",
                                {
                                  it: {
                                    TAG: "Cnd",
                                    _0: ebs$1,
                                    _1: ob$1
                                  },
                                  ann: {
                                    sourceLocation: sourceLocation,
                                    print: exprCndToString$4(Core__List.map(ebs$1, (function (param) {
                                                return [
                                                        getPrint(param[0]),
                                                        getBlockPrint(param[1])
                                                      ];
                                              })), Core__Option.map(ob$1, (function (b) {
                                                return getBlockPrint(b);
                                              })))
                                  }
                                },
                                ""
                              ];
                      })
                  };
          });
        break;
    case "GLam" :
        var xs$1 = Core__List.map(it._0, symbolToString$4);
        var b$1 = printBlock$4(it._1, "Return");
        Core__List.map(xs$1, (function (x) {
                return getNamePrint(x);
              }));
        getBlockPrint(b$1);
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "generators are not supported yet in Scala translation.",
              Error: new Error()
            };
        e = lift({
              it: {
                TAG: "GLam",
                _0: xs$1,
                _1: b$1
              },
              ann: consumeContextWrap$3(undefined)
            });
        break;
    case "Yield" :
        var e$10 = printExp$4(it._0);
        var e$11 = e$10.expr(false);
        e = lift({
              it: {
                TAG: "Yield",
                _0: e$11
              },
              ann: consumeContextWrap$3(exprYieldToString$4(getPrint(e$11)))
            });
        break;
    
  }
  return e(param.ann);
}

function printDef$4(param) {
  var d = param.it;
  var match;
  switch (d.TAG) {
    case "Var" :
        var x = symbolToString$4(d._0);
        var e = printExp$4(d._1);
        var e$1 = e.expr(false);
        match = [
          "",
          {
            it: {
              TAG: "Var",
              _0: x,
              _1: e$1
            },
            ann: defvarToString$4(getNamePrint(x), getPrint(e$1))
          },
          ""
        ];
        break;
    case "Fun" :
        var f = symbolToString$4(d._0);
        var xs = Core__List.map(d._1, symbolToString$4);
        var b = printBlock$4(d._2, "Return");
        match = [
          "",
          {
            it: {
              TAG: "Fun",
              _0: f,
              _1: xs,
              _2: b
            },
            ann: deffunToString$4(getNamePrint(f), Core__List.map(xs, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b))
          },
          ""
        ];
        break;
    case "GFun" :
        var f$1 = symbolToString$4(d._0);
        var xs$1 = Core__List.map(d._1, symbolToString$4);
        var b$1 = printBlock$4(d._2, "Return");
        match = [
          "",
          {
            it: {
              TAG: "GFun",
              _0: f$1,
              _1: xs$1,
              _2: b$1
            },
            ann: defgenToString$4(getNamePrint(f$1), Core__List.map(xs$1, (function (x) {
                        return getNamePrint(x);
                      })), getBlockPrint(b$1))
          },
          ""
        ];
        break;
    
  }
  var d$1 = match[1];
  return [
          match[0],
          {
            it: d$1.it,
            ann: {
              sourceLocation: param.ann,
              print: d$1.ann
            }
          },
          match[2]
        ];
}

function obToString$3(ob, ctx) {
  return Core__Option.map(ob, (function (b) {
                return printBlock$4(b, ctx);
              }));
}

function printBlock$4(param, context) {
  var ann = param.ann;
  var b = param.it;
  if (b.TAG === "BRet") {
    var e = printExp$4(b._0);
    var match = e.stat(context);
    var e$1 = match[1];
    var print = {
      TAG: "Group",
      _0: {
        hd: {
          it: {
            TAG: "Plain",
            _0: match[0]
          },
          ann: undefined
        },
        tl: {
          hd: getPrint(e$1),
          tl: {
            hd: {
              it: {
                TAG: "Plain",
                _0: match[2]
              },
              ann: undefined
            },
            tl: /* [] */0
          }
        }
      }
    };
    return {
            it: {
              TAG: "BRet",
              _0: e$1
            },
            ann: {
              sourceLocation: ann,
              print: print
            }
          };
  }
  var t = printTerm$4(b._0, "Step");
  var b$1 = printBlock$4(b._1, context);
  var print$1 = {
    TAG: "Group",
    _0: {
      hd: getTermPrint(t),
      tl: {
        hd: {
          it: {
            TAG: "Plain",
            _0: "\n"
          },
          ann: undefined
        },
        tl: {
          hd: getBlockPrint(b$1),
          tl: /* [] */0
        }
      }
    }
  };
  return {
          it: {
            TAG: "BCons",
            _0: t,
            _1: b$1
          },
          ann: {
            sourceLocation: ann,
            print: print$1
          }
        };
}

function printTerm$4(param, ctx) {
  var sourceLocation = param.ann;
  var it = param.it;
  if (it.TAG === "Def") {
    var match = printDef$4(it._0);
    var it$1 = match[1];
    return {
            it: {
              TAG: "Def",
              _0: it$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: wrap(match[0], getDefinitionPrint(it$1), match[2])
            }
          };
  }
  var e = printExp$4(it._0);
  var match$1 = e.stat(ctx);
  var it$2 = match$1[1];
  return {
          it: {
            TAG: "Exp",
            _0: it$2
          },
          ann: {
            sourceLocation: sourceLocation,
            print: wrap(match$1[0], getPrint(it$2), match$1[2])
          }
        };
}

function printOutputlet$4(o) {
  var p = function (v) {
    switch (v.TAG) {
      case "Ref" :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "Can't print circular data structure in Scala",
                Error: new Error()
              };
      case "Con" :
          return constantToString$4(v._0);
      case "Struct" :
          var content = v._1;
          var i;
          if (v._0 !== undefined) {
            throw {
                  RE_EXN_ID: SMoLPrintError,
                  _1: "Can't print circular data structure in Scala",
                  Error: new Error()
                };
          }
          i = "";
          var content$1;
          if (content.TAG === "Lst") {
            throw {
                  RE_EXN_ID: SMoLPrintError,
                  _1: "Lists are not supported in Scala.",
                  Error: new Error()
                };
          }
          content$1 = "Buffer(" + Core__List.toArray(Core__List.map(content._0, p)).join(", ") + ")";
          return i + content$1;
      
    }
  };
  if (typeof o !== "object") {
    return "error";
  } else {
    return p(o._0);
  }
}

function printOutput$4(sepOpt, os) {
  var sep = sepOpt !== undefined ? sepOpt : " ";
  return Core__List.toArray(Core__List.map(os, printOutputlet$4)).join(sep);
}

function printProgramFull$4(insertPrintTopLevel, p) {
  var p$1 = insertPrintTopLevel ? insertTopLevelPrint(p) : p;
  var s$1 = printProgram(insertPrintTopLevel, p$1);
  containsVarMutation.contents = Js_string.includes("(set!", s$1);
  containsVecMutation.contents = Js_string.includes("vec-set!", s$1) || Js_string.includes("set-left!", s$1) || Js_string.includes("set-right!", s$1);
  var print = function (param) {
    var sourceLocation = param.ann;
    var it = param.it;
    if (typeof it !== "object") {
      return {
              it: "PNil",
              ann: {
                sourceLocation: sourceLocation,
                print: {
                  TAG: "Group",
                  _0: /* [] */0
                }
              }
            };
    }
    var p = it._1;
    var t = printTerm$4(it._0, "Step");
    var tmp = p.it;
    if (typeof tmp !== "object") {
      return {
              it: {
                TAG: "PCons",
                _0: t,
                _1: {
                  it: "PNil",
                  ann: {
                    sourceLocation: {
                      begin: sourceLocation.end,
                      end: sourceLocation.end
                    },
                    print: {
                      TAG: "Plain",
                      _0: ""
                    }
                  }
                }
              },
              ann: {
                sourceLocation: sourceLocation,
                print: s([
                      "",
                      ""
                    ], [getTermPrint(t)])
              }
            };
    }
    var p$1 = print(p);
    return {
            it: {
              TAG: "PCons",
              _0: t,
              _1: p$1
            },
            ann: {
              sourceLocation: sourceLocation,
              print: concat2(getTermPrint(t), "\n", getProgramPrint(p$1))
            }
          };
  };
  return print(p$1);
}

function printProgram$4(insertPrintTopLevel, p) {
  return toString(printProgramFull$4(insertPrintTopLevel, p).ann.print);
}

function printStandAloneTerm$4(param) {
  var it = param.it;
  var tmp;
  if (it.TAG === "Def") {
    var match = printDef$4(it._0);
    tmp = match[1].ann.print;
  } else {
    var e = printExp$4(it._0);
    var match$1 = e.stat("Step");
    tmp = match$1[1].ann.print;
  }
  return toString(tmp);
}

var SCPrinter = {
  printName: printName$4,
  printOutputlet: printOutputlet$4,
  printOutput: printOutput$4,
  printStandAloneTerm: printStandAloneTerm$4,
  printProgram: printProgram$4,
  printProgramFull: printProgramFull$4
};

function toString$8(t) {
  switch (t.TAG) {
    case "ParseError" :
        return toString$6(t._0);
    case "PrintError" :
    case "KindError" :
        return t._0;
    
  }
}

var TranslateError = {
  toString: toString$8
};

var SMoLTranslateError = /* @__PURE__ */Caml_exceptions.create("SMoL.SMoLTranslateError");

function programAsTerm(p) {
  var match = p.it;
  if (typeof match !== "object") {
    throw {
          RE_EXN_ID: SMoLTranslateError,
          _1: {
            TAG: "KindError",
            _0: "Expecting a term, given a program"
          },
          Error: new Error()
        };
  }
  var tmp = match._1.it;
  if (typeof tmp !== "object") {
    return match._0;
  }
  throw {
        RE_EXN_ID: SMoLTranslateError,
        _1: {
          TAG: "KindError",
          _0: "Expecting a term, given a program"
        },
        Error: new Error()
      };
}

function translateOutput(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput(undefined, output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateStandAloneTerm(src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printStandAloneTerm(programAsTerm(p));
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var SMoLTranslator = {
  translateName: printName,
  translateOutput: translateOutput,
  translateStandAloneTerm: translateStandAloneTerm,
  translateProgram: translateProgram,
  translateProgramFull: translateProgramFull
};

function translateOutput$1(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput$1(undefined, output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateStandAloneTerm$1(src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printStandAloneTerm$1(programAsTerm(p));
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram$1(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram$1(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull$1(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull$1(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var JSTranslator = {
  translateName: printName$1,
  translateOutput: translateOutput$1,
  translateStandAloneTerm: translateStandAloneTerm$1,
  translateProgram: translateProgram$1,
  translateProgramFull: translateProgramFull$1
};

function translateOutput$2(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput$2(undefined, output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateStandAloneTerm$2(src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printStandAloneTerm$2(programAsTerm(p));
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram$2(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram$2(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull$2(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull$2(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var PYTranslator = {
  translateName: printName$2,
  translateOutput: translateOutput$2,
  translateStandAloneTerm: translateStandAloneTerm$2,
  translateProgram: translateProgram$2,
  translateProgramFull: translateProgramFull$2
};

function translateOutput$3(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput$3(undefined, output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateStandAloneTerm$3(src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printStandAloneTerm$3(programAsTerm(p));
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram$3(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram$3(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull$3(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull$3(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var PCTranslator = {
  translateName: printName$3,
  translateOutput: translateOutput$3,
  translateStandAloneTerm: translateStandAloneTerm$3,
  translateProgram: translateProgram$3,
  translateProgramFull: translateProgramFull$3
};

function translateOutput$4(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput$4(undefined, output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateStandAloneTerm$4(src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printStandAloneTerm$4(programAsTerm(p));
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram$4(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram$4(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull$4(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "ParseError",
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull$4(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: "PrintError",
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var SCTranslator = {
  translateName: printName$4,
  translateOutput: translateOutput$4,
  translateStandAloneTerm: translateStandAloneTerm$4,
  translateProgram: translateProgram$4,
  translateProgramFull: translateProgramFull$4
};

var Print = {
  toString: toString,
  toSourceMap: toSourceMap,
  map: map,
  concat2: concat2,
  concat: concat,
  pad: pad,
  dummy: dummy,
  s: s
};

var Parser = {
  parseOutput: parseOutput,
  parseProgram: parseProgram
};

var SMoLPrinter = {
  printName: printName,
  printOutputlet: printOutputlet,
  printOutput: printOutput,
  printStandAloneTerm: printStandAloneTerm,
  printProgram: printProgram,
  printProgramFull: printProgramFull
};

export {
  Print ,
  Primitive ,
  xsOfBlock ,
  xsOfProgram ,
  NodeKind ,
  SExprKind ,
  Arity ,
  TermKind ,
  ParseError ,
  SMoLParseError ,
  Parser ,
  SMoLPrintError ,
  getPrint ,
  getNamePrint ,
  getBindPrint ,
  getBlockPrint ,
  getDefinitionPrint ,
  getTermPrint ,
  getProgramPrint ,
  SMoLPrinter ,
  JSPrinter ,
  PYPrinter ,
  PCPrinter ,
  SCPrinter ,
  TranslateError ,
  SMoLTranslateError ,
  SMoLTranslator ,
  JSTranslator ,
  PYTranslator ,
  PCTranslator ,
  SCTranslator ,
}
/* No side effect */
