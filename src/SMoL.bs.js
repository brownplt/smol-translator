// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as $$String from "rescript/lib/es6/string.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as SExpression from "@lukuangchen/s-expression/src/SExpression.bs.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function toString(t) {
  if (typeof t === "number") {
    switch (t) {
      case /* PairNew */0 :
          return "mpair";
      case /* PairRefLeft */1 :
          return "left";
      case /* PairRefRight */2 :
          return "right";
      case /* PairSetLeft */3 :
          return "set-left!";
      case /* PairSetRight */4 :
          return "set-right!";
      case /* VecNew */5 :
          return "mvec";
      case /* VecRef */6 :
          return "vec-ref";
      case /* VecSet */7 :
          return "vec-set!";
      case /* VecLen */8 :
          return "vec-len";
      case /* Err */9 :
          return "error";
      case /* Not */10 :
          return "not";
      case /* Print */11 :
          return "print";
      case /* Next */12 :
          return "next";
      case /* Cons */13 :
          return "cons";
      
    }
  } else if (t.TAG === /* Arith */0) {
    switch (t._0) {
      case /* Add */0 :
          return "+";
      case /* Sub */1 :
          return "-";
      case /* Mul */2 :
          return "*";
      case /* Div */3 :
          return "/";
      
    }
  } else {
    switch (t._0) {
      case /* Lt */0 :
          return "<";
      case /* Eq */1 :
          return "eq?";
      case /* Gt */2 :
          return ">";
      case /* Le */3 :
          return "<=";
      case /* Ge */4 :
          return ">=";
      case /* Ne */5 :
          return "!=";
      
    }
  }
}

var Primitive = {
  toString: toString
};

function mapAnn(f, param) {
  return {
          it: Curry._1(f, param.it),
          ann: param.ann
        };
}

function toString$1(t) {
  if (t) {
    return "list";
  } else {
    return "atom";
  }
}

var SExprKind = {
  toString: toString$1
};

function toString$2(t) {
  switch (t) {
    case /* ExactlyOne */0 :
        return "exactly one";
    case /* ExactlyTwo */1 :
        return "exactly two";
    case /* ExactlyThree */2 :
        return "exactly three";
    case /* OneThenMany */3 :
        return "one followed by many";
    case /* ManyThenOne */4 :
        return "many followed by one";
    case /* OneThenManyThenOne */5 :
        return "one followed by several followed by one";
    
  }
}

var Arity = {
  toString: toString$2
};

function toString$3(t) {
  if (t) {
    return "expression";
  } else {
    return "definition";
  }
}

var TermKind = {
  toString: toString$3
};

function toString$4(t) {
  switch (t.TAG | 0) {
    case /* SExprParseError */0 :
        return "expecting a (valid) s-expression, but the input is not: " + t._0 + "";
    case /* SExprKindError */1 :
        return "expecting a " + t._1 + ", given " + SExpression.toString(t._2) + "";
    case /* SExprArityError */2 :
        return "expecting " + t._1 + ", given " + $$String.concat(" ", Belt_List.map(t._2, SExpression.toString)) + "";
    case /* LiteralSymbolError */3 :
        return "expecting a literal value, given a symbol " + t._0 + "";
    case /* LiteralListError */4 :
        return "expecting a constant or a vector, given " + SExpression.toString(t._0) + "";
    case /* TermKindError */5 :
        var term = t._2;
        return "expecting " + t._1 + ", given something else at " + SExpression.SrcLoc.toString(term.ann.begin) + "-" + SExpression.SrcLoc.toString(term.ann.end) + "";
    
  }
}

var ParseError = {
  toString: toString$4
};

var SMoLParseError = /* @__PURE__ */Caml_exceptions.create("SMoL.SMoLParseError");

function makeBlock(ts, e) {
  return {
          it: [
            ts,
            e
          ],
          ann: {
            begin: Belt_Option.getWithDefault(Belt_Option.map(Belt_List.head(ts), (function (t) {
                        return t.ann.begin;
                      })), e.ann.begin),
            end: e.ann.end
          }
        };
}

function constant_of_atom(atom) {
  if (atom.TAG === /* Str */0) {
    return {
            TAG: /* Str */2,
            _0: atom._0
          };
  }
  var x = atom._0;
  switch (x) {
    case "#f" :
        return {
                TAG: /* Lgc */1,
                _0: false
              };
    case "#t" :
        return {
                TAG: /* Lgc */1,
                _0: true
              };
    default:
      var tryNum = Belt_Float.fromString(x);
      if (tryNum !== undefined) {
        return {
                TAG: /* Num */0,
                _0: tryNum
              };
      }
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: {
              TAG: /* LiteralSymbolError */3,
              _0: x
            },
            Error: new Error()
          };
  }
}

function outputletOfSExpr(e) {
  var it = e.it;
  if (it.TAG === /* Atom */0) {
    var match = it._0;
    if (match.TAG !== /* Str */0 && match._0 === "error") {
      return /* OErr */0;
    }
    
  }
  var p = function (e) {
    var atom = e.it;
    if (atom.TAG === /* Atom */0) {
      return {
              TAG: /* Con */0,
              _0: constant_of_atom(atom._0)
            };
    } else if (atom._0) {
      return {
              TAG: /* Vec */2,
              _0: Belt_List.map(atom._2, p)
            };
    } else {
      return {
              TAG: /* Lst */1,
              _0: Belt_List.map(atom._2, p)
            };
    }
  };
  return /* OVal */{
          _0: p(e)
        };
}

function parseValue(e) {
  var ann = e.ann;
  var it = e.it;
  if (it.TAG === /* Atom */0) {
    return {
            it: {
              TAG: /* Con */0,
              _0: constant_of_atom(it._0)
            },
            ann: ann
          };
  }
  if (it._0) {
    var es = Belt_List.map(it._2, parseValue);
    return {
            it: {
              TAG: /* AppPrm */6,
              _0: /* VecNew */5,
              _1: es
            },
            ann: ann
          };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* LiteralListError */4,
          _0: e
        },
        Error: new Error()
      };
}

function as_id(context, e) {
  var match = e.it;
  if (match.TAG === /* Atom */0) {
    var x = match._0;
    if (x.TAG !== /* Str */0) {
      return {
              it: x._0,
              ann: e.ann
            };
    }
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: /* SExprKindError */1,
            _0: /* Atom */0,
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprKindError */1,
          _0: /* Atom */0,
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function as_list(context, e) {
  var it = e.it;
  if (it.TAG === /* Atom */0) {
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: /* SExprKindError */1,
            _0: /* List */1,
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  if (it._0) {
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: /* SExprKindError */1,
            _0: /* List */1,
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  return {
          it: it._2,
          ann: e.ann
        };
}

function as_one_then_many(context, es) {
  if (es) {
    return [
            es.hd,
            es.tl
          ];
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* OneThenMany */3,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_many_then_one(context, es) {
  if (es) {
    var e1 = es.hd;
    var match = Belt_List.reverse(es.tl);
    if (match) {
      return [
              {
                hd: e1,
                tl: Belt_List.reverse(match.tl)
              },
              match.hd
            ];
    } else {
      return [
              /* [] */0,
              e1
            ];
    }
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ManyThenOne */4,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_one(context, es) {
  if (es) {
    if (es.tl) {
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: {
              TAG: /* SExprArityError */2,
              _0: /* ExactlyOne */0,
              _1: context,
              _2: es
            },
            Error: new Error()
          };
    }
    return es.hd;
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ExactlyOne */0,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_two(context, es) {
  if (es) {
    var match = es.tl;
    if (match && !match.tl) {
      return [
              es.hd,
              match.hd
            ];
    }
    
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ExactlyTwo */1,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_three(context, es) {
  if (es) {
    var match = es.tl;
    if (match) {
      var match$1 = match.tl;
      if (match$1 && !match$1.tl) {
        return [
                es.hd,
                match.hd,
                match$1.hd
              ];
      }
      
    }
    
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ExactlyThree */2,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_one_then_many_then_one(context, es) {
  if (es) {
    var match = es.tl;
    if (match) {
      var e2 = match.hd;
      var e1 = es.hd;
      var match$1 = Belt_List.reverse(match.tl);
      if (match$1) {
        return [
                e1,
                {
                  hd: e2,
                  tl: Belt_List.reverse(match$1.tl)
                },
                match$1.hd
              ];
      } else {
        return [
                e1,
                /* [] */0,
                e2
              ];
      }
    }
    throw {
          RE_EXN_ID: SMoLParseError,
          _1: {
            TAG: /* SExprArityError */2,
            _0: /* OneThenManyThenOne */5,
            _1: context,
            _2: es
          },
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* OneThenManyThenOne */5,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_expr(context, e) {
  var it = e.it;
  if (it.TAG !== /* Def */0) {
    return {
            it: it._0,
            ann: e.ann
          };
  }
  throw {
        RE_EXN_ID: SMoLParseError,
        _1: {
          TAG: /* TermKindError */5,
          _0: /* Expression */1,
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function expr_of_atom(atom) {
  if (atom.TAG === /* Str */0) {
    return {
            TAG: /* Con */0,
            _0: {
              TAG: /* Str */2,
              _0: atom._0
            }
          };
  }
  var x = atom._0;
  switch (x) {
    case "#f" :
        return {
                TAG: /* Con */0,
                _0: {
                  TAG: /* Lgc */1,
                  _0: false
                }
              };
    case "#t" :
        return {
                TAG: /* Con */0,
                _0: {
                  TAG: /* Lgc */1,
                  _0: true
                }
              };
    default:
      var tryNum = Belt_Option.map(Belt_Float.fromString(x), (function (n) {
              return {
                      TAG: /* Con */0,
                      _0: {
                        TAG: /* Num */0,
                        _0: n
                      }
                    };
            }));
      return Belt_Option.getWithDefault(tryNum, {
                  TAG: /* Ref */1,
                  _0: x
                });
  }
}

function letstar(ann, xes, body) {
  if (xes) {
    var xes$1 = xes.tl;
    var xe = xes.hd;
    if (xes$1) {
      return {
              it: {
                TAG: /* Let */4,
                _0: {
                  hd: xe,
                  tl: /* [] */0
                },
                _1: makeBlock(/* [] */0, letstar({
                          begin: Belt_Option.getWithDefault(Belt_Option.map(Belt_List.head(xes$1), (function (xe) {
                                      return xe.ann.begin;
                                    })), body.ann.begin),
                          end: body.ann.end
                        }, xes$1, body))
              },
              ann: ann
            };
    } else {
      return {
              it: {
                TAG: /* Let */4,
                _0: {
                  hd: xe,
                  tl: /* [] */0
                },
                _1: body
              },
              ann: ann
            };
    }
  }
  var match = body.it;
  if (match[0]) {
    return {
            it: {
              TAG: /* Let */4,
              _0: /* [] */0,
              _1: body
            },
            ann: ann
          };
  } else {
    return match[1];
  }
}

function parseTerm(e) {
  var ann = e.ann;
  var atom = e.it;
  if (atom.TAG === /* Atom */0) {
    return {
            it: {
              TAG: /* Exp */1,
              _0: expr_of_atom(atom._0)
            },
            ann: ann
          };
  }
  if (atom._0) {
    var es = Belt_List.map(atom._2, parseValue);
    return {
            it: {
              TAG: /* Exp */1,
              _0: {
                TAG: /* AppPrm */6,
                _0: /* VecNew */5,
                _1: es
              }
            },
            ann: ann
          };
  }
  var es$1 = atom._2;
  if (es$1) {
    var match = es$1.hd.it;
    if (match.TAG === /* Atom */0) {
      var match$1 = match._0;
      if (match$1.TAG !== /* Str */0) {
        switch (match$1._0) {
          case "!=" :
              return makeAppPrm(ann, {
                          TAG: /* Cmp */1,
                          _0: /* Ne */5
                        }, es$1.tl);
          case "*" :
              return makeAppPrm(ann, {
                          TAG: /* Arith */0,
                          _0: /* Mul */2
                        }, es$1.tl);
          case "+" :
              return makeAppPrm(ann, {
                          TAG: /* Arith */0,
                          _0: /* Add */0
                        }, es$1.tl);
          case "-" :
              return makeAppPrm(ann, {
                          TAG: /* Arith */0,
                          _0: /* Sub */1
                        }, es$1.tl);
          case "/" :
              return makeAppPrm(ann, {
                          TAG: /* Arith */0,
                          _0: /* Div */3
                        }, es$1.tl);
          case "<" :
              return makeAppPrm(ann, {
                          TAG: /* Cmp */1,
                          _0: /* Lt */0
                        }, es$1.tl);
          case "<=" :
              return makeAppPrm(ann, {
                          TAG: /* Cmp */1,
                          _0: /* Le */3
                        }, es$1.tl);
          case ">" :
              return makeAppPrm(ann, {
                          TAG: /* Cmp */1,
                          _0: /* Gt */2
                        }, es$1.tl);
          case ">=" :
              return makeAppPrm(ann, {
                          TAG: /* Cmp */1,
                          _0: /* Ge */4
                        }, es$1.tl);
          case "begin" :
              var match$2 = as_many_then_one("one or more expressions", es$1.tl);
              var terms = Belt_List.map(Belt_List.map(match$2[0], parseTerm), (function (param) {
                      return as_expr("an expression", param);
                    }));
              var result = as_expr("an expression", parseTerm(match$2[1]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Bgn */8,
                          _0: terms,
                          _1: result
                        }
                      },
                      ann: ann
                    };
          case "cond" :
              var branches = Belt_List.map(Belt_List.map(es$1.tl, (function (v) {
                          return as_list("a `cond` branch", v).it;
                        })), (function (param) {
                      return as_one_then_many_then_one("the condition followed by the branch", param);
                    }));
              var _parsed = /* [] */0;
              var _branches = branches;
              while(true) {
                var branches$1 = _branches;
                var parsed = _parsed;
                if (!branches$1) {
                  return {
                          it: {
                            TAG: /* Exp */1,
                            _0: {
                              TAG: /* Cnd */10,
                              _0: Belt_List.reverse(parsed),
                              _1: undefined
                            }
                          },
                          ann: ann
                        };
                }
                var match$3 = branches$1.hd;
                var $$case = match$3[0];
                var match$4 = $$case.it;
                if (match$4.TAG === /* Atom */0) {
                  var match$5 = match$4._0;
                  if (match$5.TAG !== /* Str */0 && match$5._0 === "else" && !branches$1.tl) {
                    var terms$1 = Belt_List.map(match$3[1], parseTerm);
                    var result$1 = as_expr("an expression", parseTerm(match$3[2]));
                    return {
                            it: {
                              TAG: /* Exp */1,
                              _0: {
                                TAG: /* Cnd */10,
                                _0: Belt_List.reverse(parsed),
                                _1: makeBlock(terms$1, result$1)
                              }
                            },
                            ann: ann
                          };
                  }
                  
                }
                var $$case$1 = as_expr("a (conditional) expression", parseTerm($$case));
                var terms$2 = Belt_List.map(match$3[1], parseTerm);
                var result$2 = as_expr("an expression", parseTerm(match$3[2]));
                _branches = branches$1.tl;
                _parsed = {
                  hd: [
                    $$case$1,
                    makeBlock(terms$2, result$2)
                  ],
                  tl: parsed
                };
                continue ;
              };
          case "deffun" :
              var match$6 = as_one_then_many_then_one("a function header and a body", es$1.tl);
              var match$7 = as_one_then_many("function name followed by parameters", as_list("function name and parameters", match$6[0]).it);
              var fun = as_id("a function name", match$7[0]);
              var args = Belt_List.map(match$7[1], (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$3 = Belt_List.map(match$6[1], parseTerm);
              var result$3 = as_expr("an expression to be returned", parseTerm(match$6[2]));
              return {
                      it: {
                        TAG: /* Def */0,
                        _0: {
                          TAG: /* Fun */1,
                          _0: fun,
                          _1: args,
                          _2: makeBlock(terms$3, result$3)
                        }
                      },
                      ann: ann
                    };
          case "defgen" :
              var match$8 = as_one_then_many_then_one("a generator header and a body", es$1.tl);
              var match$9 = as_one_then_many("generator name followed by parameters", as_list("generator name and parameters", match$8[0]).it);
              var fun$1 = as_id("a generator name", match$9[0]);
              var args$1 = Belt_List.map(match$9[1], (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$4 = Belt_List.map(match$8[1], parseTerm);
              var result$4 = as_expr("an expression to be returned", parseTerm(match$8[2]));
              return {
                      it: {
                        TAG: /* Def */0,
                        _0: {
                          TAG: /* GFun */2,
                          _0: fun$1,
                          _1: args$1,
                          _2: makeBlock(terms$4, result$4)
                        }
                      },
                      ann: ann
                    };
          case "defvar" :
              var match$10 = as_two("a variable and an expression", es$1.tl);
              var x = as_id("a variable name", match$10[0]);
              var e$1 = as_expr("an expression", parseTerm(match$10[1]));
              return {
                      it: {
                        TAG: /* Def */0,
                        _0: {
                          TAG: /* Var */0,
                          _0: x,
                          _1: e$1
                        }
                      },
                      ann: ann
                    };
          case "=" :
          case "eq?" :
              return makeAppPrm(ann, {
                          TAG: /* Cmp */1,
                          _0: /* Eq */1
                        }, es$1.tl);
          case "error" :
              return makeAppPrm(ann, /* Err */9, es$1.tl);
          case "generator" :
              var match$11 = as_one_then_many_then_one("the generator signature followed by the function body", es$1.tl);
              var args$2 = Belt_List.map(as_list("generator parameters", match$11[0]).it, (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$5 = Belt_List.map(match$11[1], parseTerm);
              var result$5 = as_expr("an expression to be returned", parseTerm(match$11[2]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* GLam */11,
                          _0: args$2,
                          _1: makeBlock(terms$5, result$5)
                        }
                      },
                      ann: ann
                    };
          case "if" :
              var match$12 = as_three("three expressions (i.e., a condition, the \"then\" branch, and the \"else\" branch)", es$1.tl);
              var e_cnd = as_expr("a (conditional) expression", parseTerm(match$12[0]));
              var e_thn = as_expr("an expression", parseTerm(match$12[1]));
              var e_els = as_expr("an expression", parseTerm(match$12[2]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* If */9,
                          _0: e_cnd,
                          _1: e_thn,
                          _2: e_els
                        }
                      },
                      ann: ann
                    };
          case "lambda" :
              var match$13 = as_one_then_many_then_one("the function signature followed by the function body", es$1.tl);
              var args$3 = Belt_List.map(as_list("function parameters", match$13[0]).it, (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$6 = Belt_List.map(match$13[1], parseTerm);
              var result$6 = as_expr("an expression to be returned", parseTerm(match$13[2]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Lam */3,
                          _0: args$3,
                          _1: makeBlock(terms$6, result$6)
                        }
                      },
                      ann: ann
                    };
          case "left" :
              return makeAppPrm(ann, /* PairRefLeft */1, es$1.tl);
          case "let" :
              var match$14 = as_one_then_many_then_one("the bindings followed by the body", es$1.tl);
              var xes = Belt_List.map(Belt_List.map(as_list("variable-expression pairs", match$14[0]).it, (function (param) {
                          return as_list("a variable and an expression", param);
                        })), (function (param) {
                      return mapAnn((function (xe) {
                                    return as_two("a variable and an expression", xe);
                                  }), param);
                    }));
              var xes$1 = Belt_List.map(xes, (function (param) {
                      return mapAnn((function (param) {
                                    var x = as_id("a variable to be bound", param[0]);
                                    var e = as_expr("an expression", parseTerm(param[1]));
                                    return [
                                            x,
                                            e
                                          ];
                                  }), param);
                    }));
              var ts = Belt_List.map(match$14[1], parseTerm);
              var result$7 = as_expr("an expression to be return", parseTerm(match$14[2]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Let */4,
                          _0: xes$1,
                          _1: makeBlock(ts, result$7)
                        }
                      },
                      ann: ann
                    };
          case "let*" :
              var match$15 = as_one_then_many_then_one("the bindings followed by the body", es$1.tl);
              var xes$2 = Belt_List.map(Belt_List.map(as_list("variable-expression pairs", match$15[0]).it, (function (param) {
                          return as_list("a variable and an expression", param);
                        })), (function (param) {
                      return mapAnn((function (param) {
                                    return as_two("a variable and an expression", param);
                                  }), param);
                    }));
              var xes$3 = Belt_List.map(xes$2, (function (param) {
                      return mapAnn((function (param) {
                                    var x = as_id("a variable to be bound", param[0]);
                                    var e = as_expr("an expression", parseTerm(param[1]));
                                    return [
                                            x,
                                            e
                                          ];
                                  }), param);
                    }));
              var ts$1 = Belt_List.map(match$15[1], parseTerm);
              var result$8 = as_expr("an expression to be return", parseTerm(match$15[2]));
              return mapAnn((function (v) {
                            return {
                                    TAG: /* Exp */1,
                                    _0: v
                                  };
                          }), letstar(ann, xes$3, makeBlock(ts$1, result$8)));
          case "letrec" :
              var match$16 = as_one_then_many_then_one("the bindings followed by the body", es$1.tl);
              var xes$4 = Belt_List.map(Belt_List.map(as_list("variable-expression pairs", match$16[0]).it, (function (param) {
                          return as_list("a variable and an expression", param);
                        })), (function (param) {
                      return mapAnn((function (param) {
                                    return as_two("a variable and an expression", param);
                                  }), param);
                    }));
              var xes$5 = Belt_List.map(xes$4, (function (param) {
                      return mapAnn((function (param) {
                                    var x = as_id("a variable to be bound", param[0]);
                                    var e = as_expr("an expression", parseTerm(param[1]));
                                    return [
                                            x,
                                            e
                                          ];
                                  }), param);
                    }));
              var ts$2 = Belt_List.map(match$16[1], parseTerm);
              var result$9 = as_expr("an expression to be return", parseTerm(match$16[2]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Letrec */5,
                          _0: xes$5,
                          _1: makeBlock(ts$2, result$9)
                        }
                      },
                      ann: ann
                    };
          case "mvec" :
              return makeAppPrm(ann, /* VecNew */5, es$1.tl);
          case "next" :
              return makeAppPrm(ann, /* Next */12, es$1.tl);
          case "not" :
              return makeAppPrm(ann, /* Not */10, es$1.tl);
          case "mpair" :
          case "pair" :
              return makeAppPrm(ann, /* PairNew */0, es$1.tl);
          case "print" :
              return makeAppPrm(ann, /* Print */11, es$1.tl);
          case "quote" :
              var e$2 = as_one("a quoted value", es$1.tl);
              return mapAnn((function (v) {
                            return {
                                    TAG: /* Exp */1,
                                    _0: v
                                  };
                          }), parseValue(e$2));
          case "right" :
              return makeAppPrm(ann, /* PairRefRight */2, es$1.tl);
          case "set!" :
              var match$17 = as_two("a variable and an expression", es$1.tl);
              var x$1 = as_id("a variable to be set", match$17[0]);
              var e$3 = as_expr("an expression", parseTerm(match$17[1]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Set */2,
                          _0: x$1,
                          _1: e$3
                        }
                      },
                      ann: ann
                    };
          case "set-left!" :
              return makeAppPrm(ann, /* PairSetLeft */3, es$1.tl);
          case "set-right!" :
              return makeAppPrm(ann, /* PairSetRight */4, es$1.tl);
          case "vec-len" :
          case "vlen" :
              return makeAppPrm(ann, /* VecLen */8, es$1.tl);
          case "vec-ref" :
          case "vref" :
              return makeAppPrm(ann, /* VecRef */6, es$1.tl);
          case "vec-set!" :
          case "vset!" :
              return makeAppPrm(ann, /* VecSet */7, es$1.tl);
          case "yield" :
              var e$4 = as_one("an expression", es$1.tl);
              var e$5 = as_expr("an expression", parseTerm(e$4));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Yield */12,
                          _0: e$5
                        }
                      },
                      ann: ann
                    };
          case "λ" :
              var match$18 = as_one_then_many_then_one("the function signature followed by the function body", es$1.tl);
              var args$4 = Belt_List.map(as_list("function parameters", match$18[0]).it, (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$7 = Belt_List.map(match$18[1], parseTerm);
              var result$10 = as_expr("an expression to be returned", parseTerm(match$18[2]));
              return {
                      it: {
                        TAG: /* Exp */1,
                        _0: {
                          TAG: /* Lam */3,
                          _0: args$4,
                          _1: makeBlock(terms$7, result$10)
                        }
                      },
                      ann: ann
                    };
          default:
            
        }
      }
      
    }
    
  }
  var match$19 = as_one_then_many("a function call/application, which includes a function and then zero or more arguments", es$1);
  var e$6 = as_expr("a function", parseTerm(match$19[0]));
  var es$2 = Belt_List.map(Belt_List.map(match$19[1], parseTerm), (function (param) {
          return as_expr("an argument", param);
        }));
  return {
          it: {
            TAG: /* Exp */1,
            _0: {
              TAG: /* App */7,
              _0: e$6,
              _1: es$2
            }
          },
          ann: ann
        };
}

function makeAppPrm(ann, p, es) {
  var es$1 = Belt_List.map(Belt_List.map(es, parseTerm), (function (param) {
          return as_expr("an argument", param);
        }));
  return {
          it: {
            TAG: /* Exp */1,
            _0: {
              TAG: /* AppPrm */6,
              _0: p,
              _1: es$1
            }
          },
          ann: ann
        };
}

function parseTerms(src) {
  try {
    return Belt_List.map(SExpression.fromString(src), parseTerm);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SExpression.SExpressionError) {
      var err$1 = {
        TAG: /* SExprParseError */0,
        _0: SExpression.$$Error.toString(err._1)
      };
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: err$1,
            Error: new Error()
          };
    }
    throw err;
  }
}

function parseProgram(src) {
  var it = parseTerms(src);
  var begin = Belt_Option.getWithDefault(Belt_Option.map(Belt_List.head(it), (function (v) {
              return v.ann.begin;
            })), {
        ln: 0,
        ch: 0
      });
  var end = Belt_Option.getWithDefault(Belt_Option.map(Belt_List.head(Belt_List.reverse(it)), (function (v) {
              return v.ann.end;
            })), {
        ln: 0,
        ch: 0
      });
  return {
          it: it,
          ann: {
            begin: begin,
            end: end
          }
        };
}

function parseOutput(src) {
  try {
    return Belt_List.map(SExpression.fromString(src), outputletOfSExpr);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SExpression.SExpressionError) {
      var err$1 = {
        TAG: /* SExprParseError */0,
        _0: SExpression.$$Error.toString(err._1)
      };
      throw {
            RE_EXN_ID: SMoLParseError,
            _1: err$1,
            Error: new Error()
          };
    }
    throw err;
  }
}

var SMoLPrintError = /* @__PURE__ */Caml_exceptions.create("SMoL.SMoLPrintError");

function indent(s, i) {
  var pad = Js_string.repeat(i, " ");
  return Js_string.replaceByRe(/\n/g, "\n" + pad, s);
}

function indentBlock(s, i) {
  return indent("\n" + s, i);
}

function hcat(s1, s2) {
  return "" + s1 + "" + indent(s2, s1.length) + "";
}

function constantToString(c) {
  if (typeof c === "number") {
    if (c === /* Uni */0) {
      return "#<void>";
    } else {
      return "#<empty>";
    }
  }
  switch (c.TAG | 0) {
    case /* Num */0 :
        return String(c._0);
    case /* Lgc */1 :
        if (c._0) {
          return "#t";
        } else {
          return "#f";
        }
    case /* Str */2 :
        return "\"" + $$String.escaped(c._0) + "\"";
    
  }
}

function listToString(ss) {
  return "(" + $$String.concat(" ", ss) + ")";
}

function defvarLike(op, x, e) {
  if ($$String.contains(e, /* '\n' */10)) {
    return "(" + op + " " + x + "" + indentBlock(e, 2) + ")";
  } else {
    return listToString({
                hd: op,
                tl: {
                  hd: x,
                  tl: {
                    hd: e,
                    tl: /* [] */0
                  }
                }
              });
  }
}

function deffunToString(f, xs, b) {
  return defvarLike("deffun", listToString({
                  hd: f,
                  tl: xs
                }), b);
}

function defgenToString(f, xs, b) {
  return defvarLike("defgen", listToString({
                  hd: f,
                  tl: xs
                }), b);
}

function exprLamToString(xs, b) {
  return defvarLike("lambda", listToString(xs), b);
}

function exprGenToString(xs, b) {
  return defvarLike("generator", listToString(xs), b);
}

function exprYieldToString(e) {
  return "(yield " + e + ")";
}

function beginLike(op, ts) {
  return "(" + op + "" + indentBlock($$String.concat("\n", ts), 2) + ")";
}

function exprBgnToString(es, e) {
  return beginLike("begin", Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ]));
}

function exprCndToString(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              "else",
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Belt_List.map(ebs$1, (function (param) {
          return "[" + param[0] + "" + indentBlock(param[1], 1) + "]";
        }));
  return beginLike("cond", ebs$2);
}

function exprIfToString(e_cnd, e_thn, e_els) {
  return hcat("(if ", "" + $$String.concat("\n", {
                  hd: e_cnd,
                  tl: {
                    hd: e_thn,
                    tl: {
                      hd: e_els,
                      tl: /* [] */0
                    }
                  }
                }) + ")");
}

function letLike(op, xes, b) {
  var xes$1 = $$String.concat("\n", xes);
  var xes$2 = "(" + indent(xes$1, 1) + ")";
  return hcat("(" + op + " ", "" + xes$2 + "") + ("" + indentBlock(b, 2) + ")");
}

function symbolToString(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            srcrange: param.ann,
            print: it
          }
        };
}

function printExp(param) {
  var it = param.it;
  var e;
  switch (it.TAG | 0) {
    case /* Con */0 :
        var c = it._0;
        e = {
          it: {
            TAG: /* Con */0,
            _0: c
          },
          ann: constantToString(c)
        };
        break;
    case /* Ref */1 :
        var x = it._0;
        e = {
          it: {
            TAG: /* Ref */1,
            _0: x
          },
          ann: x
        };
        break;
    case /* Set */2 :
        var x$1 = symbolToString(it._0);
        var e$1 = printExp(it._1);
        e = {
          it: {
            TAG: /* Set */2,
            _0: x$1,
            _1: e$1
          },
          ann: defvarLike("set!", x$1.ann.print, e$1.ann.print)
        };
        break;
    case /* Lam */3 :
        var xs = Belt_List.map(it._0, symbolToString);
        var b = printBlock(it._1);
        e = {
          it: {
            TAG: /* Lam */3,
            _0: xs,
            _1: b
          },
          ann: exprLamToString(Belt_List.map(xs, (function (x) {
                      return x.ann.print;
                    })), b.ann.print)
        };
        break;
    case /* Let */4 :
        var xes = Belt_List.map(it._0, xeToString);
        var b$1 = printBlock(it._1);
        e = {
          it: {
            TAG: /* Let */4,
            _0: xes,
            _1: b$1
          },
          ann: letLike("let", Belt_List.map(xes, (function (xe) {
                      return xe.ann.print;
                    })), b$1.ann.print)
        };
        break;
    case /* Letrec */5 :
        var xes$1 = Belt_List.map(it._0, xeToString);
        var b$2 = printBlock(it._1);
        e = {
          it: {
            TAG: /* Letrec */5,
            _0: xes$1,
            _1: b$2
          },
          ann: letLike("letrec", Belt_List.map(xes$1, (function (xe) {
                      return xe.ann.print;
                    })), b$2.ann.print)
        };
        break;
    case /* AppPrm */6 :
        var p = it._0;
        var es = Belt_List.map(it._1, printExp);
        var es$1 = Belt_List.map(es, (function (e) {
                return e.ann.print;
              }));
        var e$2 = toString(p);
        e = {
          it: {
            TAG: /* AppPrm */6,
            _0: p,
            _1: es
          },
          ann: listToString({
                hd: e$2,
                tl: es$1
              })
        };
        break;
    case /* App */7 :
        var e$3 = printExp(it._0);
        var es$2 = Belt_List.map(it._1, printExp);
        var es$3 = Belt_List.map(es$2, (function (e) {
                return e.ann.print;
              }));
        e = {
          it: {
            TAG: /* App */7,
            _0: e$3,
            _1: es$2
          },
          ann: listToString({
                hd: e$3.ann.print,
                tl: es$3
              })
        };
        break;
    case /* Bgn */8 :
        var es$4 = Belt_List.map(it._0, printExp);
        var e$4 = printExp(it._1);
        e = {
          it: {
            TAG: /* Bgn */8,
            _0: es$4,
            _1: e$4
          },
          ann: exprBgnToString(Belt_List.map(es$4, (function (e) {
                      return e.ann.print;
                    })), e$4.ann.print)
        };
        break;
    case /* If */9 :
        var e_cnd = printExp(it._0);
        var e_thn = printExp(it._1);
        var e_els = printExp(it._2);
        e = {
          it: {
            TAG: /* If */9,
            _0: e_cnd,
            _1: e_thn,
            _2: e_els
          },
          ann: exprIfToString(e_cnd.ann.print, e_thn.ann.print, e_els.ann.print)
        };
        break;
    case /* Cnd */10 :
        var ebs = Belt_List.map(it._0, ebToString);
        var ob = Belt_Option.map(it._1, printBlock);
        e = {
          it: {
            TAG: /* Cnd */10,
            _0: ebs,
            _1: ob
          },
          ann: exprCndToString(Belt_List.map(ebs, (function (param) {
                      return [
                              param[0].ann.print,
                              param[1].ann.print
                            ];
                    })), Belt_Option.map(ob, (function (b) {
                      return b.ann.print;
                    })))
        };
        break;
    case /* GLam */11 :
        var xs$1 = Belt_List.map(it._0, symbolToString);
        var b$3 = printBlock(it._1);
        e = {
          it: {
            TAG: /* Lam */3,
            _0: xs$1,
            _1: b$3
          },
          ann: exprGenToString(Belt_List.map(xs$1, (function (x) {
                      return x.ann.print;
                    })), b$3.ann.print)
        };
        break;
    case /* Yield */12 :
        var e$5 = printExp(it._0);
        e = {
          it: {
            TAG: /* Yield */12,
            _0: e$5
          },
          ann: exprYieldToString(e$5.ann.print)
        };
        break;
    
  }
  return {
          it: e.it,
          ann: {
            srcrange: param.ann,
            print: e.ann
          }
        };
}

function printDef(param) {
  var d = param.it;
  var d$1;
  switch (d.TAG | 0) {
    case /* Var */0 :
        var x = symbolToString(d._0);
        var e = printExp(d._1);
        d$1 = {
          it: {
            TAG: /* Var */0,
            _0: x,
            _1: e
          },
          ann: defvarLike("defvar", x.ann.print, e.ann.print)
        };
        break;
    case /* Fun */1 :
        var f = symbolToString(d._0);
        var xs = Belt_List.map(d._1, symbolToString);
        var b = printBlock(d._2);
        d$1 = {
          it: {
            TAG: /* Fun */1,
            _0: f,
            _1: xs,
            _2: b
          },
          ann: deffunToString(f.ann.print, Belt_List.map(xs, (function (x) {
                      return x.ann.print;
                    })), b.ann.print)
        };
        break;
    case /* GFun */2 :
        var f$1 = symbolToString(d._0);
        var xs$1 = Belt_List.map(d._1, symbolToString);
        var b$1 = printBlock(d._2);
        d$1 = {
          it: {
            TAG: /* GFun */2,
            _0: f$1,
            _1: xs$1,
            _2: b$1
          },
          ann: defgenToString(f$1.ann.print, Belt_List.map(xs$1, (function (x) {
                      return x.ann.print;
                    })), b$1.ann.print)
        };
        break;
    
  }
  return {
          it: d$1.it,
          ann: {
            srcrange: param.ann,
            print: d$1.ann
          }
        };
}

function xeToString(param) {
  var xe = param.it;
  var x = symbolToString(xe[0]);
  var e = printExp(xe[1]);
  var print = hcat("[" + x.ann.print + "", "" + e.ann.print + "]");
  return {
          it: [
            x,
            e
          ],
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function ebToString(eb) {
  return [
          printExp(eb[0]),
          printBlock(eb[1])
        ];
}

function printBlock(param) {
  var b = param.it;
  var ts = Belt_List.map(b[0], printTerm);
  var e = printExp(b[1]);
  var print = $$String.concat("\n", Belt_List.concatMany([
            Belt_List.map(ts, (function (t) {
                    return t.ann.print;
                  })),
            {
              hd: e.ann.print,
              tl: /* [] */0
            }
          ]));
  return {
          it: [
            ts,
            e
          ],
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function printTerm(param) {
  var srcrange = param.ann;
  var t = param.it;
  if (t.TAG === /* Def */0) {
    return mapAnn((function (v) {
                  return {
                          TAG: /* Def */0,
                          _0: v
                        };
                }), printDef({
                    it: t._0,
                    ann: srcrange
                  }));
  } else {
    return mapAnn((function (v) {
                  return {
                          TAG: /* Exp */1,
                          _0: v
                        };
                }), printExp({
                    it: t._0,
                    ann: srcrange
                  }));
  }
}

function printOutput(os) {
  var p = function (v) {
    switch (v.TAG | 0) {
      case /* Con */0 :
          return constantToString(v._0);
      case /* Lst */1 :
          return "(" + $$String.concat(" ", Belt_List.map(v._0, p)) + ")";
      case /* Vec */2 :
          return "#(" + $$String.concat(" ", Belt_List.map(v._0, p)) + ")";
      
    }
  };
  return $$String.concat(" ", Belt_List.map(os, (function (o) {
                    if (o) {
                      return p(o._0);
                    } else {
                      return "error";
                    }
                  })));
}

function printProgramFull(_insertPrintTopLevel, param) {
  var ts = Belt_List.map(param.it, printTerm);
  var print = $$String.concat("\n", Belt_List.map(ts, (function (t) {
              return t.ann.print;
            })));
  return {
          it: ts,
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function printProgram(insertPrintTopLevel, p) {
  return printProgramFull(insertPrintTopLevel, p).ann.print;
}

function escapeName(x) {
  var re = /-./g;
  var matchFn = function (matchPart, _offset, _wholeString) {
    return matchPart.substring(1).toUpperCase();
  };
  var x$1 = x.replace(re, matchFn);
  if (x$1 === "var") {
    return "$var";
  } else {
    return x$1;
  }
}

function constantToString$1(c) {
  if (typeof c === "number") {
    if (c === /* Uni */0) {
      return "null";
    }
    throw {
          RE_EXN_ID: SMoLPrintError,
          _1: "Lists are not supported in JavaScript",
          Error: new Error()
        };
  } else {
    switch (c.TAG | 0) {
      case /* Num */0 :
          return String(c._0);
      case /* Lgc */1 :
          if (c._0) {
            return "true";
          } else {
            return "false";
          }
      case /* Str */2 :
          return "\"" + $$String.escaped(c._0) + "\"";
      
    }
  }
}

function listToString$1(es) {
  if (Belt_List.some(es, (function (e) {
            return $$String.contains(e, /* '\n' */10);
          }))) {
    return "(" + indentBlock($$String.concat(",\n", es), 2) + "\n)";
  } else {
    return "(" + $$String.concat(", ", es) + ")";
  }
}

function defvarLike$1(op, x, e) {
  return "" + op + "" + x + " = " + indent(e, 2) + "";
}

function exprAppToString(e, es) {
  return "" + e + "" + listToString$1(es) + "";
}

var printingTopLevel = {
  contents: false
};

function consumeContext(e, context) {
  if (context.TAG === /* Expr */0) {
    return e;
  }
  switch (context._0) {
    case /* Step */0 :
        return "" + e + ";";
    case /* Return */1 :
        return "return " + e + ";";
    case /* TopLevel */2 :
        if (printingTopLevel.contents) {
          return "console.log(" + e + ");";
        } else {
          return "" + e + ";";
        }
    
  }
}

function consumeContextWrap(e, context) {
  if (context.TAG === /* Expr */0 && context._0) {
    return "(" + e + ")";
  } else {
    return consumeContext(e, context);
  }
}

function consumeContextVoid(e, context) {
  if (context.TAG === /* Expr */0) {
    return consumeContext(e, context);
  }
  switch (context._0) {
    case /* Step */0 :
        return consumeContext(e, context);
    case /* Return */1 :
        return "" + e + ";\nreturn;";
    case /* TopLevel */2 :
        return "" + e + ";";
    
  }
}

function consumeContextStat(e, context) {
  if (context.TAG !== /* Expr */0) {
    return consumeContextVoid(e, context);
  }
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: "" + e + " can't be used as a expression in JavaScript",
        Error: new Error()
      };
}

function exprAppPrmToString(p, es, context) {
  if (typeof p === "number") {
    switch (p) {
      case /* PairNew */0 :
          if (es) {
            var match = es.tl;
            if (match && !match.tl) {
              var e1 = Curry._1(es.hd, false);
              var e2 = Curry._1(match.hd, false);
              return {
                      it: [
                        /* PairNew */0,
                        {
                          hd: e1,
                          tl: {
                            hd: e2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext("[ " + e1.ann.print + ", " + e2.ann.print + " ]", context)
                    };
            }
            
          }
          break;
      case /* PairRefLeft */1 :
          if (es && !es.tl) {
            var e1$1 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* PairRefLeft */1,
                      {
                        hd: e1$1,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext("" + e1$1.ann.print + "[0]", context)
                  };
          }
          break;
      case /* PairRefRight */2 :
          if (es && !es.tl) {
            var e1$2 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* PairRefRight */2,
                      {
                        hd: e1$2,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext("" + e1$2.ann.print + "[1]", context)
                  };
          }
          break;
      case /* PairSetLeft */3 :
          if (es) {
            var match$1 = es.tl;
            if (match$1 && !match$1.tl) {
              var e1$3 = Curry._1(es.hd, false);
              var e2$1 = Curry._1(match$1.hd, false);
              return {
                      it: [
                        /* PairSetLeft */3,
                        {
                          hd: e1$3,
                          tl: {
                            hd: e2$1,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat("" + e1$3.ann.print + "[0] = " + e2$1.ann.print + "", context)
                    };
            }
            
          }
          break;
      case /* PairSetRight */4 :
          if (es) {
            var match$2 = es.tl;
            if (match$2 && !match$2.tl) {
              var e1$4 = Curry._1(es.hd, false);
              var e2$2 = Curry._1(match$2.hd, false);
              return {
                      it: [
                        /* PairSetRight */4,
                        {
                          hd: e1$4,
                          tl: {
                            hd: e2$2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat("" + e1$4.ann.print + "[1] = " + e2$2.ann.print + "", context)
                    };
            }
            
          }
          break;
      case /* VecNew */5 :
          var es$1 = Belt_List.map(es, (function (e) {
                  return Curry._1(e, false);
                }));
          return {
                  it: [
                    /* VecNew */5,
                    es$1
                  ],
                  ann: consumeContext("[ " + $$String.concat(", ", Belt_List.map(es$1, (function (e) {
                                  return e.ann.print;
                                }))) + " ]", context)
                };
      case /* VecRef */6 :
          if (es) {
            var match$3 = es.tl;
            if (match$3 && !match$3.tl) {
              var e1$5 = Curry._1(es.hd, true);
              var e2$3 = Curry._1(match$3.hd, false);
              return {
                      it: [
                        /* VecRef */6,
                        {
                          hd: e1$5,
                          tl: {
                            hd: e2$3,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext("" + e1$5.ann.print + "[" + e2$3.ann.print + "]", context)
                    };
            }
            
          }
          break;
      case /* VecSet */7 :
          if (es) {
            var match$4 = es.tl;
            if (match$4) {
              var match$5 = match$4.tl;
              if (match$5 && !match$5.tl) {
                var e1$6 = Curry._1(es.hd, true);
                var e2$4 = Curry._1(match$4.hd, false);
                var e3 = Curry._1(match$5.hd, false);
                return {
                        it: [
                          /* VecSet */7,
                          {
                            hd: e1$6,
                            tl: {
                              hd: e2$4,
                              tl: {
                                hd: e3,
                                tl: /* [] */0
                              }
                            }
                          }
                        ],
                        ann: consumeContextStat("" + e1$6.ann.print + "[" + e2$4.ann.print + "] = " + e3.ann.print + "", context)
                      };
              }
              
            }
            
          }
          break;
      case /* VecLen */8 :
          if (es && !es.tl) {
            var e1$7 = Curry._1(es.hd, false);
            return {
                    it: [
                      /* VecLen */8,
                      {
                        hd: e1$7,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext("" + e1$7.ann.print + ".length", context)
                  };
          }
          break;
      case /* Err */9 :
          if (es && !es.tl) {
            var e1$8 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* Err */9,
                      {
                        hd: e1$8,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap("throw " + e1$8.ann.print + "", context)
                  };
          }
          break;
      case /* Not */10 :
          if (es && !es.tl) {
            var e1$9 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* Not */10,
                      {
                        hd: e1$9,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap("!" + e1$9.ann.print + "", context)
                  };
          }
          break;
      case /* Print */11 :
          if (es && !es.tl) {
            var e1$10 = Curry._1(es.hd, false);
            return {
                    it: [
                      /* Print */11,
                      {
                        hd: e1$10,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid("print(" + e1$10.ann.print + ")", context)
                  };
          }
          break;
      case /* Next */12 :
          if (es && !es.tl) {
            var e1$11 = Curry._1(es.hd, false);
            return {
                    it: [
                      /* Next */12,
                      {
                        hd: e1$11,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid("" + e1$11.ann.print + ".next()", context)
                  };
          }
          break;
      case /* Cons */13 :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "List is not supported by JavaScript",
                Error: new Error()
              };
      
    }
  } else {
    if (p.TAG === /* Arith */0) {
      var o = p._0;
      var os;
      switch (o) {
        case /* Add */0 :
            os = "+";
            break;
        case /* Sub */1 :
            os = "-";
            break;
        case /* Mul */2 :
            os = "*";
            break;
        case /* Div */3 :
            os = "/";
            break;
        
      }
      var es$2 = Belt_List.map(es, (function (e) {
              return Curry._1(e, true);
            }));
      return {
              it: [
                {
                  TAG: /* Arith */0,
                  _0: o
                },
                es$2
              ],
              ann: consumeContextWrap($$String.concat(" " + os + " ", Belt_List.map(es$2, (function (e) {
                              return e.ann.print;
                            }))), context)
            };
    }
    if (es) {
      var match$6 = es.tl;
      if (match$6 && !match$6.tl) {
        var o$1 = p._0;
        var os$1;
        switch (o$1) {
          case /* Lt */0 :
              os$1 = "<";
              break;
          case /* Eq */1 :
              os$1 = "==";
              break;
          case /* Gt */2 :
              os$1 = ">";
              break;
          case /* Le */3 :
              os$1 = "<=";
              break;
          case /* Ge */4 :
              os$1 = ">=";
              break;
          case /* Ne */5 :
              os$1 = "!=";
              break;
          
        }
        var e1$12 = Curry._1(es.hd, true);
        var e2$5 = Curry._1(match$6.hd, true);
        return {
                it: [
                  {
                    TAG: /* Cmp */1,
                    _0: o$1
                  },
                  {
                    hd: e1$12,
                    tl: {
                      hd: e2$5,
                      tl: /* [] */0
                    }
                  }
                ],
                ann: consumeContextWrap("" + e1$12.ann.print + " " + os$1 + " " + e2$5.ann.print + "", context)
              };
      }
      
    }
    
  }
  var err = "JavaScript doesn't let you use " + toString(p) + " on " + String(Belt_List.length(es)) + " parameter(s).";
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: err,
        Error: new Error()
      };
}

function funLike(op, x, xs, e) {
  return "" + op + " " + exprAppToString(x, xs) + " {" + indentBlock(e, 2) + "\n}";
}

function defvarToString(x, e) {
  return "" + defvarLike$1("let ", x, e) + ";";
}

function deffunToString$1(f, xs, b) {
  return "" + funLike("function", f, xs, b) + "";
}

function defgenToString$1(f, xs, b) {
  return "" + funLike("function*", f, xs, b) + "";
}

function exprLamToString$1(xs, b) {
  return funLike("function", "", xs, b);
}

function exprGenToString$1(xs, b) {
  return funLike("function*", "", xs, b);
}

function exprYieldToString$1(e) {
  return "yield " + e + "";
}

function exprBgnToString$1(es, e) {
  return listToString$1(Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ]));
}

function exprCndToString$1(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              "",
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Belt_List.map(ebs$1, (function (param) {
          return "if " + param[0] + " {" + indentBlock(param[1], 2) + "\n}";
        }));
  return $$String.concat(" else ", ebs$2);
}

function exprIfToString$1(e_cnd, e_thn, e_els) {
  return "" + e_cnd + " ? " + e_thn + " : " + e_els + "";
}

function symbolToString$1(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            srcrange: param.ann,
            print: escapeName(it)
          }
        };
}

function printExp$1(param, context) {
  var it = param.it;
  var e;
  switch (it.TAG | 0) {
    case /* Con */0 :
        var c = it._0;
        e = {
          it: {
            TAG: /* Con */0,
            _0: c
          },
          ann: consumeContext(constantToString$1(c), context)
        };
        break;
    case /* Ref */1 :
        var x = it._0;
        e = {
          it: {
            TAG: /* Ref */1,
            _0: x
          },
          ann: consumeContext(escapeName(x), context)
        };
        break;
    case /* Set */2 :
        var x$1 = symbolToString$1(it._0);
        var e$1 = printExp$1(it._1, {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Set */2,
            _0: x$1,
            _1: e$1
          },
          ann: consumeContextStat(defvarLike$1("", x$1.ann.print, e$1.ann.print), context)
        };
        break;
    case /* Lam */3 :
        var xs = Belt_List.map(it._0, symbolToString$1);
        var b = printBlock$1(it._1, /* Return */1);
        e = {
          it: {
            TAG: /* Lam */3,
            _0: xs,
            _1: b
          },
          ann: consumeContextWrap(exprLamToString$1(Belt_List.map(xs, (function (x) {
                          return x.ann.print;
                        })), b.ann.print), context)
        };
        break;
    case /* Let */4 :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "let-expressions are not supported by JavaScript",
              Error: new Error()
            };
    case /* Letrec */5 :
        if (context.TAG === /* Expr */0) {
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "letrec-expressions are not supported by JavaScript",
                Error: new Error()
              };
        }
        var xes = Belt_List.map(it._0, xeToString$1);
        var b$1 = printBlock$1(it._1, context._0);
        e = {
          it: {
            TAG: /* Letrec */5,
            _0: xes,
            _1: b$1
          },
          ann: "{\n" + indentBlock($$String.concat("\n", Belt_List.concatMany([
                        Belt_List.map(xes, (function (xe) {
                                return xe.ann.print;
                              })),
                        {
                          hd: b$1.ann.print,
                          tl: /* [] */0
                        }
                      ])), 2) + "\n}"
        };
        break;
    case /* AppPrm */6 :
        var es = Belt_List.map(it._1, (function (e, b) {
                return printExp$1(e, {
                            TAG: /* Expr */0,
                            _0: b
                          });
              }));
        var match = exprAppPrmToString(it._0, es, context);
        var match$1 = match.it;
        e = {
          it: {
            TAG: /* AppPrm */6,
            _0: match$1[0],
            _1: match$1[1]
          },
          ann: match.ann
        };
        break;
    case /* App */7 :
        var e$2 = printExp$1(it._0, {
              TAG: /* Expr */0,
              _0: false
            });
        var es$1 = Belt_List.map(it._1, (function (e) {
                return printExp$1(e, {
                            TAG: /* Expr */0,
                            _0: false
                          });
              }));
        e = {
          it: {
            TAG: /* App */7,
            _0: e$2,
            _1: es$1
          },
          ann: consumeContext(exprAppToString(e$2.ann.print, Belt_List.map(es$1, (function (e) {
                          return e.ann.print;
                        }))), context)
        };
        break;
    case /* Bgn */8 :
        var es$2 = Belt_List.map(it._0, (function (e) {
                return printExp$1(e, {
                            TAG: /* Expr */0,
                            _0: false
                          });
              }));
        var e$3 = printExp$1(it._1, {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Bgn */8,
            _0: es$2,
            _1: e$3
          },
          ann: consumeContext(exprBgnToString$1(Belt_List.map(es$2, (function (e) {
                          return e.ann.print;
                        })), e$3.ann.print), context)
        };
        break;
    case /* If */9 :
        var e_cnd = printExp$1(it._0, {
              TAG: /* Expr */0,
              _0: true
            });
        var e_thn = printExp$1(it._1, {
              TAG: /* Expr */0,
              _0: true
            });
        var e_els = printExp$1(it._2, {
              TAG: /* Expr */0,
              _0: true
            });
        e = {
          it: {
            TAG: /* If */9,
            _0: e_cnd,
            _1: e_thn,
            _2: e_els
          },
          ann: consumeContextWrap(exprIfToString$1(e_cnd.ann.print, e_thn.ann.print, e_els.ann.print), context)
        };
        break;
    case /* Cnd */10 :
        if (context.TAG === /* Expr */0) {
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "Multi-armed conditionals in JavaScript is not supported by the translator yet.",
                Error: new Error()
              };
        }
        var context$1 = context._0;
        var ebs = Belt_List.map(it._0, (function (eb) {
                return [
                        printExp$1(eb[0], {
                              TAG: /* Expr */0,
                              _0: false
                            }),
                        printBlock$1(eb[1], context$1)
                      ];
              }));
        var ob = obToString(it._1, context$1);
        e = {
          it: {
            TAG: /* Cnd */10,
            _0: ebs,
            _1: ob
          },
          ann: exprCndToString$1(Belt_List.map(ebs, (function (param) {
                      return [
                              param[0].ann.print,
                              param[1].ann.print
                            ];
                    })), Belt_Option.map(ob, (function (b) {
                      return b.ann.print;
                    })))
        };
        break;
    case /* GLam */11 :
        var xs$1 = Belt_List.map(it._0, symbolToString$1);
        var b$2 = printBlock$1(it._1, /* Return */1);
        e = {
          it: {
            TAG: /* Lam */3,
            _0: xs$1,
            _1: b$2
          },
          ann: consumeContextWrap(exprGenToString$1(Belt_List.map(xs$1, (function (x) {
                          return x.ann.print;
                        })), b$2.ann.print), context)
        };
        break;
    case /* Yield */12 :
        var e$4 = printExp$1(it._0, {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Yield */12,
            _0: e$4
          },
          ann: consumeContextWrap(exprYieldToString$1(e$4.ann.print), context)
        };
        break;
    
  }
  return {
          it: e.it,
          ann: {
            srcrange: param.ann,
            print: e.ann
          }
        };
}

function defToString(param) {
  var d = param.it;
  var d$1;
  switch (d.TAG | 0) {
    case /* Var */0 :
        var x = symbolToString$1(d._0);
        var e = printExp$1(d._1, {
              TAG: /* Expr */0,
              _0: false
            });
        d$1 = {
          it: {
            TAG: /* Var */0,
            _0: x,
            _1: e
          },
          ann: defvarToString(x.ann.print, e.ann.print)
        };
        break;
    case /* Fun */1 :
        var f = symbolToString$1(d._0);
        var xs = Belt_List.map(d._1, symbolToString$1);
        var b = printBlock$1(d._2, /* Return */1);
        d$1 = {
          it: {
            TAG: /* Fun */1,
            _0: f,
            _1: xs,
            _2: b
          },
          ann: deffunToString$1(f.ann.print, Belt_List.map(xs, (function (x) {
                      return x.ann.print;
                    })), b.ann.print)
        };
        break;
    case /* GFun */2 :
        var f$1 = symbolToString$1(d._0);
        var xs$1 = Belt_List.map(d._1, symbolToString$1);
        var b$1 = printBlock$1(d._2, /* Return */1);
        d$1 = {
          it: {
            TAG: /* GFun */2,
            _0: f$1,
            _1: xs$1,
            _2: b$1
          },
          ann: defgenToString$1(f$1.ann.print, Belt_List.map(xs$1, (function (x) {
                      return x.ann.print;
                    })), b$1.ann.print)
        };
        break;
    
  }
  return {
          it: d$1.it,
          ann: {
            srcrange: param.ann,
            print: d$1.ann
          }
        };
}

function xeToString$1(param) {
  var xe = param.it;
  var x = symbolToString$1(xe[0]);
  var e = printExp$1(xe[1], {
        TAG: /* Expr */0,
        _0: false
      });
  var print = defvarToString(x.ann.print, e.ann.print);
  return {
          it: [
            x,
            e
          ],
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function obToString(ob, ctx) {
  return Belt_Option.map(ob, (function (b) {
                return printBlock$1(b, ctx);
              }));
}

function printBlock$1(param, context) {
  var b = param.it;
  var ts = Belt_List.map(b[0], (function (t) {
          return printTerm$1(t, /* Step */0);
        }));
  var e = printExp$1(b[1], {
        TAG: /* Stat */1,
        _0: context
      });
  var print = $$String.concat("\n", Belt_List.concatMany([
            Belt_List.map(ts, (function (t) {
                    return t.ann.print;
                  })),
            {
              hd: e.ann.print,
              tl: /* [] */0
            }
          ]));
  return {
          it: [
            ts,
            e
          ],
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function printTerm$1(param, ctx) {
  var srcrange = param.ann;
  var t = param.it;
  if (t.TAG === /* Def */0) {
    return mapAnn((function (v) {
                  return {
                          TAG: /* Def */0,
                          _0: v
                        };
                }), defToString({
                    it: t._0,
                    ann: srcrange
                  }));
  } else {
    return mapAnn((function (v) {
                  return {
                          TAG: /* Exp */1,
                          _0: v
                        };
                }), printExp$1({
                    it: t._0,
                    ann: srcrange
                  }, {
                    TAG: /* Stat */1,
                    _0: ctx
                  }));
  }
}

function printOutput$1(os) {
  var p = function (v) {
    switch (v.TAG | 0) {
      case /* Con */0 :
          return constantToString$1(v._0);
      case /* Lst */1 :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "Lists are not supported in JavaScript",
                Error: new Error()
              };
      case /* Vec */2 :
          return "[ " + $$String.concat(", ", Belt_List.map(v._0, p)) + " ]";
      
    }
  };
  return $$String.concat(" ", Belt_List.map(os, (function (o) {
                    if (o) {
                      return p(o._0);
                    } else {
                      return "error";
                    }
                  })));
}

function printProgramFull$1(insertPrintTopLevel, param) {
  printingTopLevel.contents = insertPrintTopLevel;
  var ts = Belt_List.map(param.it, (function (t) {
          return printTerm$1(t, /* TopLevel */2);
        }));
  var print = $$String.concat("\n", Belt_List.map(ts, (function (t) {
              return t.ann.print;
            })));
  return {
          it: ts,
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function printProgram$1(insertPrintTopLevel, p) {
  return printProgramFull$1(insertPrintTopLevel, p).ann.print;
}

function escapeName$1(x) {
  var re = /-/g;
  var matchFn = function (_matchPart, _offset, _wholeString) {
    return "_";
  };
  return x.replace(re, matchFn);
}

function constantToString$2(c) {
  if (typeof c === "number") {
    if (c === /* Uni */0) {
      return "None";
    }
    throw {
          RE_EXN_ID: SMoLPrintError,
          _1: "Lists are not supported in Python",
          Error: new Error()
        };
  } else {
    switch (c.TAG | 0) {
      case /* Num */0 :
          return String(c._0);
      case /* Lgc */1 :
          if (c._0) {
            return "True";
          } else {
            return "False";
          }
      case /* Str */2 :
          return "\"" + $$String.escaped(c._0) + "\"";
      
    }
  }
}

function listToString$2(es) {
  if (Belt_List.some(es, (function (e) {
            return $$String.contains(e, /* '\n' */10);
          }))) {
    return "(" + indentBlock($$String.concat(",\n", es), 2) + "\n)";
  } else {
    return "(" + $$String.concat(", ", es) + ")";
  }
}

function defvarLike$2(op, x, e) {
  return "" + op + "" + x + " = " + indent(e, 2) + "";
}

function exprAppToString$1(e, es) {
  return "" + e + "" + listToString$2(es) + "";
}

var printingTopLevel$1 = {
  contents: false
};

function consumeContext$1(e, context) {
  if (context.TAG === /* Expr */0) {
    return e;
  }
  switch (context._0) {
    case /* Step */0 :
        return "" + e + "";
    case /* Return */1 :
        return "return " + e + "";
    case /* TopLevel */2 :
        if (printingTopLevel$1.contents) {
          return "print(" + e + ")";
        } else {
          return "" + e + "";
        }
    
  }
}

function consumeContextWrap$1(e, context) {
  if (context.TAG === /* Expr */0 && context._0) {
    return "(" + e + ")";
  } else {
    return consumeContext$1(e, context);
  }
}

function consumeContextVoid$1(e, context) {
  if (context.TAG === /* Expr */0) {
    return consumeContext$1(e, context);
  }
  switch (context._0) {
    case /* Step */0 :
        return consumeContext$1(e, context);
    case /* Return */1 :
        return "" + e + "\nreturn";
    case /* TopLevel */2 :
        return "" + e + "";
    
  }
}

function consumeContextStat$1(e, context) {
  if (context.TAG !== /* Expr */0) {
    return consumeContextVoid$1(e, context);
  }
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: "" + e + " can't be used as a expression in Python",
        Error: new Error()
      };
}

function exprAppPrmToString$1(p, es, context) {
  if (typeof p === "number") {
    switch (p) {
      case /* PairNew */0 :
          if (es) {
            var match = es.tl;
            if (match && !match.tl) {
              var e1 = Curry._1(es.hd, false);
              var e2 = Curry._1(match.hd, false);
              return {
                      it: [
                        /* PairNew */0,
                        {
                          hd: e1,
                          tl: {
                            hd: e2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$1("[" + e1.ann.print + ", " + e2.ann.print + "]", context)
                    };
            }
            
          }
          break;
      case /* PairRefLeft */1 :
          if (es && !es.tl) {
            var e1$1 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* PairRefLeft */1,
                      {
                        hd: e1$1,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$1("" + e1$1.ann.print + "[0]", context)
                  };
          }
          break;
      case /* PairRefRight */2 :
          if (es && !es.tl) {
            var e1$2 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* PairRefRight */2,
                      {
                        hd: e1$2,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$1("" + e1$2.ann.print + "[1]", context)
                  };
          }
          break;
      case /* PairSetLeft */3 :
          if (es) {
            var match$1 = es.tl;
            if (match$1 && !match$1.tl) {
              var e1$3 = Curry._1(es.hd, false);
              var e2$1 = Curry._1(match$1.hd, false);
              return {
                      it: [
                        /* PairSetLeft */3,
                        {
                          hd: e1$3,
                          tl: {
                            hd: e2$1,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat$1("" + e1$3.ann.print + "[0] = " + e2$1.ann.print + "", context)
                    };
            }
            
          }
          break;
      case /* PairSetRight */4 :
          if (es) {
            var match$2 = es.tl;
            if (match$2 && !match$2.tl) {
              var e1$4 = Curry._1(es.hd, false);
              var e2$2 = Curry._1(match$2.hd, false);
              return {
                      it: [
                        /* PairSetRight */4,
                        {
                          hd: e1$4,
                          tl: {
                            hd: e2$2,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContextStat$1("" + e1$4.ann.print + "[1] = " + e2$2.ann.print + "", context)
                    };
            }
            
          }
          break;
      case /* VecNew */5 :
          var es$1 = Belt_List.map(es, (function (e) {
                  return Curry._1(e, false);
                }));
          return {
                  it: [
                    /* VecNew */5,
                    es$1
                  ],
                  ann: consumeContext$1("[" + $$String.concat(", ", Belt_List.map(es$1, (function (e) {
                                  return e.ann.print;
                                }))) + "]", context)
                };
      case /* VecRef */6 :
          if (es) {
            var match$3 = es.tl;
            if (match$3 && !match$3.tl) {
              var e1$5 = Curry._1(es.hd, true);
              var e2$3 = Curry._1(match$3.hd, false);
              return {
                      it: [
                        /* VecRef */6,
                        {
                          hd: e1$5,
                          tl: {
                            hd: e2$3,
                            tl: /* [] */0
                          }
                        }
                      ],
                      ann: consumeContext$1("" + e1$5.ann.print + "[" + e2$3.ann.print + "]", context)
                    };
            }
            
          }
          break;
      case /* VecSet */7 :
          if (es) {
            var match$4 = es.tl;
            if (match$4) {
              var match$5 = match$4.tl;
              if (match$5 && !match$5.tl) {
                var e1$6 = Curry._1(es.hd, true);
                var e2$4 = Curry._1(match$4.hd, false);
                var e3 = Curry._1(match$5.hd, false);
                return {
                        it: [
                          /* VecSet */7,
                          {
                            hd: e1$6,
                            tl: {
                              hd: e2$4,
                              tl: {
                                hd: e3,
                                tl: /* [] */0
                              }
                            }
                          }
                        ],
                        ann: consumeContextStat$1("" + e1$6.ann.print + "[" + e2$4.ann.print + "] = " + e3.ann.print + "", context)
                      };
              }
              
            }
            
          }
          break;
      case /* VecLen */8 :
          if (es && !es.tl) {
            var e1$7 = Curry._1(es.hd, false);
            return {
                    it: [
                      /* VecLen */8,
                      {
                        hd: e1$7,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContext$1("len(" + e1$7.ann.print + ")", context)
                  };
          }
          break;
      case /* Err */9 :
          if (es && !es.tl) {
            var e1$8 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* Err */9,
                      {
                        hd: e1$8,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$1("raise " + e1$8.ann.print + "", context)
                  };
          }
          break;
      case /* Not */10 :
          if (es && !es.tl) {
            var e1$9 = Curry._1(es.hd, true);
            return {
                    it: [
                      /* Not */10,
                      {
                        hd: e1$9,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextWrap$1("!" + e1$9.ann.print + "", context)
                  };
          }
          break;
      case /* Print */11 :
          if (es && !es.tl) {
            var e1$10 = Curry._1(es.hd, false);
            return {
                    it: [
                      /* Print */11,
                      {
                        hd: e1$10,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$1("print(" + e1$10.ann.print + ")", context)
                  };
          }
          break;
      case /* Next */12 :
          if (es && !es.tl) {
            var e1$11 = Curry._1(es.hd, false);
            return {
                    it: [
                      /* Next */12,
                      {
                        hd: e1$11,
                        tl: /* [] */0
                      }
                    ],
                    ann: consumeContextVoid$1("next(" + e1$11.ann.print + ")", context)
                  };
          }
          break;
      case /* Cons */13 :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "List is not supported by Python",
                Error: new Error()
              };
      
    }
  } else {
    if (p.TAG === /* Arith */0) {
      var o = p._0;
      var os;
      switch (o) {
        case /* Add */0 :
            os = "+";
            break;
        case /* Sub */1 :
            os = "-";
            break;
        case /* Mul */2 :
            os = "*";
            break;
        case /* Div */3 :
            os = "/";
            break;
        
      }
      var es$2 = Belt_List.map(es, (function (e) {
              return Curry._1(e, true);
            }));
      return {
              it: [
                {
                  TAG: /* Arith */0,
                  _0: o
                },
                es$2
              ],
              ann: consumeContextWrap$1($$String.concat(" " + os + " ", Belt_List.map(es$2, (function (e) {
                              return e.ann.print;
                            }))), context)
            };
    }
    if (es) {
      var match$6 = es.tl;
      if (match$6 && !match$6.tl) {
        var o$1 = p._0;
        var os$1;
        switch (o$1) {
          case /* Lt */0 :
              os$1 = "<";
              break;
          case /* Eq */1 :
              os$1 = "==";
              break;
          case /* Gt */2 :
              os$1 = ">";
              break;
          case /* Le */3 :
              os$1 = "<=";
              break;
          case /* Ge */4 :
              os$1 = ">=";
              break;
          case /* Ne */5 :
              os$1 = "!=";
              break;
          
        }
        var e1$12 = Curry._1(es.hd, true);
        var e2$5 = Curry._1(match$6.hd, true);
        return {
                it: [
                  {
                    TAG: /* Cmp */1,
                    _0: o$1
                  },
                  {
                    hd: e1$12,
                    tl: {
                      hd: e2$5,
                      tl: /* [] */0
                    }
                  }
                ],
                ann: consumeContextWrap$1("" + e1$12.ann.print + " " + os$1 + " " + e2$5.ann.print + "", context)
              };
      }
      
    }
    
  }
  var err = "Python doesn't let you use " + toString(p) + " on " + String(Belt_List.length(es)) + " parameter(s).";
  throw {
        RE_EXN_ID: SMoLPrintError,
        _1: err,
        Error: new Error()
      };
}

function funLike$1(op, x, xs, e) {
  return "" + op + " " + exprAppToString$1(x, xs) + ":" + indentBlock(e, 4) + "";
}

function defvarToString$1(x, e) {
  return "" + defvarLike$2("", x, e) + "";
}

function deffunToString$2(f, xs, b) {
  return "" + funLike$1("def", f, xs, b) + "";
}

function defgenToString$2(f, xs, b) {
  return "" + funLike$1("def", f, xs, b) + "";
}

function exprLamToString$2(xs, b) {
  return "lambda " + $$String.concat(",", xs) + ": " + b + "";
}

function exprYieldToString$2(e) {
  return "yield " + e + "";
}

function exprBgnToString$2(es, e) {
  return "" + listToString$2(Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ])) + "[-1]";
}

function exprCndToString$2(ebs, ob) {
  var ebs$1 = ob !== undefined ? Belt_List.concatMany([
          ebs,
          {
            hd: [
              "",
              ob
            ],
            tl: /* [] */0
          }
        ]) : ebs;
  var ebs$2 = Belt_List.map(ebs$1, (function (param) {
          return "if " + param[0] + ":" + indentBlock(param[1], 4) + "";
        }));
  return $$String.concat("else ", ebs$2);
}

function exprIfToString$2(e_cnd, e_thn, e_els) {
  return "" + e_thn + " if " + e_cnd + " else " + e_els + "";
}

function symbolToString$2(param) {
  var it = param.it;
  return {
          it: it,
          ann: {
            srcrange: param.ann,
            print: escapeName$1(it)
          }
        };
}

function printExp$2(param, context) {
  var it = param.it;
  var e;
  switch (it.TAG | 0) {
    case /* Con */0 :
        var c = it._0;
        e = {
          it: {
            TAG: /* Con */0,
            _0: c
          },
          ann: consumeContext$1(constantToString$2(c), context)
        };
        break;
    case /* Ref */1 :
        var x = it._0;
        e = {
          it: {
            TAG: /* Ref */1,
            _0: x
          },
          ann: consumeContext$1(escapeName$1(x), context)
        };
        break;
    case /* Set */2 :
        var x$1 = symbolToString$2(it._0);
        var e$1 = printExp$2(it._1, {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Set */2,
            _0: x$1,
            _1: e$1
          },
          ann: consumeContextStat$1(defvarLike$2("", x$1.ann.print, e$1.ann.print), context)
        };
        break;
    case /* Lam */3 :
        var b = it._1;
        var xs = Belt_List.map(it._0, symbolToString$2);
        var match = b.it;
        if (match[0]) {
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "In Python, a lambda body must contains exactly one expression",
                Error: new Error()
              };
        }
        var e$2 = printExp$2(match[1], {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Lam */3,
            _0: xs,
            _1: {
              it: [
                /* [] */0,
                e$2
              ],
              ann: {
                srcrange: b.ann,
                print: e$2.ann.print
              }
            }
          },
          ann: consumeContextWrap$1(exprLamToString$2(Belt_List.map(xs, (function (x) {
                          return x.ann.print;
                        })), e$2.ann.print), context)
        };
        break;
    case /* Let */4 :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "let-expressions are not supported by Python",
              Error: new Error()
            };
    case /* Letrec */5 :
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "letrec-expressions are not supported by Python",
              Error: new Error()
            };
    case /* AppPrm */6 :
        var es = Belt_List.map(it._1, (function (e, b) {
                return printExp$2(e, {
                            TAG: /* Expr */0,
                            _0: b
                          });
              }));
        var match$1 = exprAppPrmToString$1(it._0, es, context);
        var match$2 = match$1.it;
        e = {
          it: {
            TAG: /* AppPrm */6,
            _0: match$2[0],
            _1: match$2[1]
          },
          ann: match$1.ann
        };
        break;
    case /* App */7 :
        var e$3 = printExp$2(it._0, {
              TAG: /* Expr */0,
              _0: false
            });
        var es$1 = Belt_List.map(it._1, (function (e) {
                return printExp$2(e, {
                            TAG: /* Expr */0,
                            _0: false
                          });
              }));
        e = {
          it: {
            TAG: /* App */7,
            _0: e$3,
            _1: es$1
          },
          ann: consumeContext$1(exprAppToString$1(e$3.ann.print, Belt_List.map(es$1, (function (e) {
                          return e.ann.print;
                        }))), context)
        };
        break;
    case /* Bgn */8 :
        var es$2 = Belt_List.map(it._0, (function (e) {
                return printExp$2(e, {
                            TAG: /* Expr */0,
                            _0: false
                          });
              }));
        var e$4 = printExp$2(it._1, {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Bgn */8,
            _0: es$2,
            _1: e$4
          },
          ann: consumeContext$1(exprBgnToString$2(Belt_List.map(es$2, (function (e) {
                          return e.ann.print;
                        })), e$4.ann.print), context)
        };
        break;
    case /* If */9 :
        var e_cnd = printExp$2(it._0, {
              TAG: /* Expr */0,
              _0: true
            });
        var e_thn = printExp$2(it._1, {
              TAG: /* Expr */0,
              _0: true
            });
        var e_els = printExp$2(it._2, {
              TAG: /* Expr */0,
              _0: true
            });
        e = {
          it: {
            TAG: /* If */9,
            _0: e_cnd,
            _1: e_thn,
            _2: e_els
          },
          ann: consumeContextWrap$1(exprIfToString$2(e_cnd.ann.print, e_thn.ann.print, e_els.ann.print), context)
        };
        break;
    case /* Cnd */10 :
        if (context.TAG === /* Expr */0) {
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "Multi-armed conditionals in JavaScript is not supported by the translator yet.",
                Error: new Error()
              };
        }
        var context$1 = context._0;
        var ebs = Belt_List.map(it._0, (function (eb) {
                return [
                        printExp$2(eb[0], {
                              TAG: /* Expr */0,
                              _0: false
                            }),
                        printBlock$2(eb[1], context$1)
                      ];
              }));
        var ob = obToString$1(it._1, context$1);
        e = {
          it: {
            TAG: /* Cnd */10,
            _0: ebs,
            _1: ob
          },
          ann: exprCndToString$2(Belt_List.map(ebs, (function (param) {
                      return [
                              param[0].ann.print,
                              param[1].ann.print
                            ];
                    })), Belt_Option.map(ob, (function (b) {
                      return b.ann.print;
                    })))
        };
        break;
    case /* GLam */11 :
        var xs$1 = Belt_List.map(it._0, symbolToString$2);
        var b$1 = printBlock$2(it._1, /* Return */1);
        Belt_List.map(xs$1, (function (x) {
                return x.ann.print;
              }));
        throw {
              RE_EXN_ID: SMoLPrintError,
              _1: "In Python, lambdas can't be generators.",
              Error: new Error()
            };
        e = {
          it: {
            TAG: /* Lam */3,
            _0: xs$1,
            _1: b$1
          },
          ann: consumeContextWrap$1(undefined, context)
        };
        break;
    case /* Yield */12 :
        var e$5 = printExp$2(it._0, {
              TAG: /* Expr */0,
              _0: false
            });
        e = {
          it: {
            TAG: /* Yield */12,
            _0: e$5
          },
          ann: consumeContextWrap$1(exprYieldToString$2(e$5.ann.print), context)
        };
        break;
    
  }
  return {
          it: e.it,
          ann: {
            srcrange: param.ann,
            print: e.ann
          }
        };
}

function defToString$1(param) {
  var d = param.it;
  var d$1;
  switch (d.TAG | 0) {
    case /* Var */0 :
        var x = symbolToString$2(d._0);
        var e = printExp$2(d._1, {
              TAG: /* Expr */0,
              _0: false
            });
        d$1 = {
          it: {
            TAG: /* Var */0,
            _0: x,
            _1: e
          },
          ann: defvarToString$1(x.ann.print, e.ann.print)
        };
        break;
    case /* Fun */1 :
        var f = symbolToString$2(d._0);
        var xs = Belt_List.map(d._1, symbolToString$2);
        var b = printBlock$2(d._2, /* Return */1);
        d$1 = {
          it: {
            TAG: /* Fun */1,
            _0: f,
            _1: xs,
            _2: b
          },
          ann: deffunToString$2(f.ann.print, Belt_List.map(xs, (function (x) {
                      return x.ann.print;
                    })), b.ann.print)
        };
        break;
    case /* GFun */2 :
        var f$1 = symbolToString$2(d._0);
        var xs$1 = Belt_List.map(d._1, symbolToString$2);
        var b$1 = printBlock$2(d._2, /* Return */1);
        d$1 = {
          it: {
            TAG: /* GFun */2,
            _0: f$1,
            _1: xs$1,
            _2: b$1
          },
          ann: defgenToString$2(f$1.ann.print, Belt_List.map(xs$1, (function (x) {
                      return x.ann.print;
                    })), b$1.ann.print)
        };
        break;
    
  }
  return {
          it: d$1.it,
          ann: {
            srcrange: param.ann,
            print: d$1.ann
          }
        };
}

function obToString$1(ob, ctx) {
  return Belt_Option.map(ob, (function (b) {
                return printBlock$2(b, ctx);
              }));
}

function printBlock$2(param, context) {
  var b = param.it;
  var ts = Belt_List.map(b[0], (function (t) {
          return printTerm$2(t, /* Step */0);
        }));
  var e = printExp$2(b[1], {
        TAG: /* Stat */1,
        _0: context
      });
  var print = $$String.concat("\n", Belt_List.concatMany([
            Belt_List.map(ts, (function (t) {
                    return t.ann.print;
                  })),
            {
              hd: e.ann.print,
              tl: /* [] */0
            }
          ]));
  return {
          it: [
            ts,
            e
          ],
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function printTerm$2(param, ctx) {
  var srcrange = param.ann;
  var t = param.it;
  if (t.TAG === /* Def */0) {
    return mapAnn((function (v) {
                  return {
                          TAG: /* Def */0,
                          _0: v
                        };
                }), defToString$1({
                    it: t._0,
                    ann: srcrange
                  }));
  } else {
    return mapAnn((function (v) {
                  return {
                          TAG: /* Exp */1,
                          _0: v
                        };
                }), printExp$2({
                    it: t._0,
                    ann: srcrange
                  }, {
                    TAG: /* Stat */1,
                    _0: ctx
                  }));
  }
}

function printOutput$2(os) {
  var p = function (v) {
    switch (v.TAG | 0) {
      case /* Con */0 :
          return constantToString$2(v._0);
      case /* Lst */1 :
          throw {
                RE_EXN_ID: SMoLPrintError,
                _1: "Lists are not supported in JavaScript",
                Error: new Error()
              };
      case /* Vec */2 :
          return "[" + $$String.concat(", ", Belt_List.map(v._0, p)) + "]";
      
    }
  };
  return $$String.concat(" ", Belt_List.map(os, (function (o) {
                    if (o) {
                      return p(o._0);
                    } else {
                      return "error";
                    }
                  })));
}

function printProgramFull$2(insertPrintTopLevel, param) {
  printingTopLevel$1.contents = insertPrintTopLevel;
  var ts = Belt_List.map(param.it, (function (t) {
          return printTerm$2(t, /* TopLevel */2);
        }));
  var print = $$String.concat("\n", Belt_List.map(ts, (function (t) {
              return t.ann.print;
            })));
  return {
          it: ts,
          ann: {
            srcrange: param.ann,
            print: print
          }
        };
}

function printProgram$2(insertPrintTopLevel, p) {
  return printProgramFull$2(insertPrintTopLevel, p).ann.print;
}

function toString$5(t) {
  if (t.TAG === /* ParseError */0) {
    return toString$4(t._0);
  } else {
    return t._0;
  }
}

var TranslateError = {
  toString: toString$5
};

var SMoLTranslateError = /* @__PURE__ */Caml_exceptions.create("SMoL.SMoLTranslateError");

function translateOutput(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* ParseError */0,
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput$1(output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* PrintError */1,
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* ParseError */0,
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram$1(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* PrintError */1,
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* ParseError */0,
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull$1(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* PrintError */1,
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var JSTranslator = {
  translateOutput: translateOutput,
  translateProgram: translateProgram,
  translateProgramFull: translateProgramFull
};

function translateOutput$1(src) {
  var output;
  try {
    output = parseOutput(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* ParseError */0,
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printOutput$2(output);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* PrintError */1,
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgram$1(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* ParseError */0,
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgram$2(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* PrintError */1,
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

function translateProgramFull$1(printTopLevel, src) {
  var p;
  try {
    p = parseProgram(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SMoLParseError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* ParseError */0,
              _0: err._1
            },
            Error: new Error()
          };
    }
    throw err;
  }
  try {
    return printProgramFull$2(printTopLevel, p);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    if (err$1.RE_EXN_ID === SMoLPrintError) {
      throw {
            RE_EXN_ID: SMoLTranslateError,
            _1: {
              TAG: /* PrintError */1,
              _0: err$1._1
            },
            Error: new Error()
          };
    }
    throw err$1;
  }
}

var PYTranslator = {
  translateOutput: translateOutput$1,
  translateProgram: translateProgram$1,
  translateProgramFull: translateProgramFull$1
};

var Parser = {
  parseOutput: parseOutput,
  parseProgram: parseProgram
};

var SMoLPrinter = {
  printOutput: printOutput,
  printProgramFull: printProgramFull,
  printProgram: printProgram
};

var JSPrinter = {
  printOutput: printOutput$1,
  printProgramFull: printProgramFull$1,
  printProgram: printProgram$1
};

var PYPrinter = {
  printOutput: printOutput$2,
  printProgramFull: printProgramFull$2,
  printProgram: printProgram$2
};

export {
  Primitive ,
  SExprKind ,
  Arity ,
  TermKind ,
  ParseError ,
  SMoLParseError ,
  Parser ,
  SMoLPrintError ,
  SMoLPrinter ,
  JSPrinter ,
  PYPrinter ,
  TranslateError ,
  SMoLTranslateError ,
  JSTranslator ,
  PYTranslator ,
}
/* No side effect */
