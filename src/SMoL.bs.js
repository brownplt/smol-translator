// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$String from "rescript/lib/es6/string.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as SExpression from "@lukuangchen/s-expression/src/SExpression.bs.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var all_primitives = [
  /* Add */0,
  /* Sub */1,
  /* Mul */2,
  /* Div */3,
  /* Lt */4,
  /* Eq */5,
  /* Gt */6,
  /* Le */7,
  /* Ge */8,
  /* Ne */9,
  /* PairNew */10,
  /* PairRefRight */11,
  /* PairRefLeft */12,
  /* PairSetRight */13,
  /* PairSetLeft */14,
  /* VecNew */15,
  /* VecRef */16,
  /* VecSet */17,
  /* VecLen */18,
  /* Eqv */19,
  /* Err */20
];

function string_of_primitive(o) {
  switch (o) {
    case /* Add */0 :
        return "+";
    case /* Sub */1 :
        return "-";
    case /* Mul */2 :
        return "*";
    case /* Div */3 :
        return "/";
    case /* Lt */4 :
        return "<";
    case /* Eq */5 :
        return "=";
    case /* Gt */6 :
        return ">";
    case /* Le */7 :
        return "<=";
    case /* Ge */8 :
        return ">=";
    case /* Ne */9 :
        return "!=";
    case /* PairNew */10 :
        return "pair";
    case /* PairRefRight */11 :
        return "right";
    case /* PairRefLeft */12 :
        return "left";
    case /* PairSetRight */13 :
        return "set-right!";
    case /* PairSetLeft */14 :
        return "set-left!";
    case /* VecNew */15 :
        return "vec";
    case /* VecRef */16 :
        return "vec-ref";
    case /* VecSet */17 :
        return "vec-set!";
    case /* VecLen */18 :
        return "vec-len";
    case /* Eqv */19 :
        return "eq?";
    case /* Err */20 :
        return "error";
    
  }
}

function unannotate(x) {
  return x.it;
}

function indent(s, i) {
  var pad = Js_string.repeat(i, " ");
  return Js_string.replaceByRe(/\n/g, "\n" + pad, s);
}

function string_of_constant(c) {
  if (typeof c === "number") {
    return "#<void>";
  }
  switch (c.TAG | 0) {
    case /* Num */0 :
        return String(c._0);
    case /* Lgc */1 :
        if (c._0) {
          return "#t";
        } else {
          return "#f";
        }
    case /* Str */2 :
        return "\"" + $$String.escaped(c._0) + "\"";
    
  }
}

function string_of_result(r) {
  switch (r.TAG | 0) {
    case /* Con */0 :
        return string_of_constant(r._0);
    case /* Vec */1 :
    case /* Fun */2 :
        return "@" + String(r._0) + "";
    case /* PrmFun */3 :
        return string_of_primitive(r._0);
    
  }
}

function string_of_list(ss) {
  return "(" + $$String.concat(" ", ss) + ")";
}

function string_of_expr(e) {
  var c = e.it;
  switch (c.TAG | 0) {
    case /* Con */0 :
        return string_of_constant(c._0);
    case /* Ref */1 :
        return c._0.it;
    case /* Set */2 :
        var x = c._0.it;
        var e$1 = string_of_expr(c._1);
        if (!$$String.contains(e$1, /* '\n' */10)) {
          return string_of_list({
                      hd: "set!",
                      tl: {
                        hd: x,
                        tl: {
                          hd: e$1,
                          tl: /* [] */0
                        }
                      }
                    });
        }
        var prefix = "(set! " + x + " ";
        return "" + prefix + "" + indent(e$1, prefix.length) + ")";
    case /* Lam */3 :
        var xs = Belt_List.map(c._0, unannotate);
        var b = string_of_block(c._1);
        return "(lambda " + string_of_list(xs) + "\n  " + indent(b, 2) + ")";
    case /* Let */4 :
        var xes = Belt_List.map(c._0, string_of_xe);
        var b$1 = string_of_block(c._1);
        var xes$1 = Belt_List.map(xes, (function (param) {
                var x = param[0].it;
                return "[" + x + " " + indent(param[1], 2 + x.length | 0) + "]";
              }));
        var xes$2 = $$String.concat("\n", xes$1);
        var xes$3 = "(" + indent(xes$2, 1) + ")";
        return "(let " + indent(xes$3, 5) + "\n  " + indent(b$1, 2) + ")";
    case /* AppPrm */5 :
        var es = Belt_List.map(c._1, string_of_expr);
        var e$2 = string_of_primitive(c._0);
        return string_of_list({
                    hd: e$2,
                    tl: es
                  });
    case /* App */6 :
        var es$1 = Belt_List.map(c._1, string_of_expr);
        var e$3 = string_of_expr(c._0);
        return string_of_list({
                    hd: e$3,
                    tl: es$1
                  });
    case /* Bgn */7 :
        var es$2 = Belt_List.map(c._0, string_of_expr);
        var e$4 = string_of_expr(c._1);
        var b$2 = $$String.concat("\n", Belt_List.concatMany([
                  es$2,
                  {
                    hd: e$4,
                    tl: /* [] */0
                  }
                ]));
        return "(begin\n  " + indent(b$2, 2) + ")";
    case /* If */8 :
        var e_cnd = string_of_expr(c._0);
        var e_thn = string_of_expr(c._1);
        var e_els = string_of_expr(c._2);
        return "(if " + indent(e_cnd, 4) + "\n    " + indent(e_thn, 4) + "\n    " + indent(e_els, 4) + ")";
    case /* Cnd */9 :
        var ebs = Belt_List.map(c._0, string_of_eb);
        var ob = Belt_Option.map(c._1, string_of_block);
        var ebs$1 = ob !== undefined ? Belt_List.concatMany([
                ebs,
                {
                  hd: [
                    "else",
                    ob
                  ],
                  tl: /* [] */0
                }
              ]) : ebs;
        var ebs$2 = Belt_List.map(ebs$1, (function (param) {
                return "[" + param[0] + "\n " + indent(param[1], 1) + "]";
              }));
        var ebs$3 = $$String.concat("\n", ebs$2);
        return "(cond\n  " + indent(ebs$3, 2) + ")";
    
  }
}

function string_of_def(d) {
  var match = d.it;
  if (match.TAG === /* Var */0) {
    var x = match._0;
    var e = string_of_expr(match._1);
    return string_of_list({
                hd: "defvar",
                tl: {
                  hd: x.it,
                  tl: {
                    hd: e,
                    tl: /* [] */0
                  }
                }
              });
  } else {
    var f = match._0.it;
    var xs = Belt_List.map(match._1, unannotate);
    var b = string_of_block(match._2);
    return "(deffun " + string_of_list({
                hd: f,
                tl: xs
              }) + "\n  " + indent(b, 2) + ")";
  }
}

function string_of_xe(xe) {
  return [
          xe[0],
          string_of_expr(xe[1])
        ];
}

function string_of_eb(eb) {
  return [
          string_of_expr(eb[0]),
          string_of_block(eb[1])
        ];
}

function string_of_block(b) {
  return $$String.concat("\n", Belt_List.concatMany([
                  Belt_List.map(b[0], string_of_term),
                  {
                    hd: string_of_expr(b[1]),
                    tl: /* [] */0
                  }
                ]));
}

function string_of_term(t) {
  if (t.TAG === /* Def */0) {
    return string_of_def(t._0);
  } else {
    return string_of_expr(t._0);
  }
}

function string_of_program(ts) {
  return $$String.concat("\n", Belt_List.map(ts, string_of_term));
}

var ParseError = /* @__PURE__ */Caml_exceptions.create("SMoL.ParseError");

function stringOfExprs(es) {
  if (es) {
    if (es.tl) {
      return "" + String(Belt_List.length(es)) + " terms: " + $$String.concat(", ", Belt_List.map(es, SExpression.toString)) + "";
    } else {
      return "one term: " + SExpression.toString(es.hd) + "";
    }
  } else {
    return "no term";
  }
}

function stringOfParseError(err) {
  switch (err.TAG | 0) {
    case /* SExprParseError */0 :
        return "expecting a (valid) s-expression, but the input is not: " + err._0 + "";
    case /* SExprKindError */1 :
        return "expecting a " + err._1 + ", given " + SExpression.toString(err._2) + "";
    case /* SExprArityError */2 :
        return "expecting " + err._1 + ", given " + stringOfExprs(err._2) + "";
    case /* LiteralSymbolError */3 :
        return "expecting a literal value, given a symbol " + err._0 + "";
    case /* LiteralListError */4 :
        return "expecting a constant or a vector, given " + SExpression.toString(err._0) + "";
    case /* TermKindError */5 :
        return "expecting " + err._1 + ", given " + string_of_term(err._2) + "";
    
  }
}

function as_id(context, e) {
  var match = e.it;
  if (match.TAG === /* Atom */0) {
    var x = match._0;
    if (x.TAG !== /* Str */0) {
      return {
              it: x._0,
              ann: e.ann
            };
    }
    throw {
          RE_EXN_ID: ParseError,
          _1: {
            TAG: /* SExprKindError */1,
            _0: /* Atom */0,
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprKindError */1,
          _0: /* Atom */0,
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function as_list(context, e) {
  var match = e.it;
  if (match.TAG === /* Atom */0) {
    throw {
          RE_EXN_ID: ParseError,
          _1: {
            TAG: /* SExprKindError */1,
            _0: /* List */1,
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  if (match._0) {
    throw {
          RE_EXN_ID: ParseError,
          _1: {
            TAG: /* SExprKindError */1,
            _0: /* List */1,
            _1: context,
            _2: e
          },
          Error: new Error()
        };
  }
  return match._2;
}

function as_one_then_many(context, es) {
  if (es) {
    return [
            es.hd,
            es.tl
          ];
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* OneThenMany */3,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_many_then_one(context, es) {
  if (es) {
    var e1 = es.hd;
    var match = Belt_List.reverse(es.tl);
    if (match) {
      return [
              {
                hd: e1,
                tl: Belt_List.reverse(match.tl)
              },
              match.hd
            ];
    } else {
      return [
              /* [] */0,
              e1
            ];
    }
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ManyThenOne */4,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_one(context, es) {
  if (es) {
    if (es.tl) {
      throw {
            RE_EXN_ID: ParseError,
            _1: {
              TAG: /* SExprArityError */2,
              _0: /* ExactlyOne */0,
              _1: context,
              _2: es
            },
            Error: new Error()
          };
    }
    return es.hd;
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ExactlyOne */0,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_two(context, es) {
  if (es) {
    var match = es.tl;
    if (match && !match.tl) {
      return [
              es.hd,
              match.hd
            ];
    }
    
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ExactlyTwo */1,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_three(context, es) {
  if (es) {
    var match = es.tl;
    if (match) {
      var match$1 = match.tl;
      if (match$1 && !match$1.tl) {
        return [
                es.hd,
                match.hd,
                match$1.hd
              ];
      }
      
    }
    
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* ExactlyThree */2,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_one_then_many_then_one(context, es) {
  if (es) {
    var match = es.tl;
    if (match) {
      var e2 = match.hd;
      var e1 = es.hd;
      var match$1 = Belt_List.reverse(match.tl);
      if (match$1) {
        return [
                e1,
                {
                  hd: e2,
                  tl: Belt_List.reverse(match$1.tl)
                },
                match$1.hd
              ];
      } else {
        return [
                e1,
                /* [] */0,
                e2
              ];
      }
    }
    throw {
          RE_EXN_ID: ParseError,
          _1: {
            TAG: /* SExprArityError */2,
            _0: /* OneThenManyThenOne */5,
            _1: context,
            _2: es
          },
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* SExprArityError */2,
          _0: /* OneThenManyThenOne */5,
          _1: context,
          _2: es
        },
        Error: new Error()
      };
}

function as_expr(context, e) {
  if (e.TAG !== /* Def */0) {
    return e._0;
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* TermKindError */5,
          _0: /* Expression */1,
          _1: context,
          _2: e
        },
        Error: new Error()
      };
}

function constant_of_atom(_ann, atom) {
  if (atom.TAG === /* Str */0) {
    return {
            TAG: /* Con */0,
            _0: {
              TAG: /* Str */2,
              _0: atom._0
            }
          };
  }
  var x = atom._0;
  switch (x) {
    case "#f" :
        return {
                TAG: /* Con */0,
                _0: {
                  TAG: /* Lgc */1,
                  _0: false
                }
              };
    case "#t" :
        return {
                TAG: /* Con */0,
                _0: {
                  TAG: /* Lgc */1,
                  _0: true
                }
              };
    default:
      var tryNum = Belt_Option.map(Belt_Float.fromString(x), (function (n) {
              return {
                      TAG: /* Con */0,
                      _0: {
                        TAG: /* Num */0,
                        _0: n
                      }
                    };
            }));
      if (tryNum !== undefined) {
        return tryNum;
      }
      throw {
            RE_EXN_ID: ParseError,
            _1: {
              TAG: /* LiteralSymbolError */3,
              _0: x
            },
            Error: new Error()
          };
  }
}

function value_of_sexpr(e) {
  var ann = e.ann;
  var atom = e.it;
  if (atom.TAG === /* Atom */0) {
    return {
            it: constant_of_atom(ann, atom._0),
            ann: ann
          };
  }
  if (atom._0) {
    var es = Belt_List.map(atom._2, value_of_sexpr);
    return {
            it: {
              TAG: /* AppPrm */5,
              _0: /* VecNew */15,
              _1: es
            },
            ann: ann
          };
  }
  throw {
        RE_EXN_ID: ParseError,
        _1: {
          TAG: /* LiteralListError */4,
          _0: e
        },
        Error: new Error()
      };
}

function expr_of_atom(ann, atom) {
  if (atom.TAG === /* Str */0) {
    return {
            TAG: /* Con */0,
            _0: {
              TAG: /* Str */2,
              _0: atom._0
            }
          };
  }
  var x = atom._0;
  switch (x) {
    case "#f" :
        return {
                TAG: /* Con */0,
                _0: {
                  TAG: /* Lgc */1,
                  _0: false
                }
              };
    case "#t" :
        return {
                TAG: /* Con */0,
                _0: {
                  TAG: /* Lgc */1,
                  _0: true
                }
              };
    default:
      var tryNum = Belt_Option.map(Belt_Float.fromString(x), (function (n) {
              return {
                      TAG: /* Con */0,
                      _0: {
                        TAG: /* Num */0,
                        _0: n
                      }
                    };
            }));
      return Belt_Option.getWithDefault(tryNum, {
                  TAG: /* Ref */1,
                  _0: {
                    it: x,
                    ann: ann
                  }
                });
  }
}

function term_of_sexpr(e) {
  var ann = e.ann;
  var atom = e.it;
  if (atom.TAG === /* Atom */0) {
    return {
            TAG: /* Exp */1,
            _0: {
              it: expr_of_atom(ann, atom._0),
              ann: ann
            }
          };
  }
  if (atom._0) {
    var es = Belt_List.map(atom._2, value_of_sexpr);
    return {
            TAG: /* Exp */1,
            _0: {
              it: {
                TAG: /* AppPrm */5,
                _0: /* VecNew */15,
                _1: es
              },
              ann: ann
            }
          };
  }
  var es$1 = atom._2;
  if (es$1) {
    var match = es$1.hd.it;
    if (match.TAG === /* Atom */0) {
      var match$1 = match._0;
      if (match$1.TAG !== /* Str */0) {
        var exit = 0;
        switch (match$1._0) {
          case "!=" :
              return app_prm(ann, /* Ne */9, es$1.tl);
          case "*" :
              return app_prm(ann, /* Mul */2, es$1.tl);
          case "+" :
              return app_prm(ann, /* Add */0, es$1.tl);
          case "-" :
              return app_prm(ann, /* Sub */1, es$1.tl);
          case "/" :
              return app_prm(ann, /* Div */3, es$1.tl);
          case "<" :
              return app_prm(ann, /* Lt */4, es$1.tl);
          case "<=" :
              return app_prm(ann, /* Le */7, es$1.tl);
          case "=" :
              return app_prm(ann, /* Eq */5, es$1.tl);
          case ">" :
              return app_prm(ann, /* Gt */6, es$1.tl);
          case ">=" :
              return app_prm(ann, /* Ge */8, es$1.tl);
          case "begin" :
              var match$2 = as_many_then_one("one or more expressions", es$1.tl);
              var terms = Belt_List.map(Belt_List.map(match$2[0], term_of_sexpr), (function (param) {
                      return as_expr("an expression", param);
                    }));
              var result = as_expr("an expression", term_of_sexpr(match$2[1]));
              return {
                      TAG: /* Exp */1,
                      _0: {
                        it: {
                          TAG: /* Bgn */7,
                          _0: terms,
                          _1: result
                        },
                        ann: ann
                      }
                    };
          case "cond" :
              var branches = Belt_List.map(Belt_List.map(es$1.tl, (function (param) {
                          return as_list("a `cond` branch", param);
                        })), (function (param) {
                      return as_one_then_many_then_one("the condition followed by the branch", param);
                    }));
              var _parsed = /* [] */0;
              var _branches = branches;
              while(true) {
                var branches$1 = _branches;
                var parsed = _parsed;
                if (!branches$1) {
                  return {
                          TAG: /* Exp */1,
                          _0: {
                            it: {
                              TAG: /* Cnd */9,
                              _0: Belt_List.reverse(parsed),
                              _1: undefined
                            },
                            ann: ann
                          }
                        };
                }
                var match$3 = branches$1.hd;
                var $$case = match$3[0];
                var match$4 = $$case.it;
                if (match$4.TAG === /* Atom */0) {
                  var match$5 = match$4._0;
                  if (match$5.TAG !== /* Str */0 && match$5._0 === "else" && !branches$1.tl) {
                    var terms$1 = Belt_List.map(match$3[1], term_of_sexpr);
                    var result$1 = as_expr("an expression", term_of_sexpr(match$3[2]));
                    return {
                            TAG: /* Exp */1,
                            _0: {
                              it: {
                                TAG: /* Cnd */9,
                                _0: Belt_List.reverse(parsed),
                                _1: [
                                  terms$1,
                                  result$1
                                ]
                              },
                              ann: ann
                            }
                          };
                  }
                  
                }
                var $$case$1 = as_expr("a (conditional) expression", term_of_sexpr($$case));
                var terms$2 = Belt_List.map(match$3[1], term_of_sexpr);
                var result$2 = as_expr("an expression", term_of_sexpr(match$3[2]));
                _branches = branches$1.tl;
                _parsed = {
                  hd: [
                    $$case$1,
                    [
                      terms$2,
                      result$2
                    ]
                  ],
                  tl: parsed
                };
                continue ;
              };
          case "deffun" :
              var match$6 = as_one_then_many_then_one("a function header and a body", es$1.tl);
              var match$7 = as_one_then_many("function name followed by parameters", as_list("function name and parameters", match$6[0]));
              var fun = as_id("a function name", match$7[0]);
              var args = Belt_List.map(match$7[1], (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$3 = Belt_List.map(match$6[1], term_of_sexpr);
              var result$3 = as_expr("an expression to be returned", term_of_sexpr(match$6[2]));
              return {
                      TAG: /* Def */0,
                      _0: {
                        it: {
                          TAG: /* Fun */1,
                          _0: fun,
                          _1: args,
                          _2: [
                            terms$3,
                            result$3
                          ]
                        },
                        ann: ann
                      }
                    };
          case "defvar" :
              var match$8 = as_two("a variable and an expression", es$1.tl);
              var x = as_id("a variable name", match$8[0]);
              var e$1 = as_expr("an expression", term_of_sexpr(match$8[1]));
              return {
                      TAG: /* Def */0,
                      _0: {
                        it: {
                          TAG: /* Var */0,
                          _0: x,
                          _1: e$1
                        },
                        ann: ann
                      }
                    };
          case "eq?" :
          case "equal?" :
          case "eqv?" :
              exit = 2;
              break;
          case "error" :
              return app_prm(ann, /* Err */20, es$1.tl);
          case "if" :
              var match$9 = as_three("three expressions (i.e., a condition, the \"then\" branch, and the \"else\" branch)", es$1.tl);
              var e_cnd = as_expr("a (conditional) expression", term_of_sexpr(match$9[0]));
              var e_thn = as_expr("an expression", term_of_sexpr(match$9[1]));
              var e_els = as_expr("an expression", term_of_sexpr(match$9[2]));
              return {
                      TAG: /* Exp */1,
                      _0: {
                        it: {
                          TAG: /* If */8,
                          _0: e_cnd,
                          _1: e_thn,
                          _2: e_els
                        },
                        ann: ann
                      }
                    };
          case "lambda" :
              var match$10 = as_one_then_many_then_one("the function signature followed by the function body", es$1.tl);
              var args$1 = Belt_List.map(as_list("function parameters", match$10[0]), (function (param) {
                      return as_id("a parameter", param);
                    }));
              var terms$4 = Belt_List.map(match$10[1], term_of_sexpr);
              var result$4 = as_expr("an expression to be returned", term_of_sexpr(match$10[2]));
              return {
                      TAG: /* Exp */1,
                      _0: {
                        it: {
                          TAG: /* Lam */3,
                          _0: args$1,
                          _1: [
                            terms$4,
                            result$4
                          ]
                        },
                        ann: ann
                      }
                    };
          case "left" :
              return app_prm(ann, /* PairRefLeft */12, es$1.tl);
          case "let" :
              var match$11 = as_one_then_many_then_one("the bindings followed by the body", es$1.tl);
              var xes = Belt_List.map(Belt_List.map(as_list("variable-expression pairs", match$11[0]), (function (param) {
                          return as_list("a variable and an expression", param);
                        })), (function (param) {
                      return as_two("a variable and an expression", param);
                    }));
              var xes$1 = Belt_List.map(xes, (function (param) {
                      var x = as_id("a variable to be bound", param[0]);
                      var e = as_expr("an expression", term_of_sexpr(param[1]));
                      return [
                              x,
                              e
                            ];
                    }));
              var ts = Belt_List.map(match$11[1], term_of_sexpr);
              var result$5 = as_expr("an expression to be return", term_of_sexpr(match$11[2]));
              return {
                      TAG: /* Exp */1,
                      _0: {
                        it: {
                          TAG: /* Let */4,
                          _0: xes$1,
                          _1: [
                            ts,
                            result$5
                          ]
                        },
                        ann: ann
                      }
                    };
          case "mpair" :
          case "pair" :
              return app_prm(ann, /* PairNew */10, es$1.tl);
          case "quote" :
              var e$2 = as_one("a quoted value", es$1.tl);
              return {
                      TAG: /* Exp */1,
                      _0: value_of_sexpr(e$2)
                    };
          case "right" :
              return app_prm(ann, /* PairRefRight */11, es$1.tl);
          case "set!" :
              var match$12 = as_two("a variable and an expression", es$1.tl);
              var x$1 = as_id("a variable to be set", match$12[0]);
              var e$3 = as_expr("an expression", term_of_sexpr(match$12[1]));
              return {
                      TAG: /* Exp */1,
                      _0: {
                        it: {
                          TAG: /* Set */2,
                          _0: x$1,
                          _1: e$3
                        },
                        ann: ann
                      }
                    };
          case "set-left!" :
              return app_prm(ann, /* PairSetLeft */14, es$1.tl);
          case "set-right!" :
              return app_prm(ann, /* PairSetRight */13, es$1.tl);
          case "mvec" :
          case "vec" :
              return app_prm(ann, /* VecNew */15, es$1.tl);
          case "vec-len" :
          case "vlen" :
              return app_prm(ann, /* VecLen */18, es$1.tl);
          case "vec-ref" :
          case "vref" :
              return app_prm(ann, /* VecRef */16, es$1.tl);
          case "vec-set!" :
          case "vset!" :
              return app_prm(ann, /* VecSet */17, es$1.tl);
          default:
            
        }
        if (exit === 2) {
          return app_prm(ann, /* Eqv */19, es$1.tl);
        }
        
      }
      
    }
    
  }
  var match$13 = as_one_then_many("a function call/application, which includes a function and then one ore more arguments", es$1);
  var e$4 = as_expr("a function", term_of_sexpr(match$13[0]));
  var es$2 = Belt_List.map(Belt_List.map(match$13[1], term_of_sexpr), (function (param) {
          return as_expr("an argument", param);
        }));
  return {
          TAG: /* Exp */1,
          _0: {
            it: {
              TAG: /* App */6,
              _0: e$4,
              _1: es$2
            },
            ann: ann
          }
        };
}

function app_prm(ann, p, es) {
  var es$1 = Belt_List.map(Belt_List.map(es, term_of_sexpr), (function (param) {
          return as_expr("an argument", param);
        }));
  return {
          TAG: /* Exp */1,
          _0: {
            it: {
              TAG: /* AppPrm */5,
              _0: p,
              _1: es$1
            },
            ann: ann
          }
        };
}

function terms_of_sexprs(es) {
  return Belt_List.map(es, term_of_sexpr);
}

function terms_of_string(src) {
  var sexpr;
  try {
    sexpr = SExpression.fromString(src);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === SExpression.ParseError) {
      throw {
            RE_EXN_ID: ParseError,
            _1: {
              TAG: /* SExprParseError */0,
              _0: SExpression.$$Error.toString(err._1)
            },
            Error: new Error()
          };
    }
    throw err;
  }
  return Belt_List.map(sexpr, term_of_sexpr);
}

var Impossible = /* @__PURE__ */Caml_exceptions.create("SMoL.Impossible");

function as_many_then_one$1(es) {
  if (es) {
    var e1 = es.hd;
    var match = Belt_List.reverse(es.tl);
    if (match) {
      return [
              {
                hd: e1,
                tl: Belt_List.reverse(match.tl)
              },
              match.hd
            ];
    } else {
      return [
              /* [] */0,
              e1
            ];
    }
  }
  throw {
        RE_EXN_ID: Impossible,
        _1: "unsafe",
        Error: new Error()
      };
}

function maybe_wrap(ctx, p, code) {
  if (typeof ctx === "number") {
    return code;
  }
  if (!ctx._0) {
    return code;
  }
  if (p >= 4) {
    return code;
  }
  switch (p) {
    case /* Add */0 :
    case /* Sub */1 :
    case /* Mul */2 :
    case /* Div */3 :
        return "(" + code + ")";
    
  }
}

function string_of_constant$1(c) {
  if (typeof c === "number") {
    return "null";
  }
  switch (c.TAG | 0) {
    case /* Num */0 :
        return String(c._0);
    case /* Lgc */1 :
        if (c._0) {
          return "true";
        } else {
          return "false";
        }
    case /* Str */2 :
        return "\"" + $$String.escaped(c._0) + "\"";
    
  }
}

function string_of_list$1(ss) {
  return "(" + $$String.concat(", ", ss) + ")";
}

function string_of_identifier(x) {
  var re = /-./g;
  var matchFn = function (matchPart, _offset, _wholeString) {
    return matchPart.substring(1).toUpperCase();
  };
  var x$1 = x.replace(re, matchFn);
  if (x$1 === "var") {
    return "$var";
  } else if (x$1 === "+") {
    return "(function(x, y) { return x + y; })";
  } else if (x$1 === "-") {
    return "(function(x, y) { return x - y; })";
  } else if (x$1 === "*") {
    return "(function(x, y) { return x * y; })";
  } else if (x$1 === "/") {
    return "(function(x, y) { return x / y; })";
  } else {
    return x$1;
  }
}

function string_of_expr_lam(xs, b) {
  return "function " + string_of_list$1(xs) + " {\n  " + indent(b, 2) + "\n}";
}

function string_of_expr_app_prm(p, es) {
  switch (p) {
    case /* Add */0 :
        return "" + $$String.concat(" + ", es) + "";
    case /* Sub */1 :
        return "" + $$String.concat(" - ", es) + "";
    case /* Mul */2 :
        return "" + $$String.concat(" * ", es) + "";
    case /* Div */3 :
        return "" + $$String.concat(" / ", es) + "";
    case /* Lt */4 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match = es.tl;
        if (match && !match.tl) {
          return "" + es.hd + " < " + match.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Eq */5 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$1 = es.tl;
        if (match$1 && !match$1.tl) {
          return "" + es.hd + " === " + match$1.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Gt */6 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$2 = es.tl;
        if (match$2 && !match$2.tl) {
          return "" + es.hd + " > " + match$2.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Le */7 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$3 = es.tl;
        if (match$3 && !match$3.tl) {
          return "" + es.hd + " <= " + match$3.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Ge */8 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$4 = es.tl;
        if (match$4 && !match$4.tl) {
          return "" + es.hd + " >= " + match$4.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Ne */9 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$5 = es.tl;
        if (match$5 && !match$5.tl) {
          return "" + es.hd + " != " + match$5.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairNew */10 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$6 = es.tl;
        if (match$6 && !match$6.tl) {
          return "[ " + es.hd + ", " + match$6.hd + " ]";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairRefRight */11 :
        if (es && !es.tl) {
          return "" + es.hd + "[1]";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairRefLeft */12 :
        if (es && !es.tl) {
          return "" + es.hd + "[0]";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairSetRight */13 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$7 = es.tl;
        if (match$7 && !match$7.tl) {
          return "" + es.hd + "[1]=" + match$7.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairSetLeft */14 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$8 = es.tl;
        if (match$8 && !match$8.tl) {
          return "" + es.hd + "[0]=" + match$8.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* VecNew */15 :
        return "[ " + $$String.concat(", ", es) + " ]";
    case /* VecRef */16 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$9 = es.tl;
        if (match$9 && !match$9.tl) {
          return "" + es.hd + "[" + match$9.hd + "]";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* VecSet */17 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$10 = es.tl;
        if (!match$10) {
          return "/* a primitive operation not supported yet */";
        }
        var match$11 = match$10.tl;
        if (match$11 && !match$11.tl) {
          return "" + es.hd + "[" + match$10.hd + "] = " + match$11.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* VecLen */18 :
        if (es && !es.tl) {
          return "" + es.hd + ".length";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Eqv */19 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$12 = es.tl;
        if (match$12 && !match$12.tl) {
          return "" + es.hd + " === " + match$12.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Err */20 :
        if (es && !es.tl) {
          return "throw " + es.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    
  }
}

function string_of_expr_app(e, es) {
  return "" + e + "" + string_of_list$1(es) + "";
}

function string_of_expr_bgn(es, e) {
  return "(" + $$String.concat(", ", Belt_List.concatMany([
                  es,
                  {
                    hd: e,
                    tl: /* [] */0
                  }
                ])) + ")";
}

function string_of_expr_if(e_cnd, e_thn, e_els) {
  return "(" + e_cnd + " ? " + e_thn + " : " + e_els + ")";
}

function string_of_expr_let(xes, b) {
  return "((" + $$String.concat(", ", Belt_List.map(xes, (function (param) {
                    return param[0];
                  }))) + ")=>{" + b + "})(" + $$String.concat(", ", Belt_List.map(xes, (function (param) {
                    return param[1];
                  }))) + ")";
}

function consider_context(ctx, code) {
  if (typeof ctx === "number") {
    if (ctx !== 0) {
      return "return " + code + ";";
    } else {
      return "" + code + ";";
    }
  } else {
    return code;
  }
}

function string_of_expr$1(ctx, e) {
  var c = e.it;
  switch (c.TAG | 0) {
    case /* Con */0 :
        return consider_context(ctx, string_of_constant$1(c._0));
    case /* Ref */1 :
        return consider_context(ctx, string_of_identifier(c._0.it));
    case /* Set */2 :
        var x = string_of_identifier(c._0.it);
        var e$1 = string_of_expr$1(/* Expr */{
              _0: false
            }, c._1);
        var itself = "" + x + " = " + e$1 + "";
        if (typeof ctx === "number") {
          if (ctx !== 0) {
            return "return " + itself + ";";
          } else {
            return "" + itself + ";";
          }
        } else if (ctx._0) {
          return "(" + itself + ")";
        } else {
          return itself;
        }
    case /* Lam */3 :
        return consider_context(ctx, string_of_expr_lam(Belt_List.map(Belt_List.map(c._0, unannotate), string_of_identifier), string_of_block$1(/* Return */1, c._1)));
    case /* Let */4 :
        return consider_context(ctx, string_of_expr_let(Belt_List.map(c._0, string_of_xe$1), string_of_block$1(/* Return */1, c._1)));
    case /* AppPrm */5 :
        var p = c._0;
        var partial_arg = /* Expr */{
          _0: true
        };
        var o = maybe_wrap(ctx, p, string_of_expr_app_prm(p, Belt_List.map(c._1, (function (param) {
                        return string_of_expr$1(partial_arg, param);
                      }))));
        if (p !== /* Err */20) {
          return consider_context(ctx, o);
        } else {
          return o;
        }
    case /* App */6 :
        var partial_arg$1 = /* Expr */{
          _0: false
        };
        return consider_context(ctx, string_of_expr_app(string_of_expr$1(/* Expr */{
                            _0: false
                          }, c._0), Belt_List.map(c._1, (function (param) {
                              return string_of_expr$1(partial_arg$1, param);
                            }))));
    case /* Bgn */7 :
        var partial_arg$2 = /* Expr */{
          _0: false
        };
        return consider_context(ctx, string_of_expr_bgn(Belt_List.map(c._0, (function (param) {
                              return string_of_expr$1(partial_arg$2, param);
                            })), string_of_expr$1(/* Expr */{
                            _0: false
                          }, c._1)));
    case /* If */8 :
        return consider_context(ctx, string_of_expr_if(string_of_expr$1(/* Expr */{
                            _0: false
                          }, c._0), string_of_expr$1(/* Expr */{
                            _0: false
                          }, c._1), string_of_expr$1(/* Expr */{
                            _0: false
                          }, c._2)));
    case /* Cnd */9 :
        var ebs = Belt_List.map(c._0, (function (param) {
                return string_of_eb$1(ctx, param);
              }));
        var ob = Belt_Option.map(c._1, (function (param) {
                return string_of_block$1(ctx, param);
              }));
        var ob$1 = ob !== undefined ? " else {\n  " + indent(ob, 2) + "\n}" : "";
        var ebs$1 = Belt_List.map(ebs, (function (param) {
                return "if (" + param[0] + ") {\n  " + indent(param[1], 2) + "\n}";
              }));
        var ebs$2 = $$String.concat(" else ", ebs$1);
        return ebs$2 + ob$1;
    
  }
}

function string_of_def$1(d) {
  var match = d.it;
  if (match.TAG === /* Var */0) {
    var x = match._0;
    var e = string_of_expr$1(/* Expr */{
          _0: false
        }, match._1);
    return "let " + string_of_identifier(x.it) + " = " + e + ";";
  } else {
    var f = string_of_identifier(match._0.it);
    var xs = Belt_List.map(Belt_List.map(match._1, unannotate), string_of_identifier);
    var b = string_of_block$1(/* Return */1, match._2);
    return "function " + f + "" + string_of_list$1(xs) + " {\n  " + indent(b, 2) + "\n}";
  }
}

function string_of_xe$1(xe) {
  return [
          string_of_identifier(xe[0].it),
          string_of_expr$1(/* Expr */{
                _0: false
              }, xe[1])
        ];
}

function string_of_eb$1(ctx, eb) {
  return [
          string_of_expr$1(/* Expr */{
                _0: false
              }, eb[0]),
          string_of_block$1(ctx, eb[1])
        ];
}

function string_of_block$1(ctx, b) {
  return $$String.concat("\n", Belt_List.concatMany([
                  Belt_List.map(b[0], string_of_term$1),
                  {
                    hd: string_of_expr$1(ctx, b[1]),
                    tl: /* [] */0
                  }
                ]));
}

function string_of_term$1(t) {
  if (t.TAG === /* Def */0) {
    return string_of_def$1(t._0);
  } else {
    return string_of_expr$1(/* Stat */0, t._0);
  }
}

function as_many_then_one$2(es) {
  if (es) {
    var e1 = es.hd;
    var match = Belt_List.reverse(es.tl);
    if (match) {
      return [
              {
                hd: e1,
                tl: Belt_List.reverse(match.tl)
              },
              match.hd
            ];
    } else {
      return [
              /* [] */0,
              e1
            ];
    }
  }
  throw {
        RE_EXN_ID: Impossible,
        _1: "unsafe",
        Error: new Error()
      };
}

function translate_expressions(results) {
  var ts = terms_of_string(results);
  var partial_arg = /* Expr */{
    _0: true
  };
  return $$String.concat(" ", Belt_List.map(Belt_List.map(ts, (function (param) {
                        return as_expr("expr", param);
                      })), (function (param) {
                    return string_of_expr$1(partial_arg, param);
                  })));
}

function translate_program(program) {
  var ts = terms_of_string(program);
  return $$String.concat("\n", Belt_List.map(ts, (function (t) {
                    if (t.TAG === /* Def */0) {
                      return string_of_term$1(t);
                    }
                    var e = t._0;
                    var match = e.it;
                    switch (match.TAG | 0) {
                      case /* Set */2 :
                          return "" + string_of_expr$1(/* Expr */{
                                      _0: false
                                    }, e) + ";";
                      case /* AppPrm */5 :
                          if (match._0 === 17) {
                            return "" + string_of_expr$1(/* Expr */{
                                        _0: false
                                      }, e) + ";";
                          }
                          break;
                      default:
                        
                    }
                    return "console.log(" + string_of_expr$1(/* Expr */{
                                _0: false
                              }, e) + ");";
                  })));
}

function translate_block(program) {
  var ts = terms_of_string(program);
  var match = as_many_then_one$2(ts);
  var e = as_expr("result", match[1]);
  return string_of_block$1(/* Return */1, [
              match[0],
              e
            ]);
}

var base_env = Js_dict.fromArray(Belt_Array.map(all_primitives, (function (p) {
            return [
                    string_of_primitive(p),
                    /* BuiltIn */0
                  ];
          })));

function make_global_env(xs) {
  var env = Js_dict.entries(base_env);
  return Js_dict.fromArray(Belt_Array.concat(env, Belt_List.toArray(Belt_List.map(xs, (function (x) {
                            return [
                                    x,
                                    /* Global */1
                                  ];
                          })))));
}

function make_local_env(env, xs) {
  var env$1 = Js_dict.entries(env);
  var env$2 = Belt_Array.map(env$1, (function (param) {
          var p = param[1];
          var p$1 = p >= 3 ? /* NonLocal */2 : p;
          return [
                  param[0],
                  p$1
                ];
        }));
  return Js_dict.fromArray(Belt_Array.concat(env$2, Belt_List.toArray(Belt_List.map(xs, (function (x) {
                            return [
                                    x,
                                    /* Local */3
                                  ];
                          })))));
}

function string_of_constant$2(c) {
  if (typeof c === "number") {
    return "None";
  }
  switch (c.TAG | 0) {
    case /* Num */0 :
        return String(c._0);
    case /* Lgc */1 :
        if (c._0) {
          return "True";
        } else {
          return "False";
        }
    case /* Str */2 :
        return "\"" + $$String.escaped(c._0) + "\"";
    
  }
}

function string_of_list$2(ss) {
  return "(" + $$String.concat(", ", ss) + ")";
}

function string_of_identifier$1(x) {
  if (x === "-") {
    return x;
  }
  var re = /-/g;
  var matchFn = function (_matchPart, _offset, _wholeString) {
    return "_";
  };
  return x.replace(re, matchFn);
}

function string_of_expr_lam$1(xs, b) {
  if (xs === /* [] */0) {
    return "lambda: " + b + "";
  } else {
    return "lambda " + $$String.concat(",", xs) + ": " + b + "";
  }
}

function wrap(ctx, code) {
  var match = ctx.node;
  if (typeof match === "number") {
    if (match !== 0) {
      return "return " + code + "";
    } else {
      return code;
    }
  } else if (match._0) {
    return "(" + code + ")";
  } else {
    return code;
  }
}

function ret(ctx, code) {
  var match = ctx.node;
  if (typeof match === "number" && match !== 0) {
    return "return " + code + "";
  } else {
    return code;
  }
}

function string_of_expr_app_prm$1(ctx, p, es) {
  switch (p) {
    case /* Add */0 :
        return wrap(ctx, "" + $$String.concat(" + ", es) + "");
    case /* Sub */1 :
        return wrap(ctx, "" + $$String.concat(" - ", es) + "");
    case /* Mul */2 :
        return wrap(ctx, "" + $$String.concat(" * ", es) + "");
    case /* Div */3 :
        return wrap(ctx, "" + $$String.concat(" / ", es) + "");
    case /* Lt */4 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match = es.tl;
        if (match && !match.tl) {
          return wrap(ctx, "" + es.hd + " < " + match.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Eq */5 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$1 = es.tl;
        if (match$1 && !match$1.tl) {
          return wrap(ctx, "" + es.hd + " == " + match$1.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Gt */6 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$2 = es.tl;
        if (match$2 && !match$2.tl) {
          return wrap(ctx, "" + es.hd + " > " + match$2.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Le */7 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$3 = es.tl;
        if (match$3 && !match$3.tl) {
          return wrap(ctx, "" + es.hd + " <= " + match$3.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Ge */8 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$4 = es.tl;
        if (match$4 && !match$4.tl) {
          return wrap(ctx, "" + es.hd + " >= " + match$4.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Ne */9 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$5 = es.tl;
        if (match$5 && !match$5.tl) {
          return wrap(ctx, "" + es.hd + " != " + match$5.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairNew */10 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$6 = es.tl;
        if (match$6 && !match$6.tl) {
          return ret(ctx, "[ " + es.hd + ", " + match$6.hd + " ]");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairRefRight */11 :
        if (es && !es.tl) {
          return wrap(ctx, "" + es.hd + "[1]");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairRefLeft */12 :
        if (es && !es.tl) {
          return wrap(ctx, "" + es.hd + "[0]");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* PairSetRight */13 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$7 = es.tl;
        if (!match$7) {
          return "/* a primitive operation not supported yet */";
        }
        if (match$7.tl) {
          return "/* a primitive operation not supported yet */";
        }
        var e2 = match$7.hd;
        var e1 = es.hd;
        var match$8 = ctx.node;
        if (typeof match$8 === "number") {
          if (match$8 !== 0) {
            return "return " + e1 + ".__setitem__(1, " + e2 + ")";
          } else {
            return "" + e1 + "[1] = " + e2 + "";
          }
        } else if (match$8._0) {
          return "" + e1 + ".__setitem__(1, " + e2 + ")";
        } else {
          return "" + e1 + ".__setitem__(1, " + e2 + ")";
        }
    case /* PairSetLeft */14 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$9 = es.tl;
        if (!match$9) {
          return "/* a primitive operation not supported yet */";
        }
        if (match$9.tl) {
          return "/* a primitive operation not supported yet */";
        }
        var e2$1 = match$9.hd;
        var e1$1 = es.hd;
        var match$10 = ctx.node;
        if (typeof match$10 === "number") {
          if (match$10 !== 0) {
            return "return " + e1$1 + ".__setitem__(0, " + e2$1 + ")";
          } else {
            return "" + e1$1 + "[0] = " + e2$1 + "";
          }
        } else if (match$10._0) {
          return "" + e1$1 + ".__setitem__(0, " + e2$1 + ")";
        } else {
          return "" + e1$1 + ".__setitem__(0, " + e2$1 + ")";
        }
    case /* VecNew */15 :
        return ret(ctx, "[" + $$String.concat(", ", es) + "]");
    case /* VecRef */16 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$11 = es.tl;
        if (match$11 && !match$11.tl) {
          return ret(ctx, "" + es.hd + "[" + match$11.hd + "]");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* VecSet */17 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$12 = es.tl;
        if (!match$12) {
          return "/* a primitive operation not supported yet */";
        }
        var match$13 = match$12.tl;
        if (!match$13) {
          return "/* a primitive operation not supported yet */";
        }
        if (match$13.tl) {
          return "/* a primitive operation not supported yet */";
        }
        var e3 = match$13.hd;
        var e2$2 = match$12.hd;
        var e1$2 = es.hd;
        var match$14 = ctx.node;
        if (typeof match$14 === "number") {
          if (match$14 !== 0) {
            return "return " + e1$2 + ".__setitem__(" + e2$2 + ", " + e3 + ")";
          } else {
            return "" + e1$2 + "[" + e2$2 + "] = " + e3 + "";
          }
        } else if (match$14._0) {
          return "" + e1$2 + ".__setitem__(" + e2$2 + ", " + e3 + ")";
        } else {
          return "" + e1$2 + ".__setitem__(" + e2$2 + ", " + e3 + ")";
        }
    case /* VecLen */18 :
        if (es && !es.tl) {
          return ret(ctx, "len(" + es.hd + ")");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Eqv */19 :
        if (!es) {
          return "/* a primitive operation not supported yet */";
        }
        var match$15 = es.tl;
        if (match$15 && !match$15.tl) {
          return wrap(ctx, "" + es.hd + " == " + match$15.hd + "");
        } else {
          return "/* a primitive operation not supported yet */";
        }
    case /* Err */20 :
        if (es && !es.tl) {
          return "raise " + es.hd + "";
        } else {
          return "/* a primitive operation not supported yet */";
        }
    
  }
}

function string_of_expr_app$1(e, es) {
  return "" + e + "" + string_of_list$2(es) + "";
}

function consider_context$1(ctx, code) {
  var match = ctx.node;
  if (typeof match === "number" && match !== 0) {
    return "return " + code + "";
  } else {
    return code;
  }
}

function string_of_expr$2(ctx, e) {
  var c = e.it;
  switch (c.TAG | 0) {
    case /* Con */0 :
        return consider_context$1(ctx, string_of_constant$2(c._0));
    case /* Ref */1 :
        return consider_context$1(ctx, string_of_identifier$1(c._0.it));
    case /* Set */2 :
        var x = c._0;
        Js_array.unshift(x.it, ctx.refs);
        var x$1 = string_of_identifier$1(x.it);
        var e$1 = string_of_expr$2({
              node: /* Expr */{
                _0: false
              },
              block: ctx.block,
              refs: ctx.refs,
              env: ctx.env
            }, c._1);
        var match = ctx.node;
        if (typeof match === "number") {
          if (match !== 0) {
            return "return (" + x$1 + " := " + e$1 + ")";
          } else {
            return "" + x$1 + " = " + e$1 + "";
          }
        } else if (match._0) {
          return "(" + x$1 + " := " + e$1 + ")";
        } else {
          return "" + x$1 + " := " + e$1 + "";
        }
    case /* Lam */3 :
        var xs = c._0;
        return consider_context$1(ctx, string_of_expr_lam$1(Belt_List.map(Belt_List.map(xs, unannotate), string_of_identifier$1), string_of_block$2({
                            node: /* Expr */{
                              _0: false
                            },
                            block: ctx.block,
                            refs: ctx.refs,
                            env: ctx.env
                          }, xs, c._1)));
    case /* Let */4 :
        var xes = c._0;
        return consider_context$1(ctx, (string_of_block$2({
                          node: /* Return */1,
                          block: ctx.block,
                          refs: ctx.refs,
                          env: ctx.env
                        }, Belt_List.map(xes, (function (param) {
                                return param[0];
                              })), c._1), Belt_List.map(xes, (function (param) {
                            return [
                                    string_of_identifier$1(param[0].it),
                                    string_of_expr$2({
                                          node: /* Expr */{
                                            _0: false
                                          },
                                          block: ctx.block,
                                          refs: ctx.refs,
                                          env: ctx.env
                                        }, param[1])
                                  ];
                          })), "\"...a let-expression...\""));
    case /* AppPrm */5 :
        var p = c._0;
        if (p !== 17) {
          var partial_arg_node = /* Expr */{
            _0: true
          };
          var partial_arg_block = ctx.block;
          var partial_arg_refs = ctx.refs;
          var partial_arg_env = ctx.env;
          var partial_arg = {
            node: partial_arg_node,
            block: partial_arg_block,
            refs: partial_arg_refs,
            env: partial_arg_env
          };
          return string_of_expr_app_prm$1(ctx, p, Belt_List.map(c._1, (function (param) {
                            return string_of_expr$2(partial_arg, param);
                          })));
        }
        var partial_arg_node$1 = /* Expr */{
          _0: false
        };
        var partial_arg_block$1 = ctx.block;
        var partial_arg_refs$1 = ctx.refs;
        var partial_arg_env$1 = ctx.env;
        var partial_arg$1 = {
          node: partial_arg_node$1,
          block: partial_arg_block$1,
          refs: partial_arg_refs$1,
          env: partial_arg_env$1
        };
        return string_of_expr_app_prm$1(ctx, /* VecSet */17, Belt_List.map(c._1, (function (param) {
                          return string_of_expr$2(partial_arg$1, param);
                        })));
    case /* App */6 :
        var partial_arg_node$2 = /* Expr */{
          _0: false
        };
        var partial_arg_block$2 = ctx.block;
        var partial_arg_refs$2 = ctx.refs;
        var partial_arg_env$2 = ctx.env;
        var partial_arg$2 = {
          node: partial_arg_node$2,
          block: partial_arg_block$2,
          refs: partial_arg_refs$2,
          env: partial_arg_env$2
        };
        return consider_context$1(ctx, string_of_expr_app$1(string_of_expr$2({
                            node: /* Expr */{
                              _0: false
                            },
                            block: ctx.block,
                            refs: ctx.refs,
                            env: ctx.env
                          }, c._0), Belt_List.map(c._1, (function (param) {
                              return string_of_expr$2(partial_arg$2, param);
                            }))));
    case /* Bgn */7 :
        var es = c._0;
        var e$2 = c._1;
        var match$1 = ctx.node;
        if (typeof match$1 === "number") {
          var partial_arg_block$3 = ctx.block;
          var partial_arg_refs$3 = ctx.refs;
          var partial_arg_env$3 = ctx.env;
          var partial_arg$3 = {
            node: /* Stat */0,
            block: partial_arg_block$3,
            refs: partial_arg_refs$3,
            env: partial_arg_env$3
          };
          var es$1 = Belt_List.map(es, (function (param) {
                  return string_of_expr$2(partial_arg$3, param);
                }));
          var e$3 = string_of_expr$2(ctx, e$2);
          return $$String.concat("\n", Belt_List.concatMany([
                          es$1,
                          {
                            hd: e$3,
                            tl: /* [] */0
                          }
                        ]));
        }
        var ese = Belt_List.concatMany([
              es,
              {
                hd: e$2,
                tl: /* [] */0
              }
            ]);
        var partial_arg_node$3 = /* Expr */{
          _0: false
        };
        var partial_arg_block$4 = ctx.block;
        var partial_arg_refs$4 = ctx.refs;
        var partial_arg_env$4 = ctx.env;
        var partial_arg$4 = {
          node: partial_arg_node$3,
          block: partial_arg_block$4,
          refs: partial_arg_refs$4,
          env: partial_arg_env$4
        };
        var ese$1 = Belt_List.map(ese, (function (param) {
                return string_of_expr$2(partial_arg$4, param);
              }));
        return "[" + $$String.concat(", ", ese$1) + "][-1]";
    case /* If */8 :
        var e_cnd = string_of_expr$2({
              node: /* Expr */{
                _0: false
              },
              block: ctx.block,
              refs: ctx.refs,
              env: ctx.env
            }, c._0);
        var e_thn = string_of_expr$2(ctx, c._1);
        var e_els = string_of_expr$2(ctx, c._2);
        var match$2 = ctx.node;
        if (typeof match$2 === "number") {
          return "if " + e_cnd + ":\n    " + indent(e_thn, 4) + "\nelse:\n    " + indent(e_els, 4) + "";
        } else {
          return "" + e_thn + " if " + e_cnd + " else " + e_els + "";
        }
    case /* Cnd */9 :
        var match$3 = ctx.node;
        if (typeof match$3 === "number") {
          var ebs = Belt_List.map(c._0, (function (param) {
                  return string_of_eb$2(ctx, param);
                }));
          var ob = string_of_ob(ctx, c._1);
          var ob$1 = ob !== undefined ? "else:\n    " + indent(ob, 4) + "" : "";
          var ebs$1 = Belt_List.map(ebs, (function (param) {
                  return "if " + param[0] + ":\n    " + indent(param[1], 4) + "\n";
                }));
          var ebs$2 = $$String.concat("el", ebs$1);
          return ebs$2 + ob$1;
        } else {
          return "if...";
        }
    
  }
}

function string_of_def$2(ctx, d) {
  var match = d.it;
  if (match.TAG === /* Var */0) {
    var x = match._0;
    var e = string_of_expr$2({
          node: /* Expr */{
            _0: false
          },
          block: ctx.block,
          refs: ctx.refs,
          env: ctx.env
        }, match._1);
    return "" + string_of_identifier$1(x.it) + " = " + e + "";
  }
  var xs = match._1;
  var f = string_of_identifier$1(match._0.it);
  var xs$1 = Belt_List.map(Belt_List.map(xs, unannotate), string_of_identifier$1);
  var b = string_of_block$2({
        node: /* Return */1,
        block: ctx.block,
        refs: ctx.refs,
        env: ctx.env
      }, xs, match._2);
  return "def " + f + "" + string_of_list$2(xs$1) + ":\n    " + indent(b, 4) + "";
}

function string_of_eb$2(ctx, eb) {
  return [
          string_of_expr$2({
                node: /* Expr */{
                  _0: false
                },
                block: ctx.block,
                refs: ctx.refs,
                env: ctx.env
              }, eb[0]),
          string_of_block$2(ctx, /* [] */0, eb[1])
        ];
}

function string_of_ob(ctx, ob) {
  return Belt_Option.map(ob, (function (param) {
                return string_of_block$2(ctx, /* [] */0, param);
              }));
}

function block_as_expr(ctx, ts, e) {
  if (!ts) {
    return string_of_expr$2(ctx, e);
  }
  var is_exp = function (t) {
    if (t.TAG === /* Def */0) {
      return false;
    } else {
      return true;
    }
  };
  var as_exp = function (t) {
    if (t.TAG !== /* Def */0) {
      return t._0;
    }
    throw {
          RE_EXN_ID: Impossible,
          _1: "We have checked!",
          Error: new Error()
        };
  };
  if (!Belt_List.every(ts, is_exp)) {
    return "\nbegin\n    " + indent(string_of_block$2({
                    node: /* Return */1,
                    block: ctx.block,
                    refs: ctx.refs,
                    env: ctx.env
                  }, /* [] */0, [
                    ts,
                    e
                  ]), 4) + "\nend";
  }
  var es = Belt_List.concatMany([
        Belt_List.map(ts, as_exp),
        {
          hd: e,
          tl: /* [] */0
        }
      ]);
  var partial_arg_node = /* Expr */{
    _0: false
  };
  var partial_arg_block = ctx.block;
  var partial_arg_refs = ctx.refs;
  var partial_arg_env = ctx.env;
  var partial_arg = {
    node: partial_arg_node,
    block: partial_arg_block,
    refs: partial_arg_refs,
    env: partial_arg_env
  };
  var es$1 = Belt_List.map(es, (function (param) {
          return string_of_expr$2(partial_arg, param);
        }));
  return "(" + $$String.concat(", ", es$1) + ")[-1]";
}

function identifier_of_term(t) {
  if (t.TAG !== /* Def */0) {
    return ;
  }
  var match = t._0.it;
  return match._0;
}

function xs_of_ts(ts) {
  return Belt_List.map(Belt_List.keepMap(ts, identifier_of_term), unannotate);
}

function string_of_block$2(ctx, xs, b) {
  var e = b[1];
  var ts = b[0];
  var refs = [];
  var ys = xs_of_ts(ts);
  var ctx_node = ctx.node;
  var ctx_block = ctx.block;
  var ctx_refs = ctx.refs;
  var ctx_env = make_local_env(ctx.env, Belt_List.concatMany([
            Belt_List.map(xs, unannotate),
            ys
          ]));
  var ctx_node$1 = ctx_node;
  var ctx_refs$1 = ctx_refs;
  var ctx_env$1 = ctx_env;
  var ctx_node$2 = ctx_node$1;
  var ctx_env$2 = ctx_env$1;
  var ctx$1 = {
    node: ctx_node$2,
    block: /* Local */3,
    refs: refs,
    env: ctx_env$2
  };
  var match = ctx_node$2;
  if (typeof match === "number") {
    var partial_arg_env = ctx_env$2;
    var partial_arg = {
      node: /* Stat */0,
      block: /* Local */3,
      refs: refs,
      env: partial_arg_env
    };
    var result = $$String.concat("\n", Belt_List.concatMany([
              Belt_List.map(ts, (function (param) {
                      return string_of_term$2(partial_arg, param);
                    })),
              {
                hd: string_of_expr$2(ctx$1, e),
                tl: /* [] */0
              }
            ]));
    var refs$1 = Js_array.filter((function (x) {
            var match = Belt_Option.getWithDefault(Js_dict.get(ctx_env$2, x), /* NonLocal */2);
            return match === 2 || match === 1;
          }), refs);
    var globals = Js_array.filter((function (x) {
            var match = Belt_Option.getWithDefault(Js_dict.get(ctx_env$2, x), /* NonLocal */2);
            return match === 1;
          }), refs$1);
    var nonlocals = Js_array.filter((function (x) {
            var match = Belt_Option.getWithDefault(Js_dict.get(ctx_env$2, x), /* NonLocal */2);
            return match === 2;
          }), refs$1);
    var decl_globals = globals.length === 0 ? "" : "global " + $$String.concat(", ", Belt_List.fromArray(globals)) + "\n";
    var decl_nonlocals = nonlocals.length === 0 ? "" : "nonlocal " + $$String.concat(", ", Belt_List.fromArray(nonlocals)) + "\n";
    return "" + decl_globals + "" + decl_nonlocals + "" + result + "";
  }
  var result$1 = block_as_expr(ctx$1, ts, e);
  var refs$2 = Js_array.filter((function (x) {
          var match = Belt_Option.getWithDefault(Js_dict.get(ctx_env$2, x), /* NonLocal */2);
          return match === 2 || match === 1;
        }), refs);
  if (refs$2.length === 0) {
    return result$1;
  } else {
    return "(\"WARNING: the translation might be inaccurate\", " + result$1 + ")[-1]";
  }
}

function string_of_term$2(ctx, t) {
  if (t.TAG === /* Def */0) {
    return string_of_def$2(ctx, t._0);
  } else {
    return string_of_expr$2({
                node: /* Stat */0,
                block: ctx.block,
                refs: ctx.refs,
                env: ctx.env
              }, t._0);
  }
}

function string_of_program$1(ts) {
  var ctx_refs = [];
  var ctx_env = make_global_env(xs_of_ts(ts));
  var ctx = {
    node: /* Stat */0,
    block: /* Global */1,
    refs: ctx_refs,
    env: ctx_env
  };
  return $$String.concat("\n", Belt_List.map(ts, (function (t) {
                    if (t.TAG === /* Def */0) {
                      return string_of_term$2(ctx, t);
                    }
                    var e = t._0;
                    var match = e.it;
                    switch (match.TAG | 0) {
                      case /* Set */2 :
                          return string_of_expr$2({
                                      node: /* Stat */0,
                                      block: /* Global */1,
                                      refs: ctx_refs,
                                      env: ctx_env
                                    }, e);
                      case /* AppPrm */5 :
                          var match$1 = match._0;
                          var exit = 0;
                          if (match$1 >= 15) {
                            if (match$1 === 17) {
                              exit = 2;
                            }
                            
                          } else if (match$1 >= 13) {
                            exit = 2;
                          }
                          if (exit === 2) {
                            return string_of_expr$2({
                                        node: /* Stat */0,
                                        block: /* Global */1,
                                        refs: ctx_refs,
                                        env: ctx_env
                                      }, e);
                          }
                          break;
                      default:
                        
                    }
                    return "print(" + string_of_expr$2({
                                node: /* Expr */{
                                  _0: false
                                },
                                block: /* Global */1,
                                refs: ctx_refs,
                                env: ctx_env
                              }, e) + ")";
                  })));
}

function translate_program$1(program) {
  return string_of_program$1(terms_of_string(program));
}

function translate_block$1(program) {
  var ts = terms_of_string(program);
  var match = as_many_then_one$1(ts);
  var e = as_expr("result", match[1]);
  var ctx_refs = [];
  var ctx_env = {};
  var ctx = {
    node: /* Return */1,
    block: /* Local */3,
    refs: ctx_refs,
    env: ctx_env
  };
  return string_of_block$2(ctx, /* [] */0, [
              match[0],
              e
            ]);
}

function translate_expressions$1(results) {
  var ts = terms_of_string(results);
  var ctx_node = /* Expr */{
    _0: false
  };
  var ctx_refs = [];
  var ctx_env = {};
  var ctx = {
    node: ctx_node,
    block: /* Local */3,
    refs: ctx_refs,
    env: ctx_env
  };
  return $$String.concat(" ", Belt_List.map(Belt_List.map(ts, (function (param) {
                        return as_expr("expr", param);
                      })), (function (param) {
                    return string_of_expr$2(ctx, param);
                  })));
}

var stringify = {
  string_of_result: string_of_result,
  string_of_expr: string_of_expr,
  string_of_def: string_of_def,
  string_of_term: string_of_term,
  string_of_block: string_of_block,
  string_of_program: string_of_program
};

var partial_arg = /* Expr */{
  _0: false
};

function stringifyAsJS_string_of_result(r) {
  switch (r.TAG | 0) {
    case /* Con */0 :
        return string_of_constant$1(r._0);
    case /* Vec */1 :
    case /* Fun */2 :
        return string_of_result(r);
    case /* PrmFun */3 :
        return string_of_identifier(string_of_result(r));
    
  }
}

function stringifyAsJS_string_of_expr(param) {
  return string_of_expr$1(partial_arg, param);
}

function stringifyAsJS_string_of_block(param) {
  return string_of_block$1(/* Return */1, param);
}

function stringifyAsJS_string_of_program(ts) {
  return $$String.concat("\n", Belt_List.map(ts, string_of_term$1));
}

var stringifyAsJS = {
  string_of_result: stringifyAsJS_string_of_result,
  string_of_expr: stringifyAsJS_string_of_expr,
  string_of_def: string_of_def$1,
  string_of_term: string_of_term$1,
  string_of_block: stringifyAsJS_string_of_block,
  string_of_program: stringifyAsJS_string_of_program
};

var stat_ctx_refs = [];

var stat_ctx_env = {};

var stat_ctx = {
  node: /* Stat */0,
  block: /* Local */3,
  refs: stat_ctx_refs,
  env: stat_ctx_env
};

var expr_ctx_node = /* Expr */{
  _0: false
};

var expr_ctx_refs = [];

var expr_ctx_env = {};

var expr_ctx = {
  node: expr_ctx_node,
  block: /* Local */3,
  refs: expr_ctx_refs,
  env: expr_ctx_env
};

var body_ctx_refs = [];

var body_ctx_env = {};

var body_ctx = {
  node: /* Return */1,
  block: /* Local */3,
  refs: body_ctx_refs,
  env: body_ctx_env
};

function stringifyAsPY_string_of_result(r) {
  switch (r.TAG | 0) {
    case /* Con */0 :
        return string_of_constant$1(r._0);
    case /* Vec */1 :
    case /* Fun */2 :
        return string_of_result(r);
    case /* PrmFun */3 :
        return string_of_identifier$1(string_of_result(r));
    
  }
}

function stringifyAsPY_string_of_expr(param) {
  return string_of_expr$2(expr_ctx, param);
}

function stringifyAsPY_string_of_def(param) {
  return string_of_def$2(stat_ctx, param);
}

function stringifyAsPY_string_of_term(param) {
  return string_of_term$2(stat_ctx, param);
}

function stringifyAsPY_string_of_block(param) {
  return string_of_block$2(body_ctx, /* [] */0, param);
}

var stringifyAsPY = {
  string_of_result: stringifyAsPY_string_of_result,
  string_of_expr: stringifyAsPY_string_of_expr,
  string_of_def: stringifyAsPY_string_of_def,
  string_of_term: stringifyAsPY_string_of_term,
  string_of_block: stringifyAsPY_string_of_block,
  string_of_program: string_of_program$1
};

var SMoLToJS = {
  translate_program: translate_program,
  translate_block: translate_block,
  translate_expressions: translate_expressions
};

var SMoLToPY = {
  translate_program: translate_program$1,
  translate_block: translate_block$1,
  translate_expressions: translate_expressions$1
};

export {
  stringify ,
  stringifyAsJS ,
  stringifyAsPY ,
  SMoLToJS ,
  SMoLToPY ,
  ParseError ,
  stringOfExprs ,
  stringOfParseError ,
  as_expr ,
  constant_of_atom ,
  value_of_sexpr ,
  expr_of_atom ,
  term_of_sexpr ,
  app_prm ,
  terms_of_sexprs ,
  terms_of_string ,
}
/* base_env Not a pure module */
